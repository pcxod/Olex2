//----------------------------------------------------------------------------//
// crystallographic symmetry library
// TXBond
// (c) Oleg V. Dolomanov, 2004
//----------------------------------------------------------------------------//

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#include <stdlib.h>

#include "symmlib.h"
#include "dataitem.h"
#include "symmparser.h"
#include "bapp.h"

  TSymmLib* TSymmLib::Instance = NULL;

struct olx_SGDef  {
  const char* name, *full_name, *hall_symbol, *axis;
  int number, latt;
  const char* matrices;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// automatically generated code
olx_SGDef olx_SGLib[499]={
{"A112", "A 1 1 2", "A 2", "c1", 5, -5, "-X,-Y,+Z"}, 
{"A112/a", "A 1 1 2/a", "-A 2a", "c1", 15, 5, "0.5-X,-Y,+Z"}, 
{"A112/m", "A 1 1 2/m", "-A 2", "c1", 12, 5, "-X,-Y,+Z"}, 
{"A112/n", "A 1 1 2/n", "-A 2ac", "-c2", 15, 5, "0.5-X,-Y,0.5+Z"}, 
{"A11a", "A 1 1 a", "A -2a", "c1", 9, -5, "0.5+X,+Y,-Z"}, 
{"A11m", "A 1 1 m", "A -2", "c1", 8, -5, "+X,+Y,-Z"}, 
{"A11n", "A 1 1 n", "A -2ac", "-c2", 9, -5, "0.5+X,+Y,0.5-Z"}, 
{"A2", "A 1 2 1", "A 2y", "b2", 5, -5, "-X,+Y,-Z"}, 
{"A2/a", "A 1 2/a 1", "-A 2ya", "-b1", 15, 5, "0.5-X,+Y,-Z"}, 
{"A2/m", "A 1 2/m 1", "-A 2y", "b2", 12, 5, "-X,+Y,-Z"}, 
{"A2/n", "A 1 2/n 1", "-A 2yac", "b2", 15, 5, "0.5-X,+Y,0.5-Z"}, 
{"A2122", "A 21 2 2", "A 2a 2a", "cab", 20, -5, "0.5-X,-Y,+Z;0.5+X,-Y,-Z;-X,+Y,-Z"}, 
{"A21am", "A 21 a m", "A -2 2a", "-cba", 36, -5, "0.5+X,-Y,-Z;+X,+Y,-Z;0.5+X,-Y,+Z"}, 
{"A21ma", "A 21 m a", "A -2a 2a", "cab", 36, -5, "0.5+X,-Y,-Z;0.5+X,+Y,-Z;+X,-Y,+Z"}, 
{"A222", "A 2 2 2", "A 2 2", "cab", 21, -5, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"A2aa", "A 2 a a", "A -2a 2", "cab", 37, -5, "+X,-Y,-Z;0.5+X,+Y,-Z;0.5+X,-Y,+Z"}, 
{"A2mm", "A 2 m m", "A -2 2", "cab", 35, -5, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"Aa", "A 1 a 1", "A -2ya", "-b1", 9, -5, "0.5+X,-Y,+Z"}, 
{"Aba2", "A b a 2", "A 2 -2ac", "", 41, -5, "-X,-Y,+Z;0.5-X,+Y,0.5+Z;0.5+X,-Y,0.5+Z"}, 
{"Abaa", "A b a a", "-A 2a 2c", "cab", 68, 5, "0.5-X,-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Abm2", "A b m 2", "A 2 -2c", "", 39, -5, "-X,-Y,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"Abma", "A b m a", "-A 2ac 2ac", "cab", 64, 5, "0.5-X,-Y,0.5+Z;0.5+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Abmm", "A b m m", "-A 2c 2c", "cab", 67, 5, "-X,-Y,0.5+Z;+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Ac2a", "A c 2 a", "A -2ac -2ac", "a-cb", 41, -5, "-X,+Y,-Z;0.5+X,+Y,0.5-Z;0.5-X,+Y,0.5+Z"}, 
{"Ac2m", "A c 2 m", "A -2c -2c", "a-cb", 39, -5, "-X,+Y,-Z;+X,+Y,0.5-Z;-X,+Y,0.5+Z"}, 
{"Acaa", "A c a a", "-A 2ac 2c", "-cba", 68, 5, "0.5-X,-Y,0.5+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Acam", "A c a m", "-A 2 2ac", "-cba", 64, 5, "-X,-Y,+Z;0.5+X,-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Acmm", "A c m m", "-A 2 2c", "-cba", 67, 5, "-X,-Y,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Am", "A 1 m 1", "A -2y", "b2", 8, -5, "+X,-Y,+Z"}, 
{"Am2a", "A m 2 a", "A -2a -2a", "a-cb", 40, -5, "-X,+Y,-Z;0.5+X,+Y,-Z;0.5-X,+Y,+Z"}, 
{"Am2m", "A m 2 m", "A -2 -2", "a-cb", 38, -5, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Ama2", "A m a 2", "A 2 -2a", "", 40, -5, "-X,-Y,+Z;0.5-X,+Y,+Z;0.5+X,-Y,+Z"}, 
{"Amaa", "A m a a", "-A 2a 2", "cab", 66, 5, "0.5-X,-Y,+Z;+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Amam", "A m a m", "-A 2 2a", "-cba", 63, 5, "-X,-Y,+Z;0.5+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Amm2", "A m m 2", "A 2 -2", "", 38, -5, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Amma", "A m m a", "-A 2a 2a", "cab", 63, 5, "0.5-X,-Y,+Z;0.5+X,-Y,-Z;-X,+Y,-Z"}, 
{"Ammm", "A m m m", "-A 2 2", "cab", 65, 5, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"An", "A 1 n 1", "A -2yac", "b2", 9, -5, "0.5+X,-Y,0.5+Z"}, 
{"B112", "B 1 1 2", "B 2", "c2", 5, -6, "-X,-Y,+Z"}, 
{"B112/b", "B 1 1 2/b", "-B 2b", "-c1", 15, 6, "-X,0.5-Y,+Z"}, 
{"B112/m", "B 1 1 2/m", "-B 2", "c2", 12, 6, "-X,-Y,+Z"}, 
{"B112/n", "B 1 1 2/n", "-B 2bc", "c2", 15, 6, "-X,0.5-Y,0.5+Z"}, 
{"B11b", "B 1 1 b", "B -2b", "-c1", 9, -6, "+X,0.5+Y,-Z"}, 
{"B11m", "B 1 1 m", "B -2", "c2", 8, -6, "+X,+Y,-Z"}, 
{"B11n", "B 1 1 n", "B -2bc", "c2", 9, -6, "+X,0.5+Y,0.5-Z"}, 
{"B2/b11", "B 2/b 1 1", "-B 2xb", "a1", 15, 6, "+X,0.5-Y,-Z"}, 
{"B2/m11", "B 2/m 1 1", "-B 2x", "a1", 12, 6, "+X,-Y,-Z"}, 
{"B2/n11", "B 2/n 1 1", "-B 2xbc", "-a2", 15, 6, "+X,0.5-Y,0.5-Z"}, 
{"B211", "B 2 1 1", "B 2x", "a1", 5, -6, "+X,-Y,-Z"}, 
{"B2212", "B 2 21 2", "B 2 2b", "bca", 20, -6, "-X,-Y,+Z;+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"B222", "B 2 2 2", "B 2 2", "bca", 21, -6, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"B2cb", "B 2 c b", "B -2bc 2", "cab", 41, -6, "+X,-Y,-Z;+X,0.5+Y,0.5-Z;+X,0.5-Y,0.5+Z"}, 
{"B2cm", "B 2 c m", "B -2c 2", "cab", 39, -6, "+X,-Y,-Z;+X,+Y,0.5-Z;+X,-Y,0.5+Z"}, 
{"B2mb", "B 2 m b", "B -2b 2", "cab", 40, -6, "+X,-Y,-Z;+X,0.5+Y,-Z;+X,0.5-Y,+Z"}, 
{"B2mm", "B 2 m m", "B -2 2", "cab", 38, -6, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"Bb11", "B b 1 1", "B -2xb", "a1", 9, -6, "-X,0.5+Y,+Z"}, 
{"Bb21m", "B b 21 m", "B -2 -2b", "bca", 36, -6, "-X,0.5+Y,-Z;+X,+Y,-Z;-X,0.5+Y,+Z"}, 
{"Bb2b", "B b 2 b", "B -2b -2b", "bca", 37, -6, "-X,+Y,-Z;+X,0.5+Y,-Z;-X,0.5+Y,+Z"}, 
{"Bba2", "B b a 2", "B 2 -2bc", "ba-c", 41, -6, "-X,-Y,+Z;-X,0.5+Y,0.5+Z;+X,0.5-Y,0.5+Z"}, 
{"Bbab", "B b a b", "-B 2b 2bc", "a-cb", 68, 6, "-X,0.5-Y,+Z;+X,0.5-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Bbcb", "B b c b", "-B 2bc 2b", "bca", 68, 6, "-X,0.5-Y,0.5+Z;+X,0.5-Y,-Z;-X,+Y,0.5-Z"}, 
{"Bbcm", "B b c m", "-B 2 2bc", "bca", 64, 6, "-X,-Y,+Z;+X,0.5-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Bbm2", "B b m 2", "B 2 -2b", "ba-c", 40, -6, "-X,-Y,+Z;-X,0.5+Y,+Z;+X,0.5-Y,+Z"}, 
{"Bbmb", "B b m b", "-B 2b 2b", "bca", 66, 6, "-X,0.5-Y,+Z;+X,0.5-Y,-Z;-X,+Y,-Z"}, 
{"Bbmm", "B b m m", "-B 2 2b", "bca", 63, 6, "-X,-Y,+Z;+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"Bm11", "B m 1 1", "B -2x", "a1", 8, -6, "-X,+Y,+Z"}, 
{"Bm21b", "B m 21 b", "B -2b -2", "a-cb", 36, -6, "-X,0.5+Y,-Z;+X,0.5+Y,-Z;-X,+Y,+Z"}, 
{"Bm2m", "B m 2 m", "B -2 -2", "bca", 35, -6, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Bma2", "B m a 2", "B 2 -2c", "ba-c", 39, -6, "-X,-Y,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"Bmab", "B m a b", "-B 2bc 2", "a-cb", 64, 6, "-X,0.5-Y,0.5+Z;+X,-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Bmam", "B m a m", "-B 2c 2", "a-cb", 67, 6, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"Bmcm", "B m c m", "-B 2 2c", "bca", 67, 6, "-X,-Y,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Bmm2", "B m m 2", "B 2 -2", "ba-c", 38, -6, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Bmmb", "B m m b", "-B 2b 2", "a-cb", 63, 6, "-X,0.5-Y,+Z;+X,-Y,-Z;-X,0.5+Y,-Z"}, 
{"Bmmm", "B m m m", "-B 2 2", "bca", 65, 6, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Bn11", "B n 1 1", "B -2xbc", "-a2", 9, -6, "-X,0.5+Y,0.5+Z"}, 
{"C1", "C 1", "C 1", "", 1, -7, ""}, 
{"C2", "C 1 2 1", "C 2y", "b1", 5, -7, "-X,+Y,-Z"}, 
{"C2/c", "C 1 2/c 1", "-C 2yc", "b1", 15, 7, "-X,+Y,0.5-Z"}, 
{"C2/c11", "C 2/c 1 1", "-C 2xc", "-a1", 15, 7, "+X,-Y,0.5-Z"}, 
{"C2/m", "C 1 2/m 1", "-C 2y", "b1", 12, 7, "-X,+Y,-Z"}, 
{"C2/m11", "C 2/m 1 1", "-C 2x", "a2", 12, 7, "+X,-Y,-Z"}, 
{"C2/n", "C 1 2/n 1", "-C 2ybc", "-b2", 15, 7, "-X,0.5+Y,0.5-Z"}, 
{"C2/n11", "C 2/n 1 1", "-C 2xbc", "a2", 15, 7, "+X,0.5-Y,0.5-Z"}, 
{"C211", "C 2 1 1", "C 2x", "a2", 5, -7, "+X,-Y,-Z"}, 
{"C222", "C 2 2 2", "C 2 2", "", 21, -7, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"C2221", "C 2 2 21", "C 2c 2", "", 20, -7, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"C2cb", "C 2 c b", "C -2bc 2", "-cba", 41, -7, "+X,-Y,-Z;+X,0.5+Y,0.5-Z;+X,0.5-Y,0.5+Z"}, 
{"C2cm", "C 2 c m", "C -2c 2", "-cba", 40, -7, "+X,-Y,-Z;+X,+Y,0.5-Z;+X,-Y,0.5+Z"}, 
{"C2mb", "C 2 m b", "C -2b 2", "-cba", 39, -7, "+X,-Y,-Z;+X,0.5+Y,-Z;+X,0.5-Y,+Z"}, 
{"C2mm", "C 2 m m", "C -2 2", "-cba", 38, -7, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"Cc", "C 1 c 1", "C -2yc", "b1", 9, -7, "+X,-Y,0.5+Z"}, 
{"Cc11", "C c 1 1", "C -2xc", "-a1", 9, -7, "-X,+Y,0.5+Z"}, 
{"Cc2a", "C c 2 a", "C -2bc -2bc", "bca", 41, -7, "-X,+Y,-Z;+X,0.5+Y,0.5-Z;-X,0.5+Y,0.5+Z"}, 
{"Cc2m", "C c 2 m", "C -2c -2c", "bca", 40, -7, "-X,+Y,-Z;+X,+Y,0.5-Z;-X,+Y,0.5+Z"}, 
{"Ccc2", "C c c 2", "C 2 -2c", "", 37, -7, "-X,-Y,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"Ccca", "C c c a", "-C 2b 2bc", "", 68, 7, "-X,0.5-Y,+Z;+X,0.5-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Cccb", "C c c b", "-C 2b 2c", "ba-c", 68, 7, "-X,0.5-Y,+Z;+X,-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Cccm", "C c c m", "-C 2 2c", "", 66, 7, "-X,-Y,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Ccm21", "C c m 21", "C 2c -2c", "ba-c", 36, -7, "-X,-Y,0.5+Z;-X,+Y,0.5+Z;+X,-Y,+Z"}, 
{"Ccmb", "C c m b", "-C 2bc 2bc", "ba-c", 64, 7, "-X,0.5-Y,0.5+Z;+X,0.5-Y,0.5-Z;-X,+Y,-Z"}, 
{"Ccmm", "C c m m", "-C 2c 2c", "ba-c", 63, 7, "-X,-Y,0.5+Z;+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Cm", "C 1 m 1", "C -2y", "b1", 8, -7, "+X,-Y,+Z"}, 
{"Cm11", "C m 1 1", "C -2x", "a2", 8, -7, "-X,+Y,+Z"}, 
{"Cm2a", "C m 2 a", "C -2b -2b", "bca", 39, -7, "-X,+Y,-Z;+X,0.5+Y,-Z;-X,0.5+Y,+Z"}, 
{"Cm2m", "C m 2 m", "C -2 -2", "bca", 38, -7, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Cmc21", "C m c 21", "C 2c -2", "", 36, -7, "-X,-Y,0.5+Z;-X,+Y,+Z;+X,-Y,0.5+Z"}, 
{"Cmca", "C m c a", "-C 2bc 2", "", 64, 7, "-X,0.5-Y,0.5+Z;+X,-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Cmcm", "C m c m", "-C 2c 2", "", 63, 7, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"Cmm2", "C m m 2", "C 2 -2", "", 35, -7, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Cmma", "C m m a", "-C 2b 2", "", 67, 7, "-X,0.5-Y,+Z;+X,-Y,-Z;-X,0.5+Y,-Z"}, 
{"Cmmb", "C m m b", "-C 2b 2b", "ba-c", 67, 7, "-X,0.5-Y,+Z;+X,0.5-Y,-Z;-X,+Y,-Z"}, 
{"Cmmm", "C m m m", "-C 2 2", "", 65, 7, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Cn", "C 1 n 1", "C -2ybc", "-b2", 9, -7, "+X,0.5-Y,0.5+Z"}, 
{"Cn11", "C n 1 1", "C -2xbc", "a2", 9, -7, "-X,0.5+Y,0.5+Z"}, 
{"F-43c", "F -4 3 c", "F -4c 2 3", "", 219, -4, "+Y,-X,0.5-Z;-X,-Y,+Z;-Y,+X,0.5-Z;-X,+Z,0.5-Y;+X,-Y,-Z;-X,-Z,0.5+Y;-Z,-Y,0.5+X;-X,+Y,-Z;+Z,-Y,0.5-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,0.5+Z;+Y,+X,0.5+Z;+X,-Z,0.5-Y;+X,+Z,0.5+Y;-Z,+Y,0.5-X;+Z,+Y,0.5+X"}, 
{"F-43m", "F -4 3 m", "F -4 2 3", "", 216, -4, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"}, 
{"F222", "F 2 2 2", "F 2 2", "", 22, -4, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"F23", "F 2 3 F", "F 2 2 3", "", 196, -4, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"F2dd", "F 2 d d", "F -2d 2", "cab", 43, -4, "+X,-Y,-Z;0.25+X,0.25+Y,0.25-Z;0.25+X,0.25-Y,0.25+Z"}, 
{"F2mm", "F 2 m m", "F -2 2", "cab", 42, -4, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"F4132", "F 41 3 2", "F 4d 2 3", "", 210, -4, "0.25-Y,0.25+X,0.25+Z;-X,-Y,+Z;0.25+Y,0.25-X,0.25+Z;0.25+X,0.25-Z,0.25+Y;+X,-Y,-Z;0.25+X,0.25+Z,0.25-Y;0.25+Z,0.25+Y,0.25-X;-X,+Y,-Z;0.25-Z,0.25+Y,0.25+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;0.25+Y,0.25+X,0.25-Z;0.25-Y,0.25-X,0.25-Z;0.25-X,0.25+Z,0.25+Y;0.25-X,0.25-Z,0.25-Y;0.25+Z,0.25-Y,0.25+X;0.25-Z,0.25-Y,0.25-X"}, 
{"F432", "F 4 3 2", "F 4 2 3", "", 209, -4, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"Fd-3", "F d -3", "-F 2uv 2vw 3", "", 203, 4, "+Z,+X,+Y;+Y,+Z,+X;0.25-Y,0.25-Z,+X;+Z,0.25-X,0.25-Y;0.25-Y,+Z,0.25-X;0.25-Z,0.25-X,+Y;0.25-Z,+X,0.25-Y;+Y,0.25-Z,0.25-X;0.25-X,0.25-Y,+Z;+X,0.25-Y,0.25-Z;0.25-X,+Y,0.25-Z"}, 
{"Fd-3c", "F d -3 c", "-F 4cvw 2vw 3", "", 228, 4, "-Y,0.25+X,0.75+Z;0.25-X,0.25-Y,+Z;0.25+Y,-X,0.75+Z;0.25+X,-Z,0.75+Y;+X,0.25-Y,0.25-Z;0.25+X,0.75+Z,-Y;0.25+Z,0.75+Y,-X;0.25-X,+Y,0.25-Z;-Z,0.25+Y,0.75+X;+Z,+X,+Y;+Y,+Z,+X;0.25-Y,0.25-Z,+X;+Z,0.25-X,0.25-Y;0.25-Y,+Z,0.25-X;0.25-Z,0.25-X,+Y;0.25-Z,+X,0.25-Y;+Y,0.25-Z,0.25-X;0.25+Y,0.75+X,-Z;-Y,-X,0.5-Z;-X,0.25+Z,0.75+Y;-X,-Z,0.5-Y;0.25+Z,-Y,0.75+X;-Z,-Y,0.5-X"}, 
{"Fd-3m", "F d -3 m", "-F 4vw 2vw 3", "", 227, 4, "-Y,0.25+X,0.25+Z;0.25-X,0.25-Y,+Z;0.25+Y,-X,0.25+Z;0.25+X,-Z,0.25+Y;+X,0.25-Y,0.25-Z;0.25+X,0.25+Z,-Y;0.25+Z,0.25+Y,-X;0.25-X,+Y,0.25-Z;-Z,0.25+Y,0.25+X;+Z,+X,+Y;+Y,+Z,+X;0.25-Y,0.25-Z,+X;+Z,0.25-X,0.25-Y;0.25-Y,+Z,0.25-X;0.25-Z,0.25-X,+Y;0.25-Z,+X,0.25-Y;+Y,0.25-Z,0.25-X;0.25+Y,0.25+X,-Z;-Y,-X,-Z;-X,0.25+Z,0.25+Y;-X,-Z,-Y;0.25+Z,-Y,0.25+X;-Z,-Y,-X"}, 
{"Fd2d", "F d 2 d", "F -2d -2d", "bca", 43, -4, "-X,+Y,-Z;0.25+X,0.25+Y,0.25-Z;0.25-X,0.25+Y,0.25+Z"}, 
{"Fdd2", "F d d 2", "F 2 -2d", "", 43, -4, "-X,-Y,+Z;0.25-X,0.25+Y,0.25+Z;0.25+X,0.25-Y,0.25+Z"}, 
{"Fddd", "F d d d", "-F 2uv 2vw", "", 70, 4, "0.25-X,0.25-Y,+Z;+X,0.25-Y,0.25-Z;0.25-X,+Y,0.25-Z"}, 
{"Fm-3", "F m -3", "-F 2 2 3", "", 202, 4, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Fm-3c", "F m -3 c", "-F 4c 2 3", "", 226, 4, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;+X,-Z,0.5+Y;+X,-Y,-Z;+X,+Z,0.5-Y;+Z,+Y,0.5-X;-X,+Y,-Z;-Z,+Y,0.5+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,0.5-Z;-Y,-X,0.5-Z;-X,+Z,0.5+Y;-X,-Z,0.5-Y;+Z,-Y,0.5+X;-Z,-Y,0.5-X"}, 
{"Fm-3m", "F m -3 m", "-F 4 2 3", "", 225, 4, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"Fm2m", "F m 2 m", "F -2 -2", "bca", 42, -4, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Fmm2", "F m m 2", "F 2 -2", "", 42, -4, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Fmmm", "F m m m", "-F 2 2", "", 69, 4, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Fx", "", "", "", 231, -4, ""}, 
{"I-4", "I -4", "I -4", "", 82, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z"}, 
{"I-42d", "I -4 2 d", "I -4 2bw", "", 122, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,0.5-Y,0.25-Z;-X,0.5+Y,0.25-Z;-Y,0.5-X,0.25+Z;+Y,0.5+X,0.25+Z"}, 
{"I-42m", "I -4 2 m", "I -4 2", "", 121, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,-Z;-X,+Y,-Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"I-43d", "I -4 3 d", "I -4bd 2c 3", "", 220, -2, "0.25+Y,0.75-X,0.25-Z;-X,0.5-Y,+Z;0.25-Y,0.25+X,0.75-Z;0.25-X,0.25+Z,0.75-Y;+X,-Y,0.5-Z;0.75-X,0.25-Z,0.25+Y;0.75-Z,0.25-Y,0.25+X;0.5-X,+Y,-Z;0.25+Z,0.75-Y,0.25-X;+Z,+X,+Y;+Y,+Z,+X;-Y,0.5-Z,+X;+Z,-X,0.5-Y;0.5-Y,+Z,-X;-Z,0.5-X,+Y;0.5-Z,+X,-Y;+Y,-Z,0.5-X;0.75-Y,0.25-X,0.25+Z;0.25+Y,0.25+X,0.25+Z;0.25+X,0.75-Z,0.25-Y;0.25+X,0.25+Z,0.25+Y;0.25-Z,0.25+Y,0.75-X;0.25+Z,0.25+Y,0.25+X"}, 
{"I-43m", "I -4 3 m", "I -4 2 3", "", 217, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"}, 
{"I-4c2", "I -4 c 2", "I -4 -2c", "", 120, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"I-4m2", "I -4 m 2", "I -4 -2", "", 119, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,-Z;-Y,-X,-Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"I112", "I 1 1 2", "I 2", "c3", 5, -2, "-X,-Y,+Z"}, 
{"I112/a", "I 1 1 2/a", "-I 2a", "-c3", 15, 2, "0.5-X,-Y,+Z"}, 
{"I112/b", "I 1 1 2/b", "-I 2b", "c3", 15, 2, "-X,0.5-Y,+Z"}, 
{"I112/m", "I 1 1 2/m", "-I 2", "c3", 12, 2, "-X,-Y,+Z"}, 
{"I11a", "I 1 1 a", "I -2a", "-c3", 9, -2, "0.5+X,+Y,-Z"}, 
{"I11b", "I 1 1 b", "I -2b", "c3", 9, -2, "+X,0.5+Y,-Z"}, 
{"I11m", "I 1 1 m", "I -2", "c3", 8, -2, "+X,+Y,-Z"}, 
{"I2", "I 1 2 1", "I 2y", "b3", 5, -2, "-X,+Y,-Z"}, 
{"I2/a", "I 1 2/a 1", "-I 2ya", "b3", 15, 2, "0.5-X,+Y,-Z"}, 
{"I2/b11", "I 2/b 1 1", "-I 2xb", "-a3", 15, 2, "+X,0.5-Y,-Z"}, 
{"I2/c", "I 1 2/c 1", "-I 2yc", "-b3", 15, 2, "-X,+Y,0.5-Z"}, 
{"I2/c11", "I 2/c 1 1", "-I 2xc", "a3", 15, 2, "+X,-Y,0.5-Z"}, 
{"I2/m", "I 1 2/m 1", "-I 2y", "b3", 12, 2, "-X,+Y,-Z"}, 
{"I2/m11", "I 2/m 1 1", "-I 2x", "a3", 12, 2, "+X,-Y,-Z"}, 
{"I211", "I 2 1 1", "I 2x", "a3", 5, -2, "+X,-Y,-Z"}, 
{"I212121", "I 21 21 21", "I 2b 2c", "", 24, -2, "-X,0.5-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"I213", "I 21 3 I", "I 2b 2c 3", "", 199, -2, "+Z,+X,+Y;+Y,+Z,+X;-Y,0.5-Z,+X;+Z,-X,0.5-Y;0.5-Y,+Z,-X;-Z,0.5-X,+Y;0.5-Z,+X,-Y;+Y,-Z,0.5-X;-X,0.5-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"I222", "I 2 2 2", "I 2 2", "", 23, -2, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"I23", "I 2 3 I", "I 2 2 3", "", 197, -2, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"I2cb", "I 2 c b", "I -2a 2", "cab", 45, -2, "+X,-Y,-Z;0.5+X,+Y,-Z;0.5+X,-Y,+Z"}, 
{"I2cm", "I 2 c m", "I -2c 2", "-cba", 46, -2, "+X,-Y,-Z;+X,+Y,0.5-Z;+X,-Y,0.5+Z"}, 
{"I2mb", "I 2 m b", "I -2b 2", "cab", 46, -2, "+X,-Y,-Z;+X,0.5+Y,-Z;+X,0.5-Y,+Z"}, 
{"I2mm", "I 2 m m", "I -2 2", "cab", 44, -2, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"I4", "I 4", "I 4", "", 79, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"}, 
{"I4/m", "I 4/m", "-I 4", "", 87, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"}, 
{"I4/mcm", "I 4/m c m", "-I 4 2c", "", 140, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"I4/mmm", "I 4/m m m", "-I 4 2", "", 139, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"I41", "I 41", "I 4bw", "", 80, -2, "-Y,0.5+X,0.25+Z;-X,-Y,+Z;+Y,0.5-X,0.25+Z"}, 
{"I41/a", "I 41/a", "-I 4ad", "", 88, 2, "0.75-Y,0.25+X,0.25+Z;-X,0.5-Y,+Z;0.25+Y,0.25-X,0.25+Z"}, 
{"I41/acd", "I 41/a c d", "-I 4bd 2c", "", 142, 2, "0.25-Y,0.75+X,0.25+Z;-X,0.5-Y,+Z;0.25+Y,0.25-X,0.75+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z;0.75+Y,0.25+X,0.25-Z;0.25-Y,0.25-X,0.25-Z"}, 
{"I41/amd", "I 41/a m d", "-I 4bd 2", "", 141, 2, "0.25-Y,0.75+X,0.25+Z;-X,0.5-Y,+Z;0.25+Y,0.25-X,0.75+Z;+X,-Y,-Z;-X,0.5+Y,-Z;0.25+Y,0.75+X,0.25-Z;0.25-Y,0.25-X,0.75-Z"}, 
{"I4122", "I 41 2 2", "I 4bw 2bw", "", 98, -2, "-Y,0.5+X,0.25+Z;-X,-Y,+Z;+Y,0.5-X,0.25+Z;+X,0.5-Y,0.25-Z;-X,0.5+Y,0.25-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"I4132", "I 41 3 2", "I 4bd 2c 3", "", 214, -2, "0.25-Y,0.75+X,0.25+Z;-X,0.5-Y,+Z;0.25+Y,0.25-X,0.75+Z;0.25+X,0.25-Z,0.75+Y;+X,-Y,0.5-Z;0.75+X,0.25+Z,0.25-Y;0.75+Z,0.25+Y,0.25-X;0.5-X,+Y,-Z;0.25-Z,0.75+Y,0.25+X;+Z,+X,+Y;+Y,+Z,+X;-Y,0.5-Z,+X;+Z,-X,0.5-Y;0.5-Y,+Z,-X;-Z,0.5-X,+Y;0.5-Z,+X,-Y;+Y,-Z,0.5-X;0.75+Y,0.25+X,0.25-Z;0.25-Y,0.25-X,0.25-Z;0.25-X,0.75+Z,0.25+Y;0.25-X,0.25-Z,0.25-Y;0.25+Z,0.25-Y,0.75+X;0.25-Z,0.25-Y,0.25-X"}, 
{"I41cd", "I 41 c d", "I 4bw -2c", "", 110, -2, "-Y,0.5+X,0.25+Z;-X,-Y,+Z;+Y,0.5-X,0.25+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z;0.5-Y,-X,0.25+Z;0.5+Y,+X,0.25+Z"}, 
{"I41md", "I 41 m d", "I 4bw -2", "", 109, -2, "-Y,0.5+X,0.25+Z;-X,-Y,+Z;+Y,0.5-X,0.25+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,0.5-X,0.25+Z;+Y,0.5+X,0.25+Z"}, 
{"I422", "I 4 2 2", "I 4 2", "", 97, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"I432", "I 4 3 2", "I 4 2 3", "", 211, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"I4cm", "I 4 c m", "I 4 -2c", "", 108, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z;-Y,-X,0.5+Z;+Y,+X,0.5+Z"}, 
{"I4mm", "I 4 m m", "I 4 -2", "", 107, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"Ia", "I 1 a 1", "I -2ya", "b3", 9, -2, "0.5+X,-Y,+Z"}, 
{"Ia-3", "I a -3", "-I 2b 2c 3", "", 206, 2, "+Z,+X,+Y;+Y,+Z,+X;-Y,0.5-Z,+X;+Z,-X,0.5-Y;0.5-Y,+Z,-X;-Z,0.5-X,+Y;0.5-Z,+X,-Y;+Y,-Z,0.5-X;-X,0.5-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Ia-3d", "I a -3 d", "-I 4bd 2c 3", "", 230, 2, "0.25-Y,0.75+X,0.25+Z;-X,0.5-Y,+Z;0.25+Y,0.25-X,0.75+Z;0.25+X,0.25-Z,0.75+Y;+X,-Y,0.5-Z;0.75+X,0.25+Z,0.25-Y;0.75+Z,0.25+Y,0.25-X;0.5-X,+Y,-Z;0.25-Z,0.75+Y,0.25+X;+Z,+X,+Y;+Y,+Z,+X;-Y,0.5-Z,+X;+Z,-X,0.5-Y;0.5-Y,+Z,-X;-Z,0.5-X,+Y;0.5-Z,+X,-Y;+Y,-Z,0.5-X;0.75+Y,0.25+X,0.25-Z;0.25-Y,0.25-X,0.25-Z;0.25-X,0.75+Z,0.25+Y;0.25-X,0.25-Z,0.25-Y;0.25+Z,0.25-Y,0.75+X;0.25-Z,0.25-Y,0.25-X"}, 
{"Ib11", "I b 1 1", "I -2xb", "-a3", 9, -2, "-X,0.5+Y,+Z"}, 
{"Iba2", "I b a 2", "I 2 -2c", "", 45, -2, "-X,-Y,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"Ibam", "I b a m", "-I 2 2c", "", 72, 2, "-X,-Y,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Ibca", "I b c a", "-I 2b 2c", "", 73, 2, "-X,0.5-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Ibm2", "I b m 2", "I 2 -2b", "ba-c", 46, -2, "-X,-Y,+Z;-X,0.5+Y,+Z;+X,0.5-Y,+Z"}, 
{"Ibmm", "I b m m", "-I 2c 2c", "cab", 74, 2, "-X,-Y,0.5+Z;+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Ic", "I 1 c 1", "I -2yc", "-b3", 9, -2, "+X,-Y,0.5+Z"}, 
{"Ic11", "I c 1 1", "I -2xc", "a3", 9, -2, "-X,+Y,0.5+Z"}, 
{"Ic2a", "I c 2 a", "I -2b -2b", "bca", 45, -2, "-X,+Y,-Z;+X,0.5+Y,-Z;-X,0.5+Y,+Z"}, 
{"Ic2m", "I c 2 m", "I -2c -2c", "bca", 46, -2, "-X,+Y,-Z;+X,+Y,0.5-Z;-X,+Y,0.5+Z"}, 
{"Icab", "I c a b", "-I 2a 2b", "ba-c", 73, 2, "0.5-X,-Y,+Z;+X,0.5-Y,-Z;-X,+Y,0.5-Z"}, 
{"Icma", "I c m a", "-I 2b 2b", "bca", 72, 2, "-X,0.5-Y,+Z;+X,0.5-Y,-Z;-X,+Y,-Z"}, 
{"Icmm", "I c m m", "-I 2 2b", "-cba", 74, 2, "-X,-Y,+Z;+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"Im", "I 1 m 1", "I -2y", "b3", 8, -2, "+X,-Y,+Z"}, 
{"Im-3", "I m -3", "-I 2 2 3", "", 204, 2, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Im-3m", "I m -3 m", "-I 4 2 3", "", 229, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"Im11", "I m 1 1", "I -2x", "a3", 8, -2, "-X,+Y,+Z"}, 
{"Im2a", "I m 2 a", "I -2a -2a", "a-cb", 46, -2, "-X,+Y,-Z;0.5+X,+Y,-Z;0.5-X,+Y,+Z"}, 
{"Im2m", "I m 2 m", "I -2 -2", "bca", 44, -2, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Ima2", "I m a 2", "I 2 -2a", "", 46, -2, "-X,-Y,+Z;0.5-X,+Y,+Z;0.5+X,-Y,+Z"}, 
{"Imam", "I m a m", "-I 2c 2", "a-cb", 74, 2, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"Imcb", "I m c b", "-I 2a 2", "cab", 72, 2, "0.5-X,-Y,+Z;+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Imcm", "I m c m", "-I 2 2a", "bca", 74, 2, "-X,-Y,+Z;0.5+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Imm2", "I m m 2", "I 2 -2", "", 44, -2, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Imma", "I m m a", "-I 2b 2", "", 74, 2, "-X,0.5-Y,+Z;+X,-Y,-Z;-X,0.5+Y,-Z"}, 
{"Immb", "I m m b", "-I 2a 2a", "ba-c", 74, 2, "0.5-X,-Y,+Z;0.5+X,-Y,-Z;-X,+Y,-Z"}, 
{"Immm", "I m m m", "-I 2 2", "", 71, 2, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"P-1", "P -1", "-P 1", "", 2, 1, ""}, 
{"P-3", "P -3", "-P 3", "", 147, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z"}, 
{"P-31c", "P -3 1 c", "-P 3 2c", "", 163, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,0.5-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.5-Z"}, 
{"P-31m", "P -3 1 m", "-P 3 2", "", 162, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"}, 
{"P-3c1", "P -3 c 1", "-P 3 2\"c", "", 165, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,0.5-Z;-X,-X+Y,0.5-Z;+Y,+X,0.5-Z"}, 
{"P-3m1", "P -3 m 1", "-P 3 2\"", "", 164, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"}, 
{"P-4", "P -4", "P -4", "", 81, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z"}, 
{"P-421c", "P -4 21 c", "P -4 2n", "", 114, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z;0.5-Y,0.5-X,0.5+Z;0.5+Y,0.5+X,0.5+Z"}, 
{"P-421m", "P -4 21 m", "P -4 2ab", "", 113, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z;0.5-Y,0.5-X,+Z;0.5+Y,0.5+X,+Z"}, 
{"P-42c", "P -4 2 c", "P -4 2c", "", 112, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z;-Y,-X,0.5+Z;+Y,+X,0.5+Z"}, 
{"P-42m", "P -4 2 m", "P -4 2", "", 111, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,-Z;-X,+Y,-Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"P-43m", "P -4 3 m", "P -4 2 3", "", 215, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"}, 
{"P-43n", "P -4 3 n", "P -4n 2 3", "", 218, -1, "0.5+Y,0.5-X,0.5-Z;-X,-Y,+Z;0.5-Y,0.5+X,0.5-Z;0.5-X,0.5+Z,0.5-Y;+X,-Y,-Z;0.5-X,0.5-Z,0.5+Y;0.5-Z,0.5-Y,0.5+X;-X,+Y,-Z;0.5+Z,0.5-Y,0.5-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;0.5-Y,0.5-X,0.5+Z;0.5+Y,0.5+X,0.5+Z;0.5+X,0.5-Z,0.5-Y;0.5+X,0.5+Z,0.5+Y;0.5-Z,0.5+Y,0.5-X;0.5+Z,0.5+Y,0.5+X"}, 
{"P-4b2", "P -4 b 2", "P -4 -2ab", "", 117, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;0.5+Y,0.5+X,-Z;0.5-Y,0.5-X,-Z;0.5-X,0.5+Y,+Z;0.5+X,0.5-Y,+Z"}, 
{"P-4c2", "P -4 c 2", "P -4 -2c", "", 116, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"P-4m2", "P -4 m 2", "P -4 -2", "", 115, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,-Z;-Y,-X,-Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"P-4n2", "P -4 n 2", "P -4 -2n", "", 118, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;0.5+Y,0.5+X,0.5-Z;0.5-Y,0.5-X,0.5-Z;0.5-X,0.5+Y,0.5+Z;0.5+X,0.5-Y,0.5+Z"}, 
{"P-6", "P -6", "P -6", "", 174, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z"}, 
{"P-62c", "P -6 2 c", "P -6c -2c", "", 190, -1, "+Y-X,-X,0.5-Z;-Y,+X-Y,+Z;+X,+Y,0.5-Z;+Y-X,-X,+Z;-Y,+X-Y,0.5-Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;+Y,+X,0.5+Z;-Y+X,-Y,0.5+Z;-X,-X+Y,0.5+Z"}, 
{"P-62m", "P -6 2 m", "P -6 -2", "", 189, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"}, 
{"P-6c2", "P -6 c 2", "P -6c 2", "", 188, -1, "+Y-X,-X,0.5-Z;-Y,+X-Y,+Z;+X,+Y,0.5-Z;+Y-X,-X,+Z;-Y,+X-Y,0.5-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z;+Y-X,+Y,0.5+Z;+X,+X-Y,0.5+Z;-Y,-X,0.5+Z"}, 
{"P-6m2", "P -6 m 2", "P -6 2", "", 187, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"}, 
{"P1", "P 1", "P 1", "", 1, -1, ""}, 
{"P112", "P 1 1 2", "P 2", "c", 3, -1, "-X,-Y,+Z"}, 
{"P112/a", "P 1 1 2/a", "-P 2a", "c1", 13, 1, "0.5-X,-Y,+Z"}, 
{"P112/b", "P 1 1 2/b", "-P 2b", "c3", 13, 1, "-X,0.5-Y,+Z"}, 
{"P112/m", "P 1 1 2/m", "-P 2", "c", 10, 1, "-X,-Y,+Z"}, 
{"P112/n", "P 1 1 2/n", "-P 2ab", "c2", 13, 1, "0.5-X,0.5-Y,+Z"}, 
{"P1121", "P 1 1 21", "P 2c", "c", 4, -1, "-X,-Y,0.5+Z"}, 
{"P1121/a", "P 1 1 21/a", "-P 2ac", "c1", 14, 1, "0.5-X,-Y,0.5+Z"}, 
{"P1121/b", "P 1 1 21/b", "-P 2bc", "c3", 14, 1, "-X,0.5-Y,0.5+Z"}, 
{"P1121/m", "P 1 1 21/m", "-P 2c", "c", 11, 1, "-X,-Y,0.5+Z"}, 
{"P1121/n", "P 1 1 21/n", "-P 2n", "c2", 14, 1, "0.5-X,0.5-Y,0.5+Z"}, 
{"P11a", "P 1 1 a", "P -2a", "c1", 7, -1, "0.5+X,+Y,-Z"}, 
{"P11b", "P 1 1 b", "P -2b", "c3", 7, -1, "+X,0.5+Y,-Z"}, 
{"P11m", "P 1 1 m", "P -2", "c", 6, -1, "+X,+Y,-Z"}, 
{"P11n", "P 1 1 n", "P -2ab", "c2", 7, -1, "0.5+X,0.5+Y,-Z"}, 
{"P2", "P 1 2 1", "P 2y", "b", 3, -1, "-X,+Y,-Z"}, 
{"P2/a", "P 1 2/a 1", "-P 2ya", "b3", 13, 1, "0.5-X,+Y,-Z"}, 
{"P2/b11", "P 2/b 1 1", "-P 2xb", "a1", 13, 1, "+X,0.5-Y,-Z"}, 
{"P2/c", "P 1 2/c 1", "-P 2yc", "b1", 13, 1, "-X,+Y,0.5-Z"}, 
{"P2/c11", "P 2/c 1 1", "-P 2xc", "a3", 13, 1, "+X,-Y,0.5-Z"}, 
{"P2/m", "P 1 2/m 1", "-P 2y", "b", 10, 1, "-X,+Y,-Z"}, 
{"P2/m11", "P 2/m 1 1", "-P 2x", "a", 10, 1, "+X,-Y,-Z"}, 
{"P2/n", "P 1 2/n 1", "-P 2yac", "b2", 13, 1, "0.5-X,+Y,0.5-Z"}, 
{"P2/n11", "P 2/n 1 1", "-P 2xbc", "a2", 13, 1, "+X,0.5-Y,0.5-Z"}, 
{"P21", "P 1 21 1", "P 2yb", "b", 4, -1, "-X,0.5+Y,-Z"}, 
{"P21/a", "P 1 21/a 1", "-P 2yab", "b3", 14, 1, "0.5-X,0.5+Y,-Z"}, 
{"P21/b11", "P 21/b 1 1", "-P 2xab", "a1", 14, 1, "0.5+X,0.5-Y,-Z"}, 
{"P21/c", "P 1 21/c 1", "-P 2ybc", "b1", 14, 1, "-X,0.5+Y,0.5-Z"}, 
{"P21/c11", "P 21/c 1 1", "-P 2xac", "a3", 14, 1, "0.5+X,-Y,0.5-Z"}, 
{"P21/m", "P 1 21/m 1", "-P 2yb", "b", 11, 1, "-X,0.5+Y,-Z"}, 
{"P21/m11", "P 21/m 1 1", "-P 2xa", "a", 11, 1, "0.5+X,-Y,-Z"}, 
{"P21/n", "P 1 21/n 1", "-P 2yn", "b2", 14, 1, "0.5-X,0.5+Y,0.5-Z"}, 
{"P21/n11", "P 21/n 1 1", "-P 2xn", "a2", 14, 1, "0.5+X,0.5-Y,0.5-Z"}, 
{"P211", "P 2 1 1", "P 2x", "a", 3, -1, "+X,-Y,-Z"}, 
{"P2111", "P 21 1 1", "P 2xa", "a", 4, -1, "0.5+X,-Y,-Z"}, 
{"P21212", "P 21 21 2", "P 2 2ab", "", 18, -1, "-X,-Y,+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z"}, 
{"P212121", "P 21 21 21", "P 2ac 2ab", "", 19, -1, "0.5-X,-Y,0.5+Z;0.5+X,0.5-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"P2122", "P 21 2 2", "P 2a 2a", "cab", 17, -1, "0.5-X,-Y,+Z;0.5+X,-Y,-Z;-X,+Y,-Z"}, 
{"P21221", "P 21 2 21", "P 2ac 2ac", "bca", 18, -1, "0.5-X,-Y,0.5+Z;0.5+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"P213", "P 21 3 P", "P 2ac 2ab 3", "", 198, -1, "+Z,+X,+Y;+Y,+Z,+X;0.5-Y,-Z,0.5+X;0.5+Z,0.5-X,-Y;-Y,0.5+Z,0.5-X;0.5-Z,-X,0.5+Y;-Z,0.5+X,0.5-Y;0.5+Y,0.5-Z,-X;0.5-X,-Y,0.5+Z;0.5+X,0.5-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"P21ab", "P 21 a b", "P -2b 2a", "cab", 29, -1, "0.5+X,-Y,-Z;+X,0.5+Y,-Z;0.5+X,0.5-Y,+Z"}, 
{"P21am", "P 21 a m", "P -2 2a", "-cba", 26, -1, "0.5+X,-Y,-Z;+X,+Y,-Z;0.5+X,-Y,+Z"}, 
{"P21ca", "P 21 c a", "P -2ac 2a", "-cba", 29, -1, "0.5+X,-Y,-Z;0.5+X,+Y,0.5-Z;+X,-Y,0.5+Z"}, 
{"P21cn", "P 21 c n", "P -2n 2a", "-cba", 33, -1, "0.5+X,-Y,-Z;0.5+X,0.5+Y,0.5-Z;+X,0.5-Y,0.5+Z"}, 
{"P21ma", "P 21 m a", "P -2a 2a", "cab", 26, -1, "0.5+X,-Y,-Z;0.5+X,+Y,-Z;+X,-Y,+Z"}, 
{"P21mn", "P 21 m n", "P -2ab 2ab", "cab", 31, -1, "0.5+X,0.5-Y,-Z;0.5+X,0.5+Y,-Z;+X,-Y,+Z"}, 
{"P21nb", "P 21 n b", "P -2bc 2a", "cab", 33, -1, "0.5+X,-Y,-Z;+X,0.5+Y,0.5-Z;0.5+X,0.5-Y,0.5+Z"}, 
{"P21nm", "P 21 n m", "P -2 2ac", "-cba", 31, -1, "0.5+X,-Y,0.5-Z;+X,+Y,-Z;0.5+X,-Y,0.5+Z"}, 
{"P2212", "P 2 21 2", "P 2 2b", "bca", 17, -1, "-X,-Y,+Z;+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"P22121", "P 2 21 21", "P 2bc 2", "cab", 18, -1, "-X,0.5-Y,0.5+Z;+X,-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"P222", "P 2 2 2", "P 2 2", "", 16, -1, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"P2221", "P 2 2 21", "P 2c 2", "", 17, -1, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"P23", "P 2 3 P", "P 2 2 3", "", 195, -1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"P2aa", "P 2 a a", "P -2a 2", "cab", 27, -1, "+X,-Y,-Z;0.5+X,+Y,-Z;0.5+X,-Y,+Z"}, 
{"P2an", "P 2 a n", "P -2ab 2", "-cba", 30, -1, "+X,-Y,-Z;0.5+X,0.5+Y,-Z;0.5+X,0.5-Y,+Z"}, 
{"P2cb", "P 2 c b", "P -2bc 2", "cab", 32, -1, "+X,-Y,-Z;+X,0.5+Y,0.5-Z;+X,0.5-Y,0.5+Z"}, 
{"P2cm", "P 2 c m", "P -2c 2", "-cba", 28, -1, "+X,-Y,-Z;+X,+Y,0.5-Z;+X,-Y,0.5+Z"}, 
{"P2mb", "P 2 m b", "P -2b 2", "cab", 28, -1, "+X,-Y,-Z;+X,0.5+Y,-Z;+X,0.5-Y,+Z"}, 
{"P2mm", "P 2 m m", "P -2 2", "cab", 25, -1, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"}, 
{"P2na", "P 2 n a", "P -2ac 2", "cab", 30, -1, "+X,-Y,-Z;0.5+X,+Y,0.5-Z;0.5+X,-Y,0.5+Z"}, 
{"P2nn", "P 2 n n", "P -2n 2", "cab", 34, -1, "+X,-Y,-Z;0.5+X,0.5+Y,0.5-Z;0.5+X,0.5-Y,0.5+Z"}, 
{"P3", "P 3", "P 3", "", 143, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z"}, 
{"P31", "P 31", "P 31", "", 144, -1, "-Y,+X-Y,0.333+Z;+Y-X,-X,0.667+Z"}, 
{"P3112", "P 31 1 2", "P 31 2c (0 0 1)", "", 151, -1, "-Y,+X-Y,0.333+Z;+Y-X,-X,0.667+Z;-Y,-X,0.667-Z;+Y-X,+Y,0.333-Z;+X,+X-Y,-Z"}, 
{"P312", "P 3 1 2", "P 3 2", "", 149, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"}, 
{"P3121", "P 31 2 1", "P 31 2\"", "", 152, -1, "-Y,+X-Y,0.333+Z;+Y-X,-X,0.667+Z;-Y+X,-Y,0.667-Z;-X,-X+Y,0.333-Z;+Y,+X,-Z"}, 
{"P31c", "P 3 1 c", "P 3 -2c", "", 159, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y,+X,0.5+Z;-Y+X,-Y,0.5+Z;-X,-X+Y,0.5+Z"}, 
{"P31m", "P 3 1 m", "P 3 -2", "", 157, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"}, 
{"P32", "P 32", "P 32", "", 145, -1, "-Y,+X-Y,0.667+Z;+Y-X,-X,0.333+Z"}, 
{"P321", "P 3 2 1", "P 3 2\"", "", 150, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"}, 
{"P3212", "P 32 1 2", "P 32 2c (0 0 -1)", "", 153, -1, "-Y,+X-Y,0.667+Z;+Y-X,-X,0.333+Z;-Y,-X,0.333-Z;+Y-X,+Y,0.667-Z;+X,+X-Y,-Z"}, 
{"P3221", "P 32 2 1", "P 32 2\"", "", 154, -1, "-Y,+X-Y,0.667+Z;+Y-X,-X,0.333+Z;-Y+X,-Y,0.333-Z;-X,-X+Y,0.667-Z;+Y,+X,-Z"}, 
{"P3c1", "P 3 c 1", "P 3 -2\"c", "", 158, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,0.5+Z;+X,+X-Y,0.5+Z;-Y,-X,0.5+Z"}, 
{"P3m1", "P 3 m 1", "P 3 -2\"", "", 156, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"}, 
{"P4", "P 4", "P 4", "", 75, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"}, 
{"P4/m", "P 4/m", "-P 4", "", 83, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"}, 
{"P4/mbm", "P 4/m b m", "-P 4 2ab", "", 127, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z;0.5+Y,0.5+X,-Z;0.5-Y,0.5-X,-Z"}, 
{"P4/mcc", "P 4/m c c", "-P 4 2c", "", 124, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"P4/mmm", "P 4/m m m", "-P 4 2", "", 123, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P4/mnc", "P 4/m n c", "-P 4 2n", "", 128, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z;0.5+Y,0.5+X,0.5-Z;0.5-Y,0.5-X,0.5-Z"}, 
{"P4/n", "P 4/n", "-P 4a", "", 85, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z"}, 
{"P4/nbm", "P 4/n b m", "-P 4a 2b", "", 125, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z;+X,0.5-Y,-Z;0.5-X,+Y,-Z;+Y,+X,-Z;0.5-Y,0.5-X,-Z"}, 
{"P4/ncc", "P 4/n c c", "-P 4a 2ac", "", 130, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z;0.5+X,-Y,0.5-Z;-X,0.5+Y,0.5-Z;0.5+Y,0.5+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"P4/nmm", "P 4/n m m", "-P 4a 2a", "", 129, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z;0.5+X,-Y,-Z;-X,0.5+Y,-Z;0.5+Y,0.5+X,-Z;-Y,-X,-Z"}, 
{"P4/nnc", "P 4/n n c", "-P 4a 2bc", "", 126, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z;+X,0.5-Y,0.5-Z;0.5-X,+Y,0.5-Z;+Y,+X,0.5-Z;0.5-Y,0.5-X,0.5-Z"}, 
{"P41", "P 41", "P 4w", "", 76, -1, "-Y,+X,0.25+Z;-X,-Y,0.5+Z;+Y,-X,0.75+Z"}, 
{"P41212", "P 41 21 2", "P 4abw 2nw", "", 92, -1, "0.5-Y,0.5+X,0.25+Z;-X,-Y,0.5+Z;0.5+Y,0.5-X,0.75+Z;0.5+X,0.5-Y,0.75-Z;0.5-X,0.5+Y,0.25-Z;+Y,+X,-Z;-Y,-X,0.5-Z"}, 
{"P4122", "P 41 2 2", "P 4w 2c", "", 91, -1, "-Y,+X,0.25+Z;-X,-Y,0.5+Z;+Y,-X,0.75+Z;+X,-Y,0.5-Z;-X,+Y,-Z;+Y,+X,0.75-Z;-Y,-X,0.25-Z"}, 
{"P4132", "P 41 3 2", "P 4bd 2ab 3", "", 213, -1, "0.25-Y,0.75+X,0.25+Z;0.5-X,-Y,0.5+Z;0.25+Y,0.25-X,0.75+Z;0.25+X,0.25-Z,0.75+Y;0.5+X,0.5-Y,-Z;0.75+X,0.25+Z,0.25-Y;0.75+Z,0.25+Y,0.25-X;-X,0.5+Y,0.5-Z;0.25-Z,0.75+Y,0.25+X;+Z,+X,+Y;+Y,+Z,+X;0.5-Y,-Z,0.5+X;0.5+Z,0.5-X,-Y;-Y,0.5+Z,0.5-X;0.5-Z,-X,0.5+Y;-Z,0.5+X,0.5-Y;0.5+Y,0.5-Z,-X;0.75+Y,0.25+X,0.25-Z;0.75-Y,0.75-X,0.75-Z;0.25-X,0.75+Z,0.25+Y;0.75-X,0.75-Z,0.75-Y;0.25+Z,0.25-Y,0.75+X;0.75-Z,0.75-Y,0.75-X"}, 
{"P42", "P 42", "P 4c", "", 77, -1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z"}, 
{"P42/m", "P 42/m", "-P 4c", "", 84, 1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z"}, 
{"P42/mbc", "P 42/m b c", "-P 4c 2ab", "", 135, 1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z;0.5+Y,0.5+X,0.5-Z;0.5-Y,0.5-X,0.5-Z"}, 
{"P42/mcm", "P 42/m c m", "-P 4c 2c", "", 132, 1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P42/mmc", "P 42/m m c", "-P 4c 2", "", 131, 1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"P42/mnm", "P 42/m n m", "-P 4n 2n", "", 136, 1, "0.5-Y,0.5+X,0.5+Z;-X,-Y,+Z;0.5+Y,0.5-X,0.5+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P42/n", "P 42/n", "-P 4bc", "", 86, 1, "-Y,0.5+X,0.5+Z;0.5-X,0.5-Y,+Z;0.5+Y,-X,0.5+Z"}, 
{"P42/nbc", "P 42/n b c", "-P 4ac 2b", "", 133, 1, "0.5-Y,+X,0.5+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,0.5+Z;+X,0.5-Y,-Z;0.5-X,+Y,-Z;+Y,+X,0.5-Z;0.5-Y,0.5-X,0.5-Z"}, 
{"P42/ncm", "P 42/n c m", "-P 4ac 2ac", "", 138, 1, "0.5-Y,+X,0.5+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,0.5+Z;0.5+X,-Y,0.5-Z;-X,0.5+Y,0.5-Z;0.5+Y,0.5+X,-Z;-Y,-X,-Z"}, 
{"P42/nmc", "P 42/n m c", "-P 4ac 2a", "", 137, 1, "0.5-Y,+X,0.5+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,0.5+Z;0.5+X,-Y,-Z;-X,0.5+Y,-Z;0.5+Y,0.5+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"P42/nnm", "P 42/n n n", "-P 4ac 2bc", "", 134, 1, "0.5-Y,+X,0.5+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,0.5+Z;+X,0.5-Y,0.5-Z;0.5-X,+Y,0.5-Z;+Y,+X,-Z;0.5-Y,0.5-X,-Z"}, 
{"P4212", "P 42 1 2", "P 4ab 2ab", "", 90, -1, "0.5-Y,0.5+X,+Z;-X,-Y,+Z;0.5+Y,0.5-X,+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P422", "P 4 2 2", "P 4 2", "", 89, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P42212", "P 42 21 2", "P 4n 2n", "", 94, -1, "0.5-Y,0.5+X,0.5+Z;-X,-Y,+Z;0.5+Y,0.5-X,0.5+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z;+Y,+X,-Z;-Y,-X,-Z"}, 
{"P4222", "P 42 2 2", "P 4c 2", "", 93, -1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z"}, 
{"P4232", "P 42 3 2", "P 4n 2 3", "", 208, -1, "0.5-Y,0.5+X,0.5+Z;-X,-Y,+Z;0.5+Y,0.5-X,0.5+Z;0.5+X,0.5-Z,0.5+Y;+X,-Y,-Z;0.5+X,0.5+Z,0.5-Y;0.5+Z,0.5+Y,0.5-X;-X,+Y,-Z;0.5-Z,0.5+Y,0.5+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;0.5+Y,0.5+X,0.5-Z;0.5-Y,0.5-X,0.5-Z;0.5-X,0.5+Z,0.5+Y;0.5-X,0.5-Z,0.5-Y;0.5+Z,0.5-Y,0.5+X;0.5-Z,0.5-Y,0.5-X"}, 
{"P42bc", "P 42 b c", "P 4c -2ab", "", 106, -1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;0.5-X,0.5+Y,+Z;0.5+X,0.5-Y,+Z;0.5-Y,0.5-X,0.5+Z;0.5+Y,0.5+X,0.5+Z"}, 
{"P42cm", "P 42 c m", "P 4c -2c", "", 101, -1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"P42mc", "P 42 m c", "P 4c -2", "", 105, -1, "-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,0.5+Z;+Y,+X,0.5+Z"}, 
{"P42nm", "P 42 n m", "P 4n -2n", "", 102, -1, "0.5-Y,0.5+X,0.5+Z;-X,-Y,+Z;0.5+Y,0.5-X,0.5+Z;0.5-X,0.5+Y,0.5+Z;0.5+X,0.5-Y,0.5+Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"P43", "P 43", "P 4cw", "", 78, -1, "-Y,+X,0.75+Z;-X,-Y,0.5+Z;+Y,-X,0.25+Z"}, 
{"P432", "P 4 3 2", "P 4 2 3", "", 207, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"P43212", "P 43 21 2", "P 4nw 2abw", "", 96, -1, "0.5-Y,0.5+X,0.75+Z;-X,-Y,0.5+Z;0.5+Y,0.5-X,0.25+Z;0.5+X,0.5-Y,0.25-Z;0.5-X,0.5+Y,0.75-Z;+Y,+X,-Z;-Y,-X,0.5-Z"}, 
{"P4322", "P 43 2 2", "P 4cw 2c", "", 95, -1, "-Y,+X,0.75+Z;-X,-Y,0.5+Z;+Y,-X,0.25+Z;+X,-Y,0.5-Z;-X,+Y,-Z;+Y,+X,0.25-Z;-Y,-X,0.75-Z"}, 
{"P4332", "P 43 3 2", "P 4acd 2ab 3", "", 212, -1, "0.75-Y,0.25+X,0.75+Z;0.5-X,-Y,0.5+Z;0.75+Y,0.75-X,0.25+Z;0.75+X,0.75-Z,0.25+Y;0.5+X,0.5-Y,-Z;0.25+X,0.75+Z,0.75-Y;0.25+Z,0.75+Y,0.75-X;-X,0.5+Y,0.5-Z;0.75-Z,0.25+Y,0.75+X;+Z,+X,+Y;+Y,+Z,+X;0.5-Y,-Z,0.5+X;0.5+Z,0.5-X,-Y;-Y,0.5+Z,0.5-X;0.5-Z,-X,0.5+Y;-Z,0.5+X,0.5-Y;0.5+Y,0.5-Z,-X;0.25+Y,0.75+X,0.75-Z;0.25-Y,0.25-X,0.25-Z;0.75-X,0.25+Z,0.75+Y;0.25-X,0.25-Z,0.25-Y;0.75+Z,0.75-Y,0.25+X;0.25-Z,0.25-Y,0.25-X"}, 
{"P4bm", "P 4 b m", "P 4 -2ab", "", 100, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;0.5-X,0.5+Y,+Z;0.5+X,0.5-Y,+Z;0.5-Y,0.5-X,+Z;0.5+Y,0.5+X,+Z"}, 
{"P4cc", "P 4 c c", "P 4 -2c", "", 103, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z;-Y,-X,0.5+Z;+Y,+X,0.5+Z"}, 
{"P4mm", "P 4 m m", "P 4 -2", "", 99, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,+Z;+Y,+X,+Z"}, 
{"P4nc", "P 4 n c", "P 4 -2n", "", 104, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;0.5-X,0.5+Y,0.5+Z;0.5+X,0.5-Y,0.5+Z;0.5-Y,0.5-X,0.5+Z;0.5+Y,0.5+X,0.5+Z"}, 
{"P6", "P 6", "P 6", "", 168, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z"}, 
{"P6/m", "P 6/m", "-P 6", "", 175, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z"}, 
{"P6/mcc", "P 6/m c c", "-P 6 2c", "", 192, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,0.5-Z;-X,-X+Y,0.5-Z;+Y,+X,0.5-Z;-Y,-X,0.5-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.5-Z"}, 
{"P6/mmm", "P 6/m m m", "-P 6 2", "", 191, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"}, 
{"P61", "P 61", "P 61", "", 169, -1, "-Y+X,+X,0.167+Z;-Y,+X-Y,0.333+Z;-X,-Y,0.5+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.833+Z"}, 
{"P6122", "P 61 2 2", "P 61 2 (0 0 -1)", "", 178, -1, "-Y+X,+X,0.167+Z;-Y,+X-Y,0.333+Z;-X,-Y,0.5+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.833+Z;-Y+X,-Y,-Z;-X,-X+Y,0.667-Z;+Y,+X,0.333-Z;-Y,-X,0.833-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.167-Z"}, 
{"P62", "P 62", "P 62", "", 171, -1, "-Y+X,+X,0.333+Z;-Y,+X-Y,0.667+Z;-X,-Y,+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.667+Z"}, 
{"P622", "P 6 2 2", "P 6 2", "", 177, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"}, 
{"P6222", "P 62 2 2", "P 62 2c (0 0 1)", "", 180, -1, "-Y+X,+X,0.333+Z;-Y,+X-Y,0.667+Z;-X,-Y,+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.667+Z;-Y+X,-Y,-Z;-X,-X+Y,0.333-Z;+Y,+X,0.667-Z;-Y,-X,0.667-Z;+Y-X,+Y,-Z;+X,+X-Y,0.333-Z"}, 
{"P63", "P 63", "P 6c", "", 173, -1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z"}, 
{"P63/m", "P 63/m", "-P 6c", "", 176, 1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z"}, 
{"P63/mcm", "P 63/m c m", "-P 6c 2", "", 193, 1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z;-Y+X,-Y,0.5-Z;-X,-X+Y,0.5-Z;+Y,+X,0.5-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"}, 
{"P63/mmc", "P 63/m m c", "-P 6c 2c", "", 194, 1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,0.5-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.5-Z"}, 
{"P6322", "P 63 2 2", "P 6c 2c", "", 182, -1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,0.5-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.5-Z"}, 
{"P63cm", "P 63 c m", "P 6c -2", "", 185, -1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z;+Y-X,+Y,0.5+Z;+X,+X-Y,0.5+Z;-Y,-X,0.5+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"}, 
{"P63mc", "P 63 m c", "P 6c -2c", "", 186, -1, "-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z;+Y,+X,0.5+Z;-Y+X,-Y,0.5+Z;-X,-X+Y,0.5+Z"}, 
{"P64", "P 64", "P 64", "", 172, -1, "-Y+X,+X,0.667+Z;-Y,+X-Y,0.333+Z;-X,-Y,+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.333+Z"}, 
{"P6422", "P 64 2 2", "P 64 2c (0 0 -1)", "", 181, -1, "-Y+X,+X,0.667+Z;-Y,+X-Y,0.333+Z;-X,-Y,+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.333+Z;-Y+X,-Y,-Z;-X,-X+Y,0.667-Z;+Y,+X,0.333-Z;-Y,-X,0.333-Z;+Y-X,+Y,-Z;+X,+X-Y,0.667-Z"}, 
{"P65", "P 65", "P 65", "", 170, -1, "-Y+X,+X,0.833+Z;-Y,+X-Y,0.667+Z;-X,-Y,0.5+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.167+Z"}, 
{"P6522", "P 65 2 2", "P 65 2 (0 0 1)", "", 179, -1, "-Y+X,+X,0.833+Z;-Y,+X-Y,0.667+Z;-X,-Y,0.5+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.167+Z;-Y+X,-Y,-Z;-X,-X+Y,0.333-Z;+Y,+X,0.667-Z;-Y,-X,0.167-Z;+Y-X,+Y,0.5-Z;+X,+X-Y,0.833-Z"}, 
{"P6cc", "P 6 c c", "P 6 -2c", "", 184, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;+Y-X,+Y,0.5+Z;+X,+X-Y,0.5+Z;-Y,-X,0.5+Z;+Y,+X,0.5+Z;-Y+X,-Y,0.5+Z;-X,-X+Y,0.5+Z"}, 
{"P6mm", "P 6 m m", "P 6 -2", "", 183, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"}, 
{"Pa", "P 1 a 1", "P -2ya", "b3", 7, -1, "0.5+X,-Y,+Z"}, 
{"Pa-3", "P a -3", "-P 2ac 2ab 3", "", 205, 1, "+Z,+X,+Y;+Y,+Z,+X;0.5-Y,-Z,0.5+X;0.5+Z,0.5-X,-Y;-Y,0.5+Z,0.5-X;0.5-Z,-X,0.5+Y;-Z,0.5+X,0.5-Y;0.5+Y,0.5-Z,-X;0.5-X,-Y,0.5+Z;0.5+X,0.5-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Pb11", "P b 1 1", "P -2xb", "a1", 7, -1, "-X,0.5+Y,+Z"}, 
{"Pb21a", "P b 21 a", "P -2a -2ab", "a-cb", 29, -1, "-X,0.5+Y,-Z;0.5+X,+Y,-Z;0.5-X,0.5+Y,+Z"}, 
{"Pb21m", "P b 21 m", "P -2 -2b", "bca", 26, -1, "-X,0.5+Y,-Z;+X,+Y,-Z;-X,0.5+Y,+Z"}, 
{"Pb2b", "P b 2 b", "P -2b -2b", "bca", 27, -1, "-X,+Y,-Z;+X,0.5+Y,-Z;-X,0.5+Y,+Z"}, 
{"Pb2n", "P b 2 n", "P -2ab -2ab", "bca", 30, -1, "-X,+Y,-Z;0.5+X,0.5+Y,-Z;0.5-X,0.5+Y,+Z"}, 
{"Pba2", "P b a 2", "P 2 -2ab", "", 32, -1, "-X,-Y,+Z;0.5-X,0.5+Y,+Z;0.5+X,0.5-Y,+Z"}, 
{"Pbaa", "P b a a", "-P 2a 2b", "cab", 54, 1, "0.5-X,-Y,+Z;+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z"}, 
{"Pbab", "P b a b", "-P 2b 2ab", "a-cb", 54, 1, "-X,0.5-Y,+Z;0.5+X,0.5-Y,-Z;0.5-X,+Y,-Z"}, 
{"Pbam", "P b a m", "-P 2 2ab", "", 55, 1, "-X,-Y,+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,-Z"}, 
{"Pban", "P b a n", "-P 2ab 2b", "", 50, 1, "0.5-X,0.5-Y,+Z;+X,0.5-Y,-Z;0.5-X,+Y,-Z"}, 
{"Pbc21", "P b c 21", "P 2c -2b", "ba-c", 29, -1, "-X,-Y,0.5+Z;-X,0.5+Y,+Z;+X,0.5-Y,0.5+Z"}, 
{"Pbca", "P b c a", "-P 2ac 2ab", "", 61, 1, "0.5-X,-Y,0.5+Z;0.5+X,0.5-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Pbcb", "P b c b", "-P 2bc 2b", "bca", 54, 1, "-X,0.5-Y,0.5+Z;+X,0.5-Y,-Z;-X,+Y,0.5-Z"}, 
{"Pbcm", "P b c m", "-P 2c 2b", "", 57, 1, "-X,-Y,0.5+Z;+X,0.5-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Pbcn", "P b c n", "-P 2n 2ab", "", 60, 1, "0.5-X,0.5-Y,0.5+Z;0.5+X,0.5-Y,-Z;-X,+Y,0.5-Z"}, 
{"Pbm2", "P b m 2", "P 2 -2b", "ba-c", 28, -1, "-X,-Y,+Z;-X,0.5+Y,+Z;+X,0.5-Y,+Z"}, 
{"Pbma", "P b m a", "-P 2a 2ab", "bca", 57, 1, "0.5-X,-Y,+Z;0.5+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"Pbmb", "P b m b", "-P 2b 2b", "bca", 49, 1, "-X,0.5-Y,+Z;+X,0.5-Y,-Z;-X,+Y,-Z"}, 
{"Pbmm", "P b m m", "-P 2 2b", "cab", 51, 1, "-X,-Y,+Z;+X,0.5-Y,-Z;-X,0.5+Y,-Z"}, 
{"Pbmn", "P b m n", "-P 2ab 2ab", "cab", 53, 1, "0.5-X,0.5-Y,+Z;0.5+X,0.5-Y,-Z;-X,+Y,-Z"}, 
{"Pbn21", "P b n 21", "P 2c -2ab", "ba-c", 33, -1, "-X,-Y,0.5+Z;0.5-X,0.5+Y,+Z;0.5+X,0.5-Y,0.5+Z"}, 
{"Pbna", "P b n a", "-P 2ac 2b", "bca", 60, 1, "0.5-X,-Y,0.5+Z;+X,0.5-Y,-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pbnb", "P b n b", "-P 2bc 2ab", "bca", 56, 1, "-X,0.5-Y,0.5+Z;0.5+X,0.5-Y,-Z;0.5-X,+Y,0.5-Z"}, 
{"Pbnm", "P b n m", "-P 2c 2ab", "cab", 62, 1, "-X,-Y,0.5+Z;0.5+X,0.5-Y,-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pbnn", "P b n n", "-P 2n 2b", "cab", 52, 1, "0.5-X,0.5-Y,0.5+Z;+X,0.5-Y,-Z;0.5-X,+Y,0.5-Z"}, 
{"Pc", "P 1 c 1", "P -2yc", "b1", 7, -1, "+X,-Y,0.5+Z"}, 
{"Pc11", "P c 1 1", "P -2xc", "a3", 7, -1, "-X,+Y,0.5+Z"}, 
{"Pc21b", "P c 21 b", "P -2bc -2c", "bca", 29, -1, "-X,0.5+Y,-Z;+X,0.5+Y,0.5-Z;-X,+Y,0.5+Z"}, 
{"Pc21n", "P c 21 n", "P -2n -2ac", "bca", 33, -1, "-X,0.5+Y,-Z;0.5+X,0.5+Y,0.5-Z;0.5-X,+Y,0.5+Z"}, 
{"Pc2a", "P c 2 a", "P -2ac -2ac", "bca", 32, -1, "-X,+Y,-Z;0.5+X,+Y,0.5-Z;0.5-X,+Y,0.5+Z"}, 
{"Pc2m", "P c 2 m", "P -2c -2c", "bca", 28, -1, "-X,+Y,-Z;+X,+Y,0.5-Z;-X,+Y,0.5+Z"}, 
{"Pca21", "P c a 21", "P 2c -2ac", "", 29, -1, "-X,-Y,0.5+Z;0.5-X,+Y,0.5+Z;0.5+X,-Y,+Z"}, 
{"Pcaa", "P c a a", "-P 2ac 2c", "-cba", 54, 1, "0.5-X,-Y,0.5+Z;+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Pcab", "P c a b", "-P 2bc 2ac", "ba-c", 61, 1, "-X,0.5-Y,0.5+Z;0.5+X,-Y,0.5-Z;0.5-X,0.5+Y,-Z"}, 
{"Pcam", "P c a m", "-P 2c 2ac", "ba-c", 57, 1, "-X,-Y,0.5+Z;0.5+X,-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Pcan", "P c a n", "-P 2n 2c", "ba-c", 60, 1, "0.5-X,0.5-Y,0.5+Z;+X,-Y,0.5-Z;0.5-X,0.5+Y,-Z"}, 
{"Pcc2", "P c c 2", "P 2 -2c", "", 27, -1, "-X,-Y,+Z;-X,+Y,0.5+Z;+X,-Y,0.5+Z"}, 
{"Pcca", "P c c a", "-P 2a 2ac", "", 54, 1, "0.5-X,-Y,+Z;0.5+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Pccb", "P c c b", "-P 2b 2c", "ba-c", 54, 1, "-X,0.5-Y,+Z;+X,-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Pccm", "P c c m", "-P 2 2c", "", 49, 1, "-X,-Y,+Z;+X,-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Pccn", "P c c n", "-P 2ab 2ac", "", 56, 1, "0.5-X,0.5-Y,+Z;0.5+X,-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Pcm21", "P c m 21", "P 2c -2c", "ba-c", 26, -1, "-X,-Y,0.5+Z;-X,+Y,0.5+Z;+X,-Y,+Z"}, 
{"Pcma", "P c m a", "-P 2ac 2ac", "bca", 55, 1, "0.5-X,-Y,0.5+Z;0.5+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Pcmb", "P c m b", "-P 2bc 2c", "a-cb", 57, 1, "-X,0.5-Y,0.5+Z;+X,-Y,0.5-Z;-X,0.5+Y,-Z"}, 
{"Pcmm", "P c m m", "-P 2c 2c", "-cba", 51, 1, "-X,-Y,0.5+Z;+X,-Y,0.5-Z;-X,+Y,-Z"}, 
{"Pcmn", "P c m n", "-P 2n 2ac", "-cba", 62, 1, "0.5-X,0.5-Y,0.5+Z;0.5+X,-Y,0.5-Z;-X,0.5+Y,-Z"}, 
{"Pcn2", "P c n 2", "P 2 -2ac", "ba-c", 30, -1, "-X,-Y,+Z;0.5-X,+Y,0.5+Z;0.5+X,-Y,0.5+Z"}, 
{"Pcna", "P c n a", "-P 2a 2c", "bca", 50, 1, "0.5-X,-Y,+Z;+X,-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Pcnb", "P c n b", "-P 2b 2ac", "a-cb", 60, 1, "-X,0.5-Y,+Z;0.5+X,-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pcnm", "P c n m", "-P 2 2ac", "-cba", 53, 1, "-X,-Y,+Z;0.5+X,-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Pcnn", "P c n n", "-P 2ab 2c", "-cba", 52, 1, "0.5-X,0.5-Y,+Z;+X,-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pm", "P 1 m 1", "P -2y", "b", 6, -1, "+X,-Y,+Z"}, 
{"Pm-3", "P m -3 -P", "-P 2 2 3", "", 200, 1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Pm-3m", "P m -3 m", "-P 4 2 3", "", 221, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"}, 
{"Pm-3n", "P m -3 n", "-P 4n 2 3", "", 223, 1, "0.5-Y,0.5+X,0.5+Z;-X,-Y,+Z;0.5+Y,0.5-X,0.5+Z;0.5+X,0.5-Z,0.5+Y;+X,-Y,-Z;0.5+X,0.5+Z,0.5-Y;0.5+Z,0.5+Y,0.5-X;-X,+Y,-Z;0.5-Z,0.5+Y,0.5+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;0.5+Y,0.5+X,0.5-Z;0.5-Y,0.5-X,0.5-Z;0.5-X,0.5+Z,0.5+Y;0.5-X,0.5-Z,0.5-Y;0.5+Z,0.5-Y,0.5+X;0.5-Z,0.5-Y,0.5-X"}, 
{"Pm11", "P m 1 1", "P -2x", "a", 6, -1, "-X,+Y,+Z"}, 
{"Pm21b", "P m 21 b", "P -2b -2", "a-cb", 26, -1, "-X,0.5+Y,-Z;+X,0.5+Y,-Z;-X,+Y,+Z"}, 
{"Pm21n", "P m 21 n", "P -2ab -2", "a-cb", 31, -1, "0.5-X,0.5+Y,-Z;0.5+X,0.5+Y,-Z;-X,+Y,+Z"}, 
{"Pm2a", "P m 2 a", "P -2a -2a", "a-cb", 28, -1, "-X,+Y,-Z;0.5+X,+Y,-Z;0.5-X,+Y,+Z"}, 
{"Pm2m", "P m 2 m", "P -2 -2", "bca", 25, -1, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"}, 
{"Pma2", "P m a 2", "P 2 -2a", "", 28, -1, "-X,-Y,+Z;0.5-X,+Y,+Z;0.5+X,-Y,+Z"}, 
{"Pmaa", "P m a a", "-P 2a 2", "cab", 49, 1, "0.5-X,-Y,+Z;+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Pmab", "P m a b", "-P 2b 2a", "-cba", 57, 1, "-X,0.5-Y,+Z;0.5+X,-Y,-Z;0.5-X,0.5+Y,-Z"}, 
{"Pmam", "P m a m", "-P 2 2a", "a-cb", 51, 1, "-X,-Y,+Z;0.5+X,-Y,-Z;0.5-X,+Y,-Z"}, 
{"Pman", "P m a n", "-P 2ab 2", "a-cb", 53, 1, "0.5-X,0.5-Y,+Z;+X,-Y,-Z;0.5-X,0.5+Y,-Z"}, 
{"Pmc21", "P m c 21", "P 2c -2", "", 26, -1, "-X,-Y,0.5+Z;-X,+Y,+Z;+X,-Y,0.5+Z"}, 
{"Pmca", "P m c a", "-P 2ac 2a", "cab", 57, 1, "0.5-X,-Y,0.5+Z;0.5+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"Pmcb", "P m c b", "-P 2bc 2", "cab", 55, 1, "-X,0.5-Y,0.5+Z;+X,-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Pmcm", "P m c m", "-P 2c 2", "bca", 51, 1, "-X,-Y,0.5+Z;+X,-Y,-Z;-X,+Y,0.5-Z"}, 
{"Pmcn", "P m c n", "-P 2n 2a", "bca", 62, 1, "0.5-X,0.5-Y,0.5+Z;0.5+X,-Y,-Z;-X,0.5+Y,0.5-Z"}, 
{"Pmm2", "P m m 2", "P 2 -2", "", 25, -1, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"}, 
{"Pmma", "P m m a", "-P 2a 2a", "", 51, 1, "0.5-X,-Y,+Z;0.5+X,-Y,-Z;-X,+Y,-Z"}, 
{"Pmmb", "P m m b", "-P 2b 2", "ba-c", 51, 1, "-X,0.5-Y,+Z;+X,-Y,-Z;-X,0.5+Y,-Z"}, 
{"Pmmm", "P m m m", "-P 2 2", "", 47, 1, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"}, 
{"Pmmn", "P m m n", "-P 2ab 2a", "", 59, 1, "0.5-X,0.5-Y,+Z;0.5+X,-Y,-Z;-X,0.5+Y,-Z"}, 
{"Pmn21", "P m n 21", "P 2ac -2", "", 31, -1, "0.5-X,-Y,0.5+Z;-X,+Y,+Z;0.5+X,-Y,0.5+Z"}, 
{"Pmna", "P m n a", "-P 2ac 2", "", 53, 1, "0.5-X,-Y,0.5+Z;+X,-Y,-Z;0.5-X,+Y,0.5-Z"}, 
{"Pmnb", "P m n b", "-P 2bc 2a", "ba-c", 62, 1, "-X,0.5-Y,0.5+Z;0.5+X,-Y,-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pmnm", "P m n m", "-P 2c 2a", "bca", 59, 1, "-X,-Y,0.5+Z;0.5+X,-Y,-Z;0.5-X,+Y,0.5-Z"}, 
{"Pmnn", "P m n n", "-P 2n 2", "cab", 58, 1, "0.5-X,0.5-Y,0.5+Z;+X,-Y,-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pn", "P 1 n 1", "P -2yac", "b2", 7, -1, "0.5+X,-Y,0.5+Z"}, 
{"Pn-3", "P n -3", "-P 2ab 2bc 3", "", 201, 1, "+Z,+X,+Y;+Y,+Z,+X;0.5-Y,0.5-Z,+X;+Z,0.5-X,0.5-Y;0.5-Y,+Z,0.5-X;0.5-Z,0.5-X,+Y;0.5-Z,+X,0.5-Y;+Y,0.5-Z,0.5-X;0.5-X,0.5-Y,+Z;+X,0.5-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Pn-3m", "P n -3 m", "-P 4bc 2bc 3", "", 224, 1, "-Y,0.5+X,0.5+Z;0.5-X,0.5-Y,+Z;0.5+Y,-X,0.5+Z;0.5+X,-Z,0.5+Y;+X,0.5-Y,0.5-Z;0.5+X,0.5+Z,-Y;0.5+Z,0.5+Y,-X;0.5-X,+Y,0.5-Z;-Z,0.5+Y,0.5+X;+Z,+X,+Y;+Y,+Z,+X;0.5-Y,0.5-Z,+X;+Z,0.5-X,0.5-Y;0.5-Y,+Z,0.5-X;0.5-Z,0.5-X,+Y;0.5-Z,+X,0.5-Y;+Y,0.5-Z,0.5-X;0.5+Y,0.5+X,-Z;-Y,-X,-Z;-X,0.5+Z,0.5+Y;-X,-Z,-Y;0.5+Z,-Y,0.5+X;-Z,-Y,-X"}, 
{"Pn-3n", "P n -3 n", "-P 4a 2bc 3", "", 222, 1, "0.5-Y,+X,+Z;0.5-X,0.5-Y,+Z;+Y,0.5-X,+Z;+X,0.5-Z,+Y;+X,0.5-Y,0.5-Z;+X,+Z,0.5-Y;+Z,+Y,0.5-X;0.5-X,+Y,0.5-Z;0.5-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;0.5-Y,0.5-Z,+X;+Z,0.5-X,0.5-Y;0.5-Y,+Z,0.5-X;0.5-Z,0.5-X,+Y;0.5-Z,+X,0.5-Y;+Y,0.5-Z,0.5-X;+Y,+X,0.5-Z;0.5-Y,0.5-X,0.5-Z;0.5-X,+Z,+Y;0.5-X,0.5-Z,0.5-Y;+Z,0.5-Y,+X;0.5-Z,0.5-Y,0.5-X"}, 
{"Pn11", "P n 1 1", "P -2xbc", "a2", 7, -1, "-X,0.5+Y,0.5+Z"}, 
{"Pn21a", "P n 21 a", "P -2ac -2n", "a-cb", 33, -1, "-X,0.5+Y,-Z;0.5+X,+Y,0.5-Z;0.5-X,0.5+Y,0.5+Z"}, 
{"Pn21m", "P n 21 m", "P -2 -2bc", "bca", 31, -1, "-X,0.5+Y,0.5-Z;+X,+Y,-Z;-X,0.5+Y,0.5+Z"}, 
{"Pn2b", "P n 2 b", "P -2bc -2bc", "a-cb", 30, -1, "-X,+Y,-Z;+X,0.5+Y,0.5-Z;-X,0.5+Y,0.5+Z"}, 
{"Pn2n", "P n 2 n", "P -2n -2n", "bca", 34, -1, "-X,+Y,-Z;0.5+X,0.5+Y,0.5-Z;0.5-X,0.5+Y,0.5+Z"}, 
{"Pna21", "P n a 21", "P 2c -2n", "", 33, -1, "-X,-Y,0.5+Z;0.5-X,0.5+Y,0.5+Z;0.5+X,0.5-Y,+Z"}, 
{"Pnaa", "P n a a", "-P 2ac 2bc", "cab", 56, 1, "0.5-X,-Y,0.5+Z;+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,-Z"}, 
{"Pnab", "P n a b", "-P 2bc 2n", "-cba", 60, 1, "-X,0.5-Y,0.5+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Pnam", "P n a m", "-P 2c 2n", "a-cb", 62, 1, "-X,-Y,0.5+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,-Z"}, 
{"Pnan", "P n a n", "-P 2n 2bc", "a-cb", 52, 1, "0.5-X,0.5-Y,0.5+Z;+X,0.5-Y,0.5-Z;0.5-X,+Y,-Z"}, 
{"Pnc2", "P n c 2", "P 2 -2bc", "", 30, -1, "-X,-Y,+Z;-X,0.5+Y,0.5+Z;+X,0.5-Y,0.5+Z"}, 
{"Pnca", "P n c a", "-P 2a 2n", "cab", 60, 1, "0.5-X,-Y,+Z;0.5+X,0.5-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Pncb", "P n c b", "-P 2b 2bc", "cab", 50, 1, "-X,0.5-Y,+Z;+X,0.5-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Pncm", "P n c m", "-P 2 2bc", "bca", 53, 1, "-X,-Y,+Z;+X,0.5-Y,0.5-Z;-X,0.5+Y,0.5-Z"}, 
{"Pncn", "P n c n", "-P 2ab 2n", "bca", 52, 1, "0.5-X,0.5-Y,+Z;0.5+X,0.5-Y,0.5-Z;-X,+Y,0.5-Z"}, 
{"Pnm21", "P n m 21", "P 2bc -2bc", "ba-c", 31, -1, "-X,0.5-Y,0.5+Z;-X,0.5+Y,0.5+Z;+X,-Y,+Z"}, 
{"Pnma", "P n m a", "-P 2ac 2n", "", 62, 1, "0.5-X,-Y,0.5+Z;0.5+X,0.5-Y,0.5-Z;-X,0.5+Y,-Z"}, 
{"Pnmb", "P n m b", "-P 2bc 2bc", "ba-c", 53, 1, "-X,0.5-Y,0.5+Z;+X,0.5-Y,0.5-Z;-X,+Y,-Z"}, 
{"Pnmm", "P n m m", "-P 2c 2bc", "cab", 59, 1, "-X,-Y,0.5+Z;+X,0.5-Y,0.5-Z;-X,0.5+Y,-Z"}, 
{"Pnmn", "P n m n", "-P 2n 2n", "bca", 58, 1, "0.5-X,0.5-Y,0.5+Z;0.5+X,0.5-Y,0.5-Z;-X,+Y,-Z"}, 
{"Pnn2", "P n n 2", "P 2 -2n", "", 34, -1, "-X,-Y,+Z;0.5-X,0.5+Y,0.5+Z;0.5+X,0.5-Y,0.5+Z"}, 
{"Pnna", "P n n a", "-P 2a 2bc", "", 52, 1, "0.5-X,-Y,+Z;+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pnnb", "P n n b", "-P 2b 2n", "ba-c", 52, 1, "-X,0.5-Y,+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"Pnnm", "P n n m", "-P 2 2n", "", 58, 1, "-X,-Y,+Z;0.5+X,0.5-Y,0.5-Z;0.5-X,0.5+Y,0.5-Z"}, 
{"Pnnn", "P n n n", "-P 2ab 2bc", "", 48, 1, "0.5-X,0.5-Y,+Z;+X,0.5-Y,0.5-Z;0.5-X,+Y,0.5-Z"}, 
{"R-3", "R -3", "-R 3", "H", 148, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z"}, 
{"R-3:r", "R -3", "-P 3*", "R", 148, 1, "+Z,+X,+Y;+Y,+Z,+X"}, 
{"R-3c", "R -3 c", "-R 3 2\"c", "H", 167, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,0.5-Z;-X,-X+Y,0.5-Z;+Y,+X,0.5-Z"}, 
{"R-3c:r", "R -3 c", "-P 3* 2n", "R", 167, 1, "+Z,+X,+Y;+Y,+Z,+X;0.5-Y,0.5-X,0.5-Z;0.5-X,0.5-Z,0.5-Y;0.5-Z,0.5-Y,0.5-X"}, 
{"R-3m", "R -3 m", "-R 3 2\"", "H", 166, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"}, 
{"R-3m:r", "R -3 m", "-P 3* 2", "R", 166, 1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-X,-Z;-X,-Z,-Y;-Z,-Y,-X"}, 
{"R3", "R 3", "R 3", "H", 146, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z"}, 
{"R32", "R 32", "R 3 2\"", "H", 155, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"}, 
{"R32:r", "R 32", "P 3* 2", "R", 155, -1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-X,-Z;-X,-Z,-Y;-Z,-Y,-X"}, 
{"R3:r", "R 3", "P 3*", "R", 146, -1, "+Z,+X,+Y;+Y,+Z,+X"}, 
{"R3c", "R 3 c", "R 3 -2\"c", "H", 161, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,0.5+Z;+X,+X-Y,0.5+Z;-Y,-X,0.5+Z"}, 
{"R3c:r", "R 3 c", "P 3* -2n", "R", 161, -1, "+Z,+X,+Y;+Y,+Z,+X;0.5+Y,0.5+X,0.5+Z;0.5+X,0.5+Z,0.5+Y;0.5+Z,0.5+Y,0.5+X"}, 
{"R3m", "R 3 m", "R 3 -2\"", "H", 160, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"}, 
{"R3m:r", "R 3 m", "P 3* -2", "R", 160, -1, "+Z,+X,+Y;+Y,+Z,+X;+Y,+X,+Z;+X,+Z,+Y;+Z,+Y,+X"}};
///////////////////////////////////////////////////////////////////////////////////////////////////

TCLattice::TCLattice(int latt)  {
  this->Latt = latt;
  switch( abs(Latt) )  {
   case 1:
    Name = "Primitive";
    Symbol = "P";
    break;
   case 2:      // Body Centered (I)
    Name = "Body Centered";
    Symbol = "I";
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0.5);
    break;
   case 3:      // R Centered
    Name = "R Centered";
    Symbol = "R";
    Vectors.AddNew<double,double,double>(2./3., 1./3., 1./3.);
    Vectors.AddNew<double,double,double>(1./3., 2./3., 2./3.);
    break;
   case 4:      // Face Centered (F)
    Name = "Face Centered";
    Symbol = "F";
    Vectors.AddNew<double,double,double>(0, 0.5, 0.5);
    Vectors.AddNew<double,double,double>(0.5, 0, 0.5);
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0);
    break;
   case 5:      // A Centered (A)
    Name = "A Centered";
    Symbol = "A";
    Vectors.AddNew<double,double,double>(0, 0.5, 0.5);
    break;
   case 6:      // B Centered (B)
    Name = "B Centered";
    Symbol = "B";
    Vectors.AddNew<double,double,double>(0.5, 0, 0.5);
    break;
   case 7:      // C Centered (C);
    Name = "C Centered";
    Symbol = "C";
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0);
    break;
   default:
    throw new TIncorrectLattExc(__OlxSourceInfo, Latt);
  }
}
//..............................................................................
//..............................................................................
TSpaceGroup::TSpaceGroup(const olxstr& Name, const olxstr& FullName, const olxstr HallSymbol, 
                         const olxstr& Axis, int Number, TCLattice& Latt, bool Centrosymmetric)  {
  this->Name = Name;
  this->FullName = FullName;
  this->HallSymbol = HallSymbol;
  this->Axis = Axis;
  this->Number = Number;
  this->Latt = &Latt;
  this->CentroSymmetric = Centrosymmetric;
  BravaisLattice = NULL;
  LaueClass = NULL;
  PointGroup = NULL;
  Translations = false;
}
//..............................................................................
void TSpaceGroup::AddMatrix(const smatd& m)   {
  Matrices.AddCCopy(m);
  if( !Translations )  {
    if( m.t[0] != 0 || m.t[1] != 0 || m.t[2] != 0 )
      Translations = true;
  }
}
//..............................................................................
void TSpaceGroup::AddMatrix(int xx, int xy, int xz, 
                 int yx, int yy, int yz, 
                 int zx, int zy, int zz,
                 double tx, double ty, double tz)  {
  smatd& m = Matrices.AddNew();
  m.r[0][0] = xx;  m.r[0][1] = xy;  m.r[0][2] = xz;  m.t[0] = tx;
  m.r[1][0] = yx;  m.r[1][1] = yy;  m.r[1][2] = yz;  m.t[1] = ty;
  m.r[2][0] = zx;  m.r[2][1] = zy;  m.r[2][2] = zz;  m.t[2] = tz;
  if( !Translations )  {
    if( tx != 0 || ty != 0 || tz != 0 )
      Translations = true;
  }
}
//..............................................................................
bool TSpaceGroup::ContainsElement(TSymmElement* symme)  {
  if( MatrixCount() != symme->MatrixCount() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( !equal )  continue;
      m1.SetRawId(1);
      found = true;
      break;
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::ContainsGroup(TSpaceGroup* symme)  {
  if( MatrixCount() != symme->MatrixCount() )  return false;
  if( IsCentrosymmetric() != symme->IsCentrosymmetric() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( !equal )  continue;
      m1.SetRawId(1);
      found = true;
      break;
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::ContainsElement( const smatd_list& matrices, TSymmElement* symme) {
  if( matrices.Count() < symme->MatrixCount() )  return false;
  for( size_t i=0; i  < matrices.Count(); i++ )
    matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    const smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < matrices.Count(); j++ )  {
      smatd& m1 = matrices[j];
      if( m1.GetId() != 0 )  continue;
      if( !(m.r == m1.r) )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        // check only if the necessary translations do exist
        if( m.t[k] == 0 )  continue;
        double diff = m.t[k] - m1.t[k];
        double summ = m.t[k] + m1.t[k];
        int iv = (int)diff;  diff -= iv;
        iv = (int)summ;      summ -= iv;
        if( olx_abs(diff) < 0.01 || olx_abs(diff) > 0.99 )  diff = 0;
        if( olx_abs(summ) < 0.01 || olx_abs(summ) > 0.99 )  summ = 0;
        if( diff < 0 )  diff += 1;
        if( summ < 0 )  summ += 1;
        if( diff > 0.01 && summ > 0.01 )  {
          equal = false;
          break;
        }
      }
      if( equal )  {
        found = true;
        m1.SetRawId(1);
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::IsSubElement( TSpaceGroup* symme )  const  {
  if( MatrixCount() < symme->MatrixCount() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      size_t matrixElements = 0;
      size_t signChanges = 0;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m1.r[k][l] != 0 )  matrixElements++;
          if( m.r[k][l] != m1.r[k][l] )  {
            if( olx_abs(m.r[k][l]) != olx_abs(m1.r[k][l]) )  {
              equal = false;
              break;
            }
            else  signChanges++;
          }
        }
        if( !equal )  break;
      }
      // have to consider sign change only for centrisymmetric groups
      if( IsCentrosymmetric() )  {
        if( !equal || ( (signChanges != matrixElements) && (signChanges != 0)) )  continue;
      }
      else  {
        if( !equal || (signChanges != 0) )  continue;
      }
      equal = true;
      for( size_t k=0; k < 3; k++ )  {
        // check only if the necessary translations do exist
        if( m.t[k] == 0 )  continue;
        double diff = m.t[k] - m1.t[k];
        int iv = (int)diff;  diff -= iv;
        if( olx_abs(diff) < 0.01 || olx_abs(diff) > 0.99 )  diff = 0;
        if( diff < 0 )  diff += 1;
        if( diff > 0.01 )  {
          equal = false;
          break;
        }
      }
      if( equal )  {
        found = true;
        m1.SetRawId(1);
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
void TSpaceGroup::SplitIntoElements(TPtrList<TSymmElement>& ref, TPtrList<TSymmElement>& sgElm) {
  smatd_list mat;
  GetMatrices(mat, mattAll^mattIdentity);
  SplitIntoElements(mat, ref, sgElm);
}
void TSpaceGroup::SplitIntoElements(smatd_list& mat, TPtrList<TSymmElement>& ref, TPtrList<TSymmElement>& sgElm) {
  for( size_t i=0; i < mat.Count(); i++ )
    mat[i].SetRawId(0);
  for( size_t i=0; i < ref.Count(); i++ )  {
    ref[i]->SetTag(0);
    if( mat.Count() < ref[i]->MatrixCount() )  continue;
    bool elm_found = true;
    for( size_t j=0; j < ref[i]->MatrixCount(); j++ )  {
      bool found = false;
      const smatd& m = ref[i]->GetMatrix(j);
      for( size_t k=0; k < mat.Count(); k++ )  {
        smatd& m1 = mat[k];
        if( !(m.r == m1.r) )  continue;
        bool equal = true;
        for( size_t l=0; l < 3; l++ )  {
          if( m.t[l] == 0 )  continue;
          double diff = m.t[l] - m1.t[l];
          double summ = m.t[l] + m1.t[l];
          int iv = (int)diff;  diff -= iv;
          iv = (int)summ;      summ -= iv;
          if( olx_abs(diff) < 0.01 || olx_abs(diff) > 0.99 )  diff = 0;
          if( olx_abs(summ) < 0.01 || olx_abs(summ) > 0.99 )  summ = 0;
          if( diff < 0 )  diff += 1;
          if( summ < 0 )  summ += 1;
          if( diff > 0.01 && summ > 0.01 )  {
            equal = false;
            break;
          }
        }
        if( equal )  {
          found = true;
          break;
        }
      }
      if( !found )  {
        elm_found = false;
        break;
      }
    }
    if( elm_found )  {
      sgElm.Add( ref[i] );
      ref[i]->SetTag(1);
    }
  }
  // analyse the result
  for( size_t i=0; i < sgElm.Count(); i++ )  {
    if( sgElm[i]->GetSuperElement() != NULL && sgElm[i]->GetSuperElement()->GetTag() == 1 )
      sgElm[i] = NULL;
  }
  sgElm.Pack();
}
//..............................................................................
bool TSpaceGroup::EqualsWithoutTranslation (const TSpaceGroup& sg) const  {
  if( MatrixCount() != sg.MatrixCount() )  return false;
  const size_t mc = MatrixCount();
  for( size_t i=0; i  < mc; i++ )
    Matrices[i].SetRawId(0);

  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    smatd& m = sg.GetMatrix(i);
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      size_t signChanges = 0;
      size_t matrixElements = 0;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m1.r[k][l] != 0 )  matrixElements++;
          if( m.r[k][l] != m1.r[k][l] )  {
            if( olx_abs(m.r[k][l]) != olx_abs(m1.r[k][l]) )  {
              equal = false;
              break;
            }
            else  signChanges++;
          }
        }
        if( !equal )  break;
      }

      // have to consider sign change only for centrisymmetric groups
      if( !equal || ( (signChanges != matrixElements) && (signChanges != 0)) )  continue;
      found = true;
      m1.SetRawId(1);
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::Compare(const smatd_list& matrices, double& st) const  {
  size_t mc = (MatrixCount()+1+Latt->VectorCount());
  if( IsCentrosymmetric() )  mc *= 2;
  if( mc != matrices.Count() )  return false;
  smatd_list tm;
  tm.SetCapacity(mc);
  this->GetMatrices(tm, mattAll);
  vec3d translation;
  for( size_t i=0; i  < mc; i++ )  // mark matrices as unused
    tm[i].SetRawId(0);
  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    const smatd& m = matrices[i];
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = tm[j];
      if( m1.GetId() == 1 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( equal )  {
        found = true;
        m1.SetRawId(1);
        for( size_t k=0; k < 3; k++ )  {
          translation[k] = m.t[k] - m1.t[k];
          int iv = (int)translation[k];  translation[k] -= iv;
          if( olx_abs(translation[k]) < 0.01 || olx_abs(translation[k]) >= 0.99 )
            translation[k] = 0;
        }
        st += translation.QLength();
        break;  
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::operator == (const smatd_list& matrices) const  {
  size_t mc = (MatrixCount()+1+Latt->VectorCount());
  if( IsCentrosymmetric() )  mc *= 2;
  if( mc != matrices.Count() )  return false;
  smatd_list tm;
  tm.SetCapacity(mc);
  this->GetMatrices(tm, mattAll);
  vec3d translation;
  for( size_t i=0; i  < mc; i++ )  // mark matrices as unused
    tm[i].SetRawId(0);
  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    const smatd& m = matrices[i];
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = tm[j];
      if( m1.GetId() == 1 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( equal )  {
        for( size_t k=0; k < 3; k++ )  {
          translation[k] = m.t[k] - m1.t[k];
          int iv = (int)translation[k];  translation[k] -= iv;
          if( olx_abs(translation[k]) < 0.01 || olx_abs(translation[k]) >= 0.99 )
            translation[k] = 0;
        }
        if( translation.QLength() < 0.004 )  {
          found = true;
          m1.SetRawId(1);
        }
        break;  
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::operator == (const TAsymmUnit& AU) const {
  if( Latt->GetLatt() != abs(AU.GetLatt()) )  return false;
  if( CentroSymmetric && (AU.GetLatt() < 0) )  return false;
  if( (!CentroSymmetric) && (AU.GetLatt() > 0) )  return false;
  if( MatrixCount() != AU.MatrixCount() )  return false;

  const size_t mc = MatrixCount();
  for( size_t i=0; i  < mc; i++ )
    Matrices[i].SetRawId(0);

  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    const smatd& m = AU.GetMatrix(i);
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      size_t matrixElements = 0;
      size_t signChanges = 0;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m1.r[k][l] != 0 )  matrixElements++;
          if( m.r[k][l] != m1.r[k][l] )  {
            if( olx_abs(m.r[k][l]) != olx_abs(m1.r[k][l]) )  {
              equal = false;
              break;
            }
            else
              signChanges++;
          }
        }
        if( !equal )  break;
      }

      // have to consider sign change only for centrisymmetric groups
      if( IsCentrosymmetric() )  {
        if( !equal || ( (signChanges != matrixElements) && (signChanges != 0)) )  continue;
      }
      else  {
        if( !equal || (signChanges != 0) )  continue;
      }
      vec3d translation;
      for( size_t k=0; k < 3; k++ )  {
        translation[k] = m.t[k] - m1.t[k];
        int iv = (int)translation[k];  translation[k] -= iv;
        if( olx_abs(translation[k]) < 0.01 || olx_abs(translation[k]) >= 0.99 )
          translation[k] = 0;
        if( translation[k] < 0 )
          translation[k] += 1;
      }
      if( translation.Length() < 0.02 )  {  found = true;  break;  }
      for( size_t k=0; k < Latt->VectorCount(); k++ )  {
        if( translation.DistanceTo(Latt->GetVector(k)) < 0.02 )
        {  found = true;  break;  }
      }
      if( found )  {  m1.SetRawId(1);  break;  }
      if( CentroSymmetric )  {
        equal = true;
        for( size_t k=0; k < 3; k++ )  {
          for( size_t l=0; l < 3; l++ )
            if( m.r[k][l] != -m1.r[k][l] )  {  equal = false;  break;  }
          if( !equal )  break;
        }
        if( !equal )  continue;
        for( size_t k=0; k < 3; k++ )  {
          translation[k] = m.t[k] - m1.t[k];
          int iv = (int)translation[k];  translation[k] -= iv;
          if( olx_abs(translation[k]) < 0.01 || olx_abs(translation[k]) >= 0.99 )
            translation[k] = 0;
          if( translation[k] < 0 )
            translation[k] += 1;
        }
        if( translation.Length() < 0.02 )  {  found = true;  break;  }
        for( size_t k=0; k < Latt->VectorCount(); k++ )  {
          if( translation.DistanceTo(Latt->GetVector(k)) < 0.02 )
          {  found = true;  break;  }
        }
        if( found )  {  m1.SetRawId(1);  break;  }
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::EqualsExpandedSG(const TAsymmUnit& AU) const  {
  if( MatrixCount() > AU.MatrixCount() )  return false;
  smatd_list allMatrices;
  GetMatrices(allMatrices, mattAll );
  if( allMatrices.Count() != AU.MatrixCount() )  return false;
  for( size_t i=0; i  < allMatrices.Count(); i++ )
    allMatrices[i].SetRawId(0);

  for( size_t i=0; i  < allMatrices.Count(); i++ )  {
    bool found = false;
    const smatd& m = AU.GetMatrix(i);
    for( size_t j=0; j  < allMatrices.Count(); j++ )  {
      smatd& m1 = allMatrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( !equal )  continue;
      vec3d translation;
      for( size_t k=0; k < 3; k++ )  {
        translation[k] = m.t[k] - m1.t[k];
        int iv = (int)translation[k];  translation[k] -= iv;
        if( olx_abs(translation[k]) < 0.01 || olx_abs(translation[k]) >= 0.99 )
          translation[k] = 0;
        if( translation[k] < 0 )
          translation[k] += 1;
      }
      if( translation.Length() < 0.01 )  found = true;
      if( found )  {  m1.SetRawId(1);  break;  }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
size_t TSpaceGroup::GetUniqMatrices(smatd_list& matrices, short Flags) const  {
  smatd_list allm;
  size_t c = 0;
  GetMatrices( allm, Flags );
  for( size_t i=0; i < allm.Count(); i++ )  {
    if( matrices.IndexOf( allm[i] ) == InvalidIndex )  {
      matrices.AddCCopy( allm[i] );
      c++;
    }
  }
  return c;
}
//..............................................................................
void TSpaceGroup::GetMatrices(smatd_list& matrices, short Flags) const {
  for( size_t i=0; i <= MatrixCount(); i++ )  {
    smatd* m = NULL;
    if( i == 0 )  {
      if( (Flags & mattIdentity) == mattIdentity )
        (m = new smatd)->r.I();
    }
    else  {
      if( (Flags & mattTranslation) == mattTranslation && (Flags & mattCentering) == 0 )  {
        const smatd& mt = Matrices[i-1];
        if( !mt.t.IsNull() )  continue;
          m = new smatd( mt );
      }
      else
        m = new smatd(Matrices[i-1]);
    }
    if( m == NULL )  continue;
    matrices.Add(*m);
    if( (Flags & mattCentering) == mattCentering )  {
      for( size_t j=0; j < Latt->VectorCount(); j++ )  {
        vec3d& v = Latt->GetVector(j);
        if( (Flags & mattTranslation) == 0 )  {
          const smatd& mt = Matrices[i-1];
          double dv = mt.t[0] - v[0];
          int iv = (int)dv;  dv -= iv;
          if( olx_abs(dv) < 0.01 || olx_abs(dv) > 0.99 )  dv = 0;
          if( dv != 0 )  continue;
          dv = mt.t[1] - v[1];
          iv = (int)dv;    dv -= iv;
          if( olx_abs(dv) < 0.01 || olx_abs(dv) > 0.99 )  dv = 0;
          if( dv != 0 )  continue;
          dv = mt.t[2] - v[2];
          iv = (int)dv;     dv -= iv;
          if( olx_abs(dv) < 0.01 || olx_abs(dv) > 0.99 )  dv = 0;
          if( dv != 0 )  continue;
        }
        smatd* m1 = new smatd(*m);

        m1->t[0] += v[0];
        int iv = (int)m1->t[0];
        m1->t[0] -= iv;
        if( m1->t[0] < 0 )  m1->t[0] += 1;

        m1->t[1] += v[1];
        iv = (int)m1->t[1];
        m1->t[1] -= iv;
        if( m1->t[1] < 0 )  m1->t[1] += 1;

        m1->t[2] += v[2];
        iv = (int)m1->t[2];
        m1->t[2] -= iv;
        if( m1->t[2] < 0 )  m1->t[2] += 1;
        matrices.Add(*m1);
      }
    }
  }
  if( CentroSymmetric && ((Flags & mattInversion) == mattInversion) )  {
    for( size_t i=0; i < matrices.Count(); i++ )
      matrices.Insert(++i, new smatd(matrices[i])).r *= -1;
    if( (Flags & mattIdentity) != mattIdentity )
      matrices.Insert(0, new smatd).r.I() *= -1;
  }
}
//..............................................................................
//..............................................................................
//..............................................................................
size_t TBravaisLattice::FindSpaceGroups(TPtrList<TSpaceGroup>& SpaceGroups) const  {
  size_t rc = 0;
  for( size_t i=0; i < TSymmLib::GetInstance()->SGCount(); i++ )  {
    if( &TSymmLib::GetInstance()->GetGroup(i).GetBravaisLattice() == this )  {
      rc++;
      SpaceGroups.Add( &TSymmLib::GetInstance()->GetGroup(i) );
    }
  }
  return rc;
}
//..............................................................................
//..............................................................................
//..............................................................................
TSymmElement::TSymmElement(const olxstr& name, TSpaceGroup* sg)  {
  sg->GetMatrices(Matrices, mattAll^mattIdentity);
  Name = name;
  SuperElement = NULL;
}
//..............................................................................
//..............................................................................
//..............................................................................
TSymmLib::TSymmLib(const olxstr& FN)  {
  if( Instance != NULL )
    throw TFunctionFailedException(__OlxSourceInfo, "An instance of the library is already created");

  for( int i=1; i < 8; i++ )  {
    TCLattice* CL = new TCLattice(i);
    Lattices.Add(CL->GetSymbol(), CL);
  }
//TDataFile DF;
//  DF.LoadFromXLFile(FN, NULL);
//  TSpaceGroup *SG;
//  olxstr Tmp;
//
//  int Latt;
//  for( size_t i=0; i < DF.Root().ItemCount(); i++ )  {
//    TDataItem & DI = DF.Root().Item(i);
//    Latt = DI.GetFieldValue("LATT").ToInt();
//    SG = new TSpaceGroup(DI.GetName(), DI.GetFieldValue("FULL"), DI.GetFieldValue("HS"),
//                         DI.GetFieldValue("AXIS"), DI.GetFieldValue("#").ToInt(),
//                         GetLattice(abs(Latt)-1), (Latt > 0));
//    SpaceGroups.Add(DI.GetName(), SG);
//
//    for( size_t j=0; j < DI.ItemCount(); j++ )  {
//      M.Null();
//      TSymmParser::SymmToMatrix(DI.Item(j).GetValue(), M);
//      SG->AddMatrix(M);
//    }
//  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
  smatd M;
  size_t sgc = sizeof(olx_SGLib)/sizeof(olx_SGLib[0]);
  TStrList toks;
  for( size_t i=0; i < sgc; i++ )  {
    TSpaceGroup* SG = new TSpaceGroup(olx_SGLib[i].name, olx_SGLib[i].full_name, olx_SGLib[i].hall_symbol,
      olx_SGLib[i].axis, olx_SGLib[i].number, GetLattice(abs(olx_SGLib[i].latt)-1), (olx_SGLib[i].latt > 0));
    SpaceGroups.Add(olx_SGLib[i].name, SG);
    toks.Strtok( olx_SGLib[i].matrices, ';');
    for( size_t j=0; j < toks.Count(); j++ )  {
      M.Null();
      TSymmParser::SymmToMatrix(toks[j], M);
      SG->AddMatrix(M);
    }
    if( SG->GetName() == "Fdd2" )
      SG->InversionCenter = vec3d(1./8, 1./8, 1./2);
    else if( SG->GetName() == "I41" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I4122" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./8);
    else if( SG->GetName() == "I4132" )
      SG->InversionCenter = vec3d(1./8, 1./8, 1./8);
    else if( SG->GetName() == "I41md" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I41cd" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I-42d" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./8);

    toks.Clear();
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
  TBravaisLattice* BL = new TBravaisLattice("Triclinic");
  BL->AddSymmetry( this->FindGroup("P-1") );
  BL->AddLattice( FindLattice("P") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Monoclinic");
  BL->AddSymmetry( this->FindGroup("P2/m") );
  BL->AddSymmetry( this->FindGroup("P112/m") );
  BL->AddSymmetry( this->FindGroup("P2/m11") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("A") );
  BL->AddLattice( FindLattice("B") );
  BL->AddLattice( FindLattice("C") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Orthorhombic");
  BL->AddSymmetry( this->FindGroup("Pmmm") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("A") );
  BL->AddLattice( FindLattice("B") );
  BL->AddLattice( FindLattice("C") );
  BL->AddLattice( FindLattice("I") );
  BL->AddLattice( FindLattice("F") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Tetragonal");
  BL->AddSymmetry( this->FindGroup("P4/m") );
  BL->AddSymmetry( this->FindGroup("P4/mmm") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("I") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Trigonal");
  BL->AddSymmetry( this->FindGroup("P-3") );
  BL->AddSymmetry( this->FindGroup("P-3m1") );
  BL->AddSymmetry( this->FindGroup("P-31m") );
  BL->AddSymmetry( this->FindGroup("R3:r") );
  BL->AddSymmetry( this->FindGroup("R32:r") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("R") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Hexagonal");
  BL->AddSymmetry( this->FindGroup("P6/m") );
  BL->AddSymmetry( this->FindGroup("P6/mmm") );
  BL->AddLattice( FindLattice("P") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Cubic");
  BL->AddSymmetry( this->FindGroup("Pm-3") );
  BL->AddSymmetry( this->FindGroup("Pm-3m") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("I") );
  BL->AddLattice( FindLattice("F") );
  BravaisLattices.Add( BL->GetName(), BL );

//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("2--", FindGroup("P211") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-2-", FindGroup("P2") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--2", FindGroup("P112") );
  // 0.5+X,-Y,-Z
  TSymmElement& se_p2111 = SymmetryElements.AddNew<olxstr, TSpaceGroup*>("21--", FindGroup("P2111") );
  // -X,0.5+Y,-Z
  TSymmElement& se_p21 = SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-21-", FindGroup("P21") );
  // -X,-Y,0.5+Z
  TSymmElement& se_p1121 = SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--21", FindGroup("P1121") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("3", FindGroup("P3") );
  //-Y,+X-Y,0.333+Z;+Y-X,-X,0.667+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("31", FindGroup("P31") );
  // -Y,+X-Y,0.667+Z;+Y-X,-X,0.333+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("32", FindGroup("P32") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("4", FindGroup("P4") );
  //-Y,+X,0.25+Z;-X,-Y,0.5+Z;+Y,-X,0.75+Z
  TSymmElement& se_p41 = SymmetryElements.AddNew<olxstr, TSpaceGroup*>("41", FindGroup("P41") );
  //-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("42", FindGroup("P42") );
  // -Y,+X,0.75+Z;-X,-Y,0.5+Z;+Y,-X,0.25+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("43", FindGroup("P43") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("6", FindGroup("P6") );
  //-Y+X,+X,0.167+Z;-Y,+X-Y,0.333+Z;-X,-Y,0.5+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.833+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("61", FindGroup("P61") );
  //-Y+X,+X,0.333+Z;-Y,+X-Y,0.667+Z;-X,-Y,+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.667+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("62", FindGroup("P62") );
  //-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("63", FindGroup("P63") );
  //-Y+X,+X,0.667+Z;-Y,+X-Y,0.333+Z;-X,-Y,+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.333+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("64", FindGroup("P64") );
  //-Y+X,+X,0.833+Z;-Y,+X-Y,0.667+Z;-X,-Y,0.5+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.167+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("65", FindGroup("P65") );
  
  // -X,0.5+Y,0.5+Z
  TSymmElement* se_n11 = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>("n--", FindGroup("Pn11") );
  //0.5+X,-Y,0.5+Z
  TSymmElement* se_n = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-n-", FindGroup("Pn") );
  //0.5+X,0.5+Y,-Z
  TSymmElement* se_11n = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--n", FindGroup("P11n") );
  
  // 0.5+X,-Y,+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-a-", FindGroup("Pa") ).SuperElement = se_n;
  //0.5+X,+Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--a", FindGroup("P11a") ).SuperElement = se_11n;

  //-X,0.5+Y,+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("b--", FindGroup("Pb11") ).SuperElement = se_n11;
  //+X,0.5+Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--b", FindGroup("P11b") ).SuperElement = se_11n;

  //-X,+Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("c--", FindGroup("Pc11") ).SuperElement = se_n11;
  //+X,-Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-c-", FindGroup("Pc") ).SuperElement = se_n;

//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("m--", FindGroup("Pm11") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-m-", FindGroup("Pm") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--m", FindGroup("P11m") );

  // xonstructing glide d planes
  smatd dMatt;
  TSymmElement& d1 = SymmetryElements.AddNew<olxstr>("d--");
  dMatt.r[0][0] = -1;  dMatt.r[1][1] = 1;  dMatt.r[2][2] = 1;
  dMatt.t[0] = 0;      dMatt.t[1] = dMatt.t[2] = 1./4.;
  d1.AddMatrix(dMatt);
  TSymmElement& d2 = SymmetryElements.AddNew<olxstr>("-d-");
  dMatt.r[0][0] = 1;  dMatt.r[1][1] = -1;  dMatt.r[2][2] = 1;
  dMatt.t[1] = 0;     dMatt.t[0] = dMatt.t[2] = 1./4.;
  d2.AddMatrix(dMatt);
  TSymmElement& d3 = SymmetryElements.AddNew<olxstr>("--d");
  dMatt.r[0][0] = 1;  dMatt.r[1][1] = 1;  dMatt.r[2][2] = -1;
  dMatt.t[2] = 0;     dMatt.t[0] = dMatt.t[1] = 1./4.;
  d3.AddMatrix(dMatt);

  PointGroups.Add( FindGroup("P1") );
  PointGroups.Add( FindGroup("P-1") );

  PointGroups.Add( FindGroup("P2") );
  PointGroups.Add( FindGroup("Pm") );
  PointGroups.Add( FindGroup("P2/m") );

  PointGroups.Add( FindGroup("P222") );
  PointGroups.Add( FindGroup("Pmm2") );
  PointGroups.Add( FindGroup("Pmmm") );

  PointGroups.Add( FindGroup("P4") );
  PointGroups.Add( FindGroup("P-4") );
  PointGroups.Add( FindGroup("P4/m") );
  PointGroups.Add( FindGroup("P422") );
  PointGroups.Add( FindGroup("P4mm") );
  PointGroups.Add( FindGroup("P-42m") );
  PointGroups.Add( FindGroup("P-4m2") );
  PointGroups.Add( FindGroup("P4/mmm") );

  PointGroups.Add( FindGroup("P3") );
  PointGroups.Add( FindGroup("P-3") );
  PointGroups.Add( FindGroup("P321") );
  PointGroups.Add( FindGroup("P3m1") );
  PointGroups.Add( FindGroup("P-3m1") );
  PointGroups.Add( FindGroup("P-31m") );
  PointGroups.Add( FindGroup("P312") );
  PointGroups.Add( FindGroup("P31m") );

  PointGroups.Add( FindGroup("P6") );
  PointGroups.Add( FindGroup("P-6") );
  PointGroups.Add( FindGroup("P6/m") );
  PointGroups.Add( FindGroup("P622") );
  PointGroups.Add( FindGroup("P6mm") );
  PointGroups.Add( FindGroup("P-62m") );
  PointGroups.Add( FindGroup("P-6m2") );
  PointGroups.Add( FindGroup("P6/mmm") );

  PointGroups.Add( FindGroup("P23") );
  PointGroups.Add( FindGroup("Pm-3") );
  PointGroups.Add( FindGroup("P432") );
  PointGroups.Add( FindGroup("P-43m") );
  PointGroups.Add( FindGroup("Pm-3m") );

  InitRelations();

  Instance = this;
}
//..............................................................................
TSymmLib::~TSymmLib()  {
  for( size_t i=0; i < SGCount(); i++ )  delete &(GetGroup(i));
  for( size_t i=0; i < LatticeCount(); i++ )  delete &(GetLattice(i));
  for( size_t i=0; i < BravaisLatticeCount(); i++ )  delete &(GetBravaisLattice(i));
  Instance = NULL;
}
//..............................................................................
void TSymmLib::GetGroupByNumber(int N, TPtrList<TSpaceGroup>& res) const  {
  for( size_t i=0; i < SGCount(); i++ )
    if( GetGroup(i).GetNumber() == N )  res.Add( &GetGroup(i) );
}
//..............................................................................
TSpaceGroup* TSymmLib::FindSG(const TAsymmUnit& AU)  const {
  for( size_t i=0; i < SGCount(); i++ )  {
    if( GetGroup(i) == AU )  {
      return &(GetGroup(i));
    }
  }
  return NULL;
}
TSpaceGroup* TSymmLib::FindExpandedSG(const TAsymmUnit& AU) const  {
  for( size_t i=0; i < SGCount(); i++ )
    if( GetGroup(i).EqualsExpandedSG(AU) )  return &(GetGroup(i));
  return NULL;
}
//..............................................................................
size_t TSymmLib::FindBravaisLattices(TAsymmUnit& AU, TTypeList<TBravaisLatticeRef>& res)  const {
  double Alpha = AU.Angles()[0].GetV(), Beta = AU.Angles()[1].GetV(), Gamma = AU.Angles()[2].GetV();
  double A = AU.Axes()[0].GetV(),       B = AU.Axes()[1].GetV(),      C = AU.Axes()[2].GetV();
  // alpha = beta = gamma
  if( Alpha == Beta && Alpha == Gamma )  {
    if( Alpha == 90 )  {
      if( A == B && A == C )  {
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Cubic"), 0 );
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Tetragonal"), -1 );
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Orthorhombic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Monoclinic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
      }
      else if( A == B )  {
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Tetragonal"), 0 );
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Orthorhombic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Monoclinic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
      }
      else  {
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Orthorhombic"), 0 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Monoclinic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
      }
    }
    else  {
      res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Trigonal"), 0 );
      res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
    }
  }
  else if( Alpha == Beta )  {
    if( Alpha == 90 )  {
      if( Gamma == 120 )  {
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Trigonal"), 0 );
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Hexagonal"), 0 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Monoclinic"), -1 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
      }
      else  {
        res.AddNew<TBravaisLattice*,int>( this->FindBravaisLattice("Monoclinic"), 0 );
        res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
      }
    }
  }
  else if( Alpha == Gamma && Alpha == 90 )  {
    res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Monoclinic"), 0 );
    res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), -1 );
  }
  else
    res.AddNew<TBravaisLattice*,int>( FindBravaisLattice("Triclinic"), 0 );
  return 0;
}
//..............................................................................
size_t TSymmLib::FindLaueClassGroups(const TSpaceGroup& LaueClass, TPtrList<TSpaceGroup>& res)  const {
  size_t rc = 0;
  for( size_t i=0; i < SGCount(); i++ )  {
    if( &GetGroup(i).GetLaueClass() == &LaueClass )  {
      res.Add( &GetGroup(i) );
      rc++;
    }
  }
  return rc;
}
//..............................................................................
size_t TSymmLib::FindPointGroupGroups(const TSpaceGroup& PointGroup, TPtrList<TSpaceGroup>& res) const {
  size_t rc = 0;
  for( size_t i=0; i < SGCount(); i++ )  {
    if( &GetGroup(i).GetPointGroup() == &PointGroup )  {
      res.Add( &GetGroup(i) );
      rc++;
    }
  }
  return rc;
}
//..............................................................................
void TSymmLib::InitRelations()  {
  TPtrList<TSpaceGroup> allSG;
  for( size_t i=0; i < BravaisLatticeCount(); i++ )  {
    TBravaisLattice& bl = GetBravaisLattice(i);
    for( size_t j=0; j < bl.LatticeCount(); j++ )  {
      bl.GetLattice(j).AddBravaiseLattice( &bl );
    }
    for( size_t j=0; j < SGCount(); j++ )  {
      TSpaceGroup& sg = GetGroup(j);
      if( &(sg.GetBravaisLattice()) != NULL )  continue;
      bool found = false;
      for( size_t k=0; k < bl.SymmetryCount(); k++ )  {
        if( bl.GetSymmetry(k).EqualsWithoutTranslation( sg ) )  {
          sg.SetBravaisLattice(bl);
          sg.SetLaueClass( bl.GetSymmetry(k) );
          //allSG.Clear();
          //GetGroupByNumber( GetGroup(j).GetNumber(), allSG );
          //for( size_t l=0; l < allSG.Count(); l++ )  {
          //  if(  &(allSG[l]->GetBravaisLattice()) != NULL )
          //    throw TFunctionFailedException(__OlxSourceInfo, "assert");
          //  allSG[l]->SetBravaisLattice( bl );
          //  allSG[l]->SetLaueClass( bl.GetSymmetry(k) );
          //}
          found = true;
          break;
        }
        if( found )  break;
      }
    }
  }
  for( size_t i=0; i < SGCount(); i++ )  {
    TSpaceGroup& sg = GetGroup(i);
    if( &sg.GetPointGroup() != NULL )  continue;
    TSpaceGroup* pg = NULL;
    for( size_t j=0; j < PointGroups.Count(); j++ )  {
      if( GetGroup(i).ContainsGroup( PointGroups[j] ) )  {
        //sg.SetPointGroup( *PointGroups[j] );
        pg = PointGroups[j];
        break;
      }
    }
    if( pg != NULL )  {
      allSG.Clear();
      GetGroupByNumber( GetGroup(i).GetNumber(), allSG );
      for( size_t j=0; j < allSG.Count(); j++ )  {
        if( &allSG[j]->GetPointGroup() != NULL )
          throw TFunctionFailedException(__OlxSourceInfo, "assert");;
        allSG[j]->SetPointGroup( *pg );
      }
    }
  }
  // test
  for( size_t i=0; i < SGCount(); i++ )  {
    TSpaceGroup& sg = GetGroup(i);
    if( &sg.GetPointGroup() == NULL )
      throw TFunctionFailedException(__OlxSourceInfo, "assert point group");
    if( &sg.GetLaueClass() == NULL )
      throw TFunctionFailedException(__OlxSourceInfo, "assert laue class");
  }
}

//..............................................................................
TSymmElement*  TSymmLib::FindSymmElement(const olxstr& name)  const  {
  for( size_t i=0; i < SymmetryElements.Count(); i++ )
    if( SymmetryElements[i].GetName() == name )  return &SymmetryElements[i];
  return NULL;
}



