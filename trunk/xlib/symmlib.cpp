/******************************************************************************
* Copyright (c) 2004-2011 O. Dolomanov, OlexSys                               *
*                                                                             *
* This file is part of the OlexSys Development Framework.                     *
*                                                                             *
* This source file is distributed under the terms of the licence located in   *
* the root folder.                                                            *
******************************************************************************/

#include <stdlib.h>
#include "symmlib.h"
#include "dataitem.h"
#include "symmparser.h"
#include "bapp.h"
#include "hall.h"
//#include "bitarray.h"

TSymmLib* TSymmLib::Instance = NULL;

struct olx_SGDef  {
  const char* name, *full_name, *axis;
  int number, latt;
  const char* matrices;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// automatically generated code
olx_SGDef olx_SGLib[498]={
{"A112", "A 1 1 2", "c1", 5, -5, "-X,-Y,+Z"},
{"A112/a", "A 1 1 2/a", "c1", 15, 5, "1/2-X,-Y,+Z"},
{"A112/m", "A 1 1 2/m", "c1", 12, 5, "-X,-Y,+Z"},
{"A112/n", "A 1 1 2/n", "-c2", 15, 5, "1/2-X,-Y,1/2+Z"},
{"A11a", "A 1 1 a", "c1", 9, -5, "1/2+X,+Y,-Z"},
{"A11m", "A 1 1 m", "c1", 8, -5, "+X,+Y,-Z"},
{"A11n", "A 1 1 n", "-c2", 9, -5, "1/2+X,+Y,1/2-Z"},
{"A2", "A 1 2 1", "b2", 5, -5, "-X,+Y,-Z"},
{"A2/a", "A 1 2/a 1", "-b1", 15, 5, "1/2-X,+Y,-Z"},
{"A2/m", "A 1 2/m 1", "b2", 12, 5, "-X,+Y,-Z"},
{"A2/n", "A 1 2/n 1", "b2", 15, 5, "1/2-X,+Y,1/2-Z"},
{"A2122", "A 21 2 2", "cab", 20, -5, "1/2-X,-Y,+Z;1/2+X,-Y,-Z;-X,+Y,-Z"},
{"A21am", "A 21 a m", "-cba", 36, -5, "1/2+X,-Y,-Z;+X,+Y,-Z;1/2+X,-Y,+Z"},
{"A21ma", "A 21 m a", "cab", 36, -5, "1/2+X,-Y,-Z;1/2+X,+Y,-Z;+X,-Y,+Z"},
{"A222", "A 2 2 2", "cab", 21, -5, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"A2aa", "A 2 a a", "cab", 37, -5, "+X,-Y,-Z;1/2+X,+Y,-Z;1/2+X,-Y,+Z"},
{"A2mm", "A 2 m m", "cab", 35, -5, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"Aa", "A 1 a 1", "-b1", 9, -5, "1/2+X,-Y,+Z"},
{"Aea2", "A e a 2", "", 41, -5, "-X,-Y,+Z;1/2-X,+Y,1/2+Z;1/2+X,-Y,1/2+Z"},
{"Abaa", "A b a a", "cab", 68, 5, "1/2-X,-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Aem2", "A e m 2", "", 39, -5, "-X,-Y,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"Abma", "A b m a", "cab", 64, 5, "1/2-X,-Y,1/2+Z;1/2+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Abmm", "A b m m", "cab", 67, 5, "-X,-Y,1/2+Z;+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Ac2a", "A c 2 a", "a-cb", 41, -5, "-X,+Y,-Z;1/2+X,+Y,1/2-Z;1/2-X,+Y,1/2+Z"},
{"Ac2m", "A c 2 m", "a-cb", 39, -5, "-X,+Y,-Z;+X,+Y,1/2-Z;-X,+Y,1/2+Z"},
{"Acaa", "A c a a", "-cba", 68, 5, "1/2-X,-Y,1/2+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Acam", "A c a m", "-cba", 64, 5, "-X,-Y,+Z;1/2+X,-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Acmm", "A c m m", "-cba", 67, 5, "-X,-Y,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Am", "A 1 m 1", "b2", 8, -5, "+X,-Y,+Z"},
{"Am2a", "A m 2 a", "a-cb", 40, -5, "-X,+Y,-Z;1/2+X,+Y,-Z;1/2-X,+Y,+Z"},
{"Am2m", "A m 2 m", "a-cb", 38, -5, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Ama2", "A m a 2", "", 40, -5, "-X,-Y,+Z;1/2-X,+Y,+Z;1/2+X,-Y,+Z"},
{"Amaa", "A m a a", "cab", 66, 5, "1/2-X,-Y,+Z;+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Amam", "A m a m", "-cba", 63, 5, "-X,-Y,+Z;1/2+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Amm2", "A m m 2", "", 38, -5, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Amma", "A m m a", "cab", 63, 5, "1/2-X,-Y,+Z;1/2+X,-Y,-Z;-X,+Y,-Z"},
{"Ammm", "A m m m", "cab", 65, 5, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"An", "A 1 n 1", "b2", 9, -5, "1/2+X,-Y,1/2+Z"},
{"B112", "B 1 1 2", "c2", 5, -6, "-X,-Y,+Z"},
{"B112/b", "B 1 1 2/b", "-c1", 15, 6, "-X,1/2-Y,+Z"},
{"B112/m", "B 1 1 2/m", "c2", 12, 6, "-X,-Y,+Z"},
{"B112/n", "B 1 1 2/n", "c2", 15, 6, "-X,1/2-Y,1/2+Z"},
{"B11b", "B 1 1 b", "-c1", 9, -6, "+X,1/2+Y,-Z"},
{"B11m", "B 1 1 m", "c2", 8, -6, "+X,+Y,-Z"},
{"B11n", "B 1 1 n", "c2", 9, -6, "+X,1/2+Y,1/2-Z"},
{"B2/b11", "B 2/b 1 1", "a1", 15, 6, "+X,1/2-Y,-Z"},
{"B2/m11", "B 2/m 1 1", "a1", 12, 6, "+X,-Y,-Z"},
{"B2/n11", "B 2/n 1 1", "-a2", 15, 6, "+X,1/2-Y,1/2-Z"},
{"B211", "B 2 1 1", "a1", 5, -6, "+X,-Y,-Z"},
{"B2212", "B 2 21 2", "bca", 20, -6, "-X,-Y,+Z;+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"B222", "B 2 2 2", "bca", 21, -6, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"B2cb", "B 2 c b", "cab", 41, -6, "+X,-Y,-Z;+X,1/2+Y,1/2-Z;+X,1/2-Y,1/2+Z"},
{"B2cm", "B 2 c m", "cab", 39, -6, "+X,-Y,-Z;+X,+Y,1/2-Z;+X,-Y,1/2+Z"},
{"B2mb", "B 2 m b", "cab", 40, -6, "+X,-Y,-Z;+X,1/2+Y,-Z;+X,1/2-Y,+Z"},
{"B2mm", "B 2 m m", "cab", 38, -6, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"Bb11", "B b 1 1", "a1", 9, -6, "-X,1/2+Y,+Z"},
{"Bb21m", "B b 21 m", "bca", 36, -6, "-X,1/2+Y,-Z;+X,+Y,-Z;-X,1/2+Y,+Z"},
{"Bb2b", "B b 2 b", "bca", 37, -6, "-X,+Y,-Z;+X,1/2+Y,-Z;-X,1/2+Y,+Z"},
{"Bba2", "B b a 2", "ba-c", 41, -6, "-X,-Y,+Z;-X,1/2+Y,1/2+Z;+X,1/2-Y,1/2+Z"},
{"Bbab", "B b a b", "a-cb", 68, 6, "-X,1/2-Y,+Z;+X,1/2-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Bbcb", "B b c b", "bca", 68, 6, "-X,1/2-Y,1/2+Z;+X,1/2-Y,-Z;-X,+Y,1/2-Z"},
{"Bbcm", "B b c m", "bca", 64, 6, "-X,-Y,+Z;+X,1/2-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Bbm2", "B b m 2", "ba-c", 40, -6, "-X,-Y,+Z;-X,1/2+Y,+Z;+X,1/2-Y,+Z"},
{"Bbmb", "B b m b", "bca", 66, 6, "-X,1/2-Y,+Z;+X,1/2-Y,-Z;-X,+Y,-Z"},
{"Bbmm", "B b m m", "bca", 63, 6, "-X,-Y,+Z;+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"Bm11", "B m 1 1", "a1", 8, -6, "-X,+Y,+Z"},
{"Bm21b", "B m 21 b", "a-cb", 36, -6, "-X,1/2+Y,-Z;+X,1/2+Y,-Z;-X,+Y,+Z"},
{"Bm2m", "B m 2 m", "bca", 35, -6, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Bma2", "B m a 2", "ba-c", 39, -6, "-X,-Y,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"Bmab", "B m a b", "a-cb", 64, 6, "-X,1/2-Y,1/2+Z;+X,-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Bmam", "B m a m", "a-cb", 67, 6, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"Bmcm", "B m c m", "bca", 67, 6, "-X,-Y,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Bmm2", "B m m 2", "ba-c", 38, -6, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Bmmb", "B m m b", "a-cb", 63, 6, "-X,1/2-Y,+Z;+X,-Y,-Z;-X,1/2+Y,-Z"},
{"Bmmm", "B m m m", "bca", 65, 6, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Bn11", "B n 1 1", "-a2", 9, -6, "-X,1/2+Y,1/2+Z"},
{"C1", "C 1", "", 1, -7, ""},
{"C2", "C 1 2 1", "b1", 5, -7, "-X,+Y,-Z"},
{"C2/c", "C 1 2/c 1", "b1", 15, 7, "-X,+Y,1/2-Z"},
{"C2/c11", "C 2/c 1 1", "-a1", 15, 7, "+X,-Y,1/2-Z"},
{"C2/m", "C 1 2/m 1", "b1", 12, 7, "-X,+Y,-Z"},
{"C2/m11", "C 2/m 1 1", "a2", 12, 7, "+X,-Y,-Z"},
{"C2/n", "C 1 2/n 1", "-b2", 15, 7, "-X,1/2+Y,1/2-Z"},
{"C2/n11", "C 2/n 1 1", "a2", 15, 7, "+X,1/2-Y,1/2-Z"},
{"C211", "C 2 1 1", "a2", 5, -7, "+X,-Y,-Z"},
{"C222", "C 2 2 2", "", 21, -7, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"C2221", "C 2 2 21", "", 20, -7, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"C2cb", "C 2 c b", "-cba", 41, -7, "+X,-Y,-Z;+X,1/2+Y,1/2-Z;+X,1/2-Y,1/2+Z"},
{"C2cm", "C 2 c m", "-cba", 40, -7, "+X,-Y,-Z;+X,+Y,1/2-Z;+X,-Y,1/2+Z"},
{"C2mb", "C 2 m b", "-cba", 39, -7, "+X,-Y,-Z;+X,1/2+Y,-Z;+X,1/2-Y,+Z"},
{"C2mm", "C 2 m m", "-cba", 38, -7, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"Cc", "C 1 c 1", "b1", 9, -7, "+X,-Y,1/2+Z"},
{"Cc11", "C c 1 1", "-a1", 9, -7, "-X,+Y,1/2+Z"},
{"Cc2a", "C c 2 a", "bca", 41, -7, "-X,+Y,-Z;+X,1/2+Y,1/2-Z;-X,1/2+Y,1/2+Z"},
{"Cc2m", "C c 2 m", "bca", 40, -7, "-X,+Y,-Z;+X,+Y,1/2-Z;-X,+Y,1/2+Z"},
{"Ccc2", "C c c 2", "", 37, -7, "-X,-Y,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"Ccce", "C c c e", "", 68, 7, "-X,1/2-Y,+Z;+X,1/2-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Cccb", "C c c b", "ba-c", 68, 7, "-X,1/2-Y,+Z;+X,-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Cccm", "C c c m", "", 66, 7, "-X,-Y,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Ccm21", "C c m 21", "ba-c", 36, -7, "-X,-Y,1/2+Z;-X,+Y,1/2+Z;+X,-Y,+Z"},
{"Ccmb", "C c m b", "ba-c", 64, 7, "-X,1/2-Y,1/2+Z;+X,1/2-Y,1/2-Z;-X,+Y,-Z"},
{"Ccmm", "C c m m", "ba-c", 63, 7, "-X,-Y,1/2+Z;+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Cm", "C 1 m 1", "b1", 8, -7, "+X,-Y,+Z"},
{"Cm11", "C m 1 1", "a2", 8, -7, "-X,+Y,+Z"},
{"Cm2a", "C m 2 a", "bca", 39, -7, "-X,+Y,-Z;+X,1/2+Y,-Z;-X,1/2+Y,+Z"},
{"Cm2m", "C m 2 m", "bca", 38, -7, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Cmc21", "C m c 21", "", 36, -7, "-X,-Y,1/2+Z;-X,+Y,+Z;+X,-Y,1/2+Z"},
{"Cmce", "C m c e", "", 64, 7, "-X,1/2-Y,1/2+Z;+X,-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Cmcm", "C m c m", "", 63, 7, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"Cmm2", "C m m 2", "", 35, -7, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Cmme", "C m m e", "", 67, 7, "-X,1/2-Y,+Z;+X,-Y,-Z;-X,1/2+Y,-Z"},
{"Cmmb", "C m m b", "ba-c", 67, 7, "-X,1/2-Y,+Z;+X,1/2-Y,-Z;-X,+Y,-Z"},
{"Cmmm", "C m m m", "", 65, 7, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Cn", "C 1 n 1", "-b2", 9, -7, "+X,1/2-Y,1/2+Z"},
{"Cn11", "C n 1 1", "a2", 9, -7, "-X,1/2+Y,1/2+Z"},
{"F-43c", "F -4 3 c", "", 219, -4, "+Y,-X,1/2-Z;-X,-Y,+Z;-Y,+X,1/2-Z;-X,+Z,1/2-Y;+X,-Y,-Z;-X,-Z,1/2+Y;-Z,-Y,1/2+X;-X,+Y,-Z;+Z,-Y,1/2-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,1/2+Z;+Y,+X,1/2+Z;+X,-Z,1/2-Y;+X,+Z,1/2+Y;-Z,+Y,1/2-X;+Z,+Y,1/2+X"},
{"F-43m", "F -4 3 m", "", 216, -4, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"},
{"F222", "F 2 2 2", "", 22, -4, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"F23", "F 2 3", "", 196, -4, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"F2dd", "F 2 d d", "cab", 43, -4, "+X,-Y,-Z;1/4+X,1/4+Y,1/4-Z;1/4+X,1/4-Y,1/4+Z"},
{"F2mm", "F 2 m m", "cab", 42, -4, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"F4132", "F 41 3 2", "", 210, -4, "1/4-Y,1/4+X,1/4+Z;-X,-Y,+Z;1/4+Y,1/4-X,1/4+Z;1/4+X,1/4-Z,1/4+Y;+X,-Y,-Z;1/4+X,1/4+Z,1/4-Y;1/4+Z,1/4+Y,1/4-X;-X,+Y,-Z;1/4-Z,1/4+Y,1/4+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;1/4+Y,1/4+X,1/4-Z;1/4-Y,1/4-X,1/4-Z;1/4-X,1/4+Z,1/4+Y;1/4-X,1/4-Z,1/4-Y;1/4+Z,1/4-Y,1/4+X;1/4-Z,1/4-Y,1/4-X"},
{"F432", "F 4 3 2", "", 209, -4, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"Fd-3", "F d -3", "", 203, 4, "+Z,+X,+Y;+Y,+Z,+X;1/4-Y,1/4-Z,+X;+Z,1/4-X,1/4-Y;1/4-Y,+Z,1/4-X;1/4-Z,1/4-X,+Y;1/4-Z,+X,1/4-Y;+Y,1/4-Z,1/4-X;1/4-X,1/4-Y,+Z;+X,1/4-Y,1/4-Z;1/4-X,+Y,1/4-Z"},
{"Fd-3c", "F d -3 c", "", 228, 4, "-Y,1/4+X,3/4+Z;1/4-X,1/4-Y,+Z;1/4+Y,-X,3/4+Z;1/4+X,-Z,3/4+Y;+X,1/4-Y,1/4-Z;1/4+X,3/4+Z,-Y;1/4+Z,3/4+Y,-X;1/4-X,+Y,1/4-Z;-Z,1/4+Y,3/4+X;+Z,+X,+Y;+Y,+Z,+X;1/4-Y,1/4-Z,+X;+Z,1/4-X,1/4-Y;1/4-Y,+Z,1/4-X;1/4-Z,1/4-X,+Y;1/4-Z,+X,1/4-Y;+Y,1/4-Z,1/4-X;1/4+Y,3/4+X,-Z;-Y,-X,1/2-Z;-X,1/4+Z,3/4+Y;-X,-Z,1/2-Y;1/4+Z,-Y,3/4+X;-Z,-Y,1/2-X"},
{"Fd-3m", "F d -3 m", "", 227, 4, "-Y,1/4+X,1/4+Z;1/4-X,1/4-Y,+Z;1/4+Y,-X,1/4+Z;1/4+X,-Z,1/4+Y;+X,1/4-Y,1/4-Z;1/4+X,1/4+Z,-Y;1/4+Z,1/4+Y,-X;1/4-X,+Y,1/4-Z;-Z,1/4+Y,1/4+X;+Z,+X,+Y;+Y,+Z,+X;1/4-Y,1/4-Z,+X;+Z,1/4-X,1/4-Y;1/4-Y,+Z,1/4-X;1/4-Z,1/4-X,+Y;1/4-Z,+X,1/4-Y;+Y,1/4-Z,1/4-X;1/4+Y,1/4+X,-Z;-Y,-X,-Z;-X,1/4+Z,1/4+Y;-X,-Z,-Y;1/4+Z,-Y,1/4+X;-Z,-Y,-X"},
{"Fd2d", "F d 2 d", "bca", 43, -4, "-X,+Y,-Z;1/4+X,1/4+Y,1/4-Z;1/4-X,1/4+Y,1/4+Z"},
{"Fdd2", "F d d 2", "", 43, -4, "-X,-Y,+Z;1/4-X,1/4+Y,1/4+Z;1/4+X,1/4-Y,1/4+Z"},
{"Fddd", "F d d d", "", 70, 4, "1/4-X,1/4-Y,+Z;+X,1/4-Y,1/4-Z;1/4-X,+Y,1/4-Z"},
{"Fm-3", "F m -3", "", 202, 4, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Fm-3c", "F m -3 c", "", 226, 4, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;+X,-Z,1/2+Y;+X,-Y,-Z;+X,+Z,1/2-Y;+Z,+Y,1/2-X;-X,+Y,-Z;-Z,+Y,1/2+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,1/2-Z;-Y,-X,1/2-Z;-X,+Z,1/2+Y;-X,-Z,1/2-Y;+Z,-Y,1/2+X;-Z,-Y,1/2-X"},
{"Fm-3m", "F m -3 m", "", 225, 4, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"Fm2m", "F m 2 m", "bca", 42, -4, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Fmm2", "F m m 2", "", 42, -4, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Fmmm", "F m m m", "", 69, 4, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"I-4", "I -4", "", 82, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z"},
{"I-42d", "I -4 2 d", "", 122, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,1/2-Y,1/4-Z;-X,1/2+Y,1/4-Z;-Y,1/2-X,1/4+Z;+Y,1/2+X,1/4+Z"},
{"I-42m", "I -4 2 m", "", 121, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,-Z;-X,+Y,-Z;-Y,-X,+Z;+Y,+X,+Z"},
{"I-43d", "I -4 3 d", "", 220, -2, "1/4+Y,3/4-X,1/4-Z;-X,1/2-Y,+Z;1/4-Y,1/4+X,3/4-Z;1/4-X,1/4+Z,3/4-Y;+X,-Y,1/2-Z;3/4-X,1/4-Z,1/4+Y;3/4-Z,1/4-Y,1/4+X;1/2-X,+Y,-Z;1/4+Z,3/4-Y,1/4-X;+Z,+X,+Y;+Y,+Z,+X;-Y,1/2-Z,+X;+Z,-X,1/2-Y;1/2-Y,+Z,-X;-Z,1/2-X,+Y;1/2-Z,+X,-Y;+Y,-Z,1/2-X;3/4-Y,1/4-X,1/4+Z;1/4+Y,1/4+X,1/4+Z;1/4+X,3/4-Z,1/4-Y;1/4+X,1/4+Z,1/4+Y;1/4-Z,1/4+Y,3/4-X;1/4+Z,1/4+Y,1/4+X"},
{"I-43m", "I -4 3 m", "", 217, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"},
{"I-4c2", "I -4 c 2", "", 120, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"I-4m2", "I -4 m 2", "", 119, -2, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,-Z;-Y,-X,-Z;-X,+Y,+Z;+X,-Y,+Z"},
{"I112", "I 1 1 2", "c3", 5, -2, "-X,-Y,+Z"},
{"I112/a", "I 1 1 2/a", "-c3", 15, 2, "1/2-X,-Y,+Z"},
{"I112/b", "I 1 1 2/b", "c3", 15, 2, "-X,1/2-Y,+Z"},
{"I112/m", "I 1 1 2/m", "c3", 12, 2, "-X,-Y,+Z"},
{"I11a", "I 1 1 a", "-c3", 9, -2, "1/2+X,+Y,-Z"},
{"I11b", "I 1 1 b", "c3", 9, -2, "+X,1/2+Y,-Z"},
{"I11m", "I 1 1 m", "c3", 8, -2, "+X,+Y,-Z"},
{"I2", "I 1 2 1", "b3", 5, -2, "-X,+Y,-Z"},
{"I2/a", "I 1 2/a 1", "b3", 15, 2, "1/2-X,+Y,-Z"},
{"I2/b11", "I 2/b 1 1", "-a3", 15, 2, "+X,1/2-Y,-Z"},
{"I2/c", "I 1 2/c 1", "-b3", 15, 2, "-X,+Y,1/2-Z"},
{"I2/c11", "I 2/c 1 1", "a3", 15, 2, "+X,-Y,1/2-Z"},
{"I2/m", "I 1 2/m 1", "b3", 12, 2, "-X,+Y,-Z"},
{"I2/m11", "I 2/m 1 1", "a3", 12, 2, "+X,-Y,-Z"},
{"I211", "I 2 1 1", "a3", 5, -2, "+X,-Y,-Z"},
{"I212121", "I 21 21 21", "", 24, -2, "-X,1/2-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"I213", "I 21 3", "", 199, -2, "+Z,+X,+Y;+Y,+Z,+X;-Y,1/2-Z,+X;+Z,-X,1/2-Y;1/2-Y,+Z,-X;-Z,1/2-X,+Y;1/2-Z,+X,-Y;+Y,-Z,1/2-X;-X,1/2-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"I222", "I 2 2 2", "", 23, -2, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"I23", "I 2 3", "", 197, -2, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"I2cb", "I 2 c b", "cab", 45, -2, "+X,-Y,-Z;1/2+X,+Y,-Z;1/2+X,-Y,+Z"},
{"I2cm", "I 2 c m", "-cba", 46, -2, "+X,-Y,-Z;+X,+Y,1/2-Z;+X,-Y,1/2+Z"},
{"I2mb", "I 2 m b", "cab", 46, -2, "+X,-Y,-Z;+X,1/2+Y,-Z;+X,1/2-Y,+Z"},
{"I2mm", "I 2 m m", "cab", 44, -2, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"I4", "I 4", "", 79, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"},
{"I4/m", "I 4/m", "", 87, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"},
{"I4/mcm", "I 4/m c m", "", 140, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z"},
{"I4/mmm", "I 4/m m m", "", 139, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"I41", "I 41", "", 80, -2, "-Y,1/2+X,1/4+Z;-X,-Y,+Z;+Y,1/2-X,1/4+Z"},
{"I41/a", "I 41/a", "", 88, 2, "3/4-Y,1/4+X,1/4+Z;-X,1/2-Y,+Z;1/4+Y,1/4-X,1/4+Z"},
{"I41/acd", "I 41/a c d", "", 142, 2, "1/4-Y,3/4+X,1/4+Z;-X,1/2-Y,+Z;1/4+Y,1/4-X,3/4+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z;3/4+Y,1/4+X,1/4-Z;1/4-Y,1/4-X,1/4-Z"},
{"I41/amd", "I 41/a m d", "", 141, 2, "1/4-Y,3/4+X,1/4+Z;-X,1/2-Y,+Z;1/4+Y,1/4-X,3/4+Z;+X,-Y,-Z;-X,1/2+Y,-Z;1/4+Y,3/4+X,1/4-Z;1/4-Y,1/4-X,3/4-Z"},
{"I4122", "I 41 2 2", "", 98, -2, "-Y,1/2+X,1/4+Z;-X,-Y,+Z;+Y,1/2-X,1/4+Z;+X,1/2-Y,1/4-Z;-X,1/2+Y,1/4-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"I4132", "I 41 3 2", "", 214, -2, "1/4-Y,3/4+X,1/4+Z;-X,1/2-Y,+Z;1/4+Y,1/4-X,3/4+Z;1/4+X,1/4-Z,3/4+Y;+X,-Y,1/2-Z;3/4+X,1/4+Z,1/4-Y;3/4+Z,1/4+Y,1/4-X;1/2-X,+Y,-Z;1/4-Z,3/4+Y,1/4+X;+Z,+X,+Y;+Y,+Z,+X;-Y,1/2-Z,+X;+Z,-X,1/2-Y;1/2-Y,+Z,-X;-Z,1/2-X,+Y;1/2-Z,+X,-Y;+Y,-Z,1/2-X;3/4+Y,1/4+X,1/4-Z;1/4-Y,1/4-X,1/4-Z;1/4-X,3/4+Z,1/4+Y;1/4-X,1/4-Z,1/4-Y;1/4+Z,1/4-Y,3/4+X;1/4-Z,1/4-Y,1/4-X"},
{"I41cd", "I 41 c d", "", 110, -2, "-Y,1/2+X,1/4+Z;-X,-Y,+Z;+Y,1/2-X,1/4+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z;1/2-Y,-X,1/4+Z;1/2+Y,+X,1/4+Z"},
{"I41md", "I 41 m d", "", 109, -2, "-Y,1/2+X,1/4+Z;-X,-Y,+Z;+Y,1/2-X,1/4+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,1/2-X,1/4+Z;+Y,1/2+X,1/4+Z"},
{"I422", "I 4 2 2", "", 97, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"I432", "I 4 3 2", "", 211, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"I4cm", "I 4 c m", "", 108, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z;-Y,-X,1/2+Z;+Y,+X,1/2+Z"},
{"I4mm", "I 4 m m", "", 107, -2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,+Z;+Y,+X,+Z"},
{"Ia", "I 1 a 1", "b3", 9, -2, "1/2+X,-Y,+Z"},
{"Ia-3", "I a -3", "", 206, 2, "+Z,+X,+Y;+Y,+Z,+X;-Y,1/2-Z,+X;+Z,-X,1/2-Y;1/2-Y,+Z,-X;-Z,1/2-X,+Y;1/2-Z,+X,-Y;+Y,-Z,1/2-X;-X,1/2-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Ia-3d", "I a -3 d", "", 230, 2, "1/4-Y,3/4+X,1/4+Z;-X,1/2-Y,+Z;1/4+Y,1/4-X,3/4+Z;1/4+X,1/4-Z,3/4+Y;+X,-Y,1/2-Z;3/4+X,1/4+Z,1/4-Y;3/4+Z,1/4+Y,1/4-X;1/2-X,+Y,-Z;1/4-Z,3/4+Y,1/4+X;+Z,+X,+Y;+Y,+Z,+X;-Y,1/2-Z,+X;+Z,-X,1/2-Y;1/2-Y,+Z,-X;-Z,1/2-X,+Y;1/2-Z,+X,-Y;+Y,-Z,1/2-X;3/4+Y,1/4+X,1/4-Z;1/4-Y,1/4-X,1/4-Z;1/4-X,3/4+Z,1/4+Y;1/4-X,1/4-Z,1/4-Y;1/4+Z,1/4-Y,3/4+X;1/4-Z,1/4-Y,1/4-X"},
{"Ib11", "I b 1 1", "-a3", 9, -2, "-X,1/2+Y,+Z"},
{"Iba2", "I b a 2", "", 45, -2, "-X,-Y,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"Ibam", "I b a m", "", 72, 2, "-X,-Y,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Ibca", "I b c a", "", 73, 2, "-X,1/2-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Ibm2", "I b m 2", "ba-c", 46, -2, "-X,-Y,+Z;-X,1/2+Y,+Z;+X,1/2-Y,+Z"},
{"Ibmm", "I b m m", "cab", 74, 2, "-X,-Y,1/2+Z;+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Ic", "I 1 c 1", "-b3", 9, -2, "+X,-Y,1/2+Z"},
{"Ic11", "I c 1 1", "a3", 9, -2, "-X,+Y,1/2+Z"},
{"Ic2a", "I c 2 a", "bca", 45, -2, "-X,+Y,-Z;+X,1/2+Y,-Z;-X,1/2+Y,+Z"},
{"Ic2m", "I c 2 m", "bca", 46, -2, "-X,+Y,-Z;+X,+Y,1/2-Z;-X,+Y,1/2+Z"},
{"Icab", "I c a b", "ba-c", 73, 2, "1/2-X,-Y,+Z;+X,1/2-Y,-Z;-X,+Y,1/2-Z"},
{"Icma", "I c m a", "bca", 72, 2, "-X,1/2-Y,+Z;+X,1/2-Y,-Z;-X,+Y,-Z"},
{"Icmm", "I c m m", "-cba", 74, 2, "-X,-Y,+Z;+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"Im", "I 1 m 1", "b3", 8, -2, "+X,-Y,+Z"},
{"Im-3", "I m -3", "", 204, 2, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Im-3m", "I m -3 m", "", 229, 2, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"Im11", "I m 1 1", "a3", 8, -2, "-X,+Y,+Z"},
{"Im2a", "I m 2 a", "a-cb", 46, -2, "-X,+Y,-Z;1/2+X,+Y,-Z;1/2-X,+Y,+Z"},
{"Im2m", "I m 2 m", "bca", 44, -2, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Ima2", "I m a 2", "", 46, -2, "-X,-Y,+Z;1/2-X,+Y,+Z;1/2+X,-Y,+Z"},
{"Imam", "I m a m", "a-cb", 74, 2, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"Imcb", "I m c b", "cab", 72, 2, "1/2-X,-Y,+Z;+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Imcm", "I m c m", "bca", 74, 2, "-X,-Y,+Z;1/2+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Imm2", "I m m 2", "", 44, -2, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Imma", "I m m a", "", 74, 2, "-X,1/2-Y,+Z;+X,-Y,-Z;-X,1/2+Y,-Z"},
{"Immb", "I m m b", "ba-c", 74, 2, "1/2-X,-Y,+Z;1/2+X,-Y,-Z;-X,+Y,-Z"},
{"Immm", "I m m m", "", 71, 2, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"P-1", "P -1", "", 2, 1, ""},
{"P-3", "P -3", "", 147, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z"},
{"P-31c", "P -3 1 c", "", 163, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,1/2-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,1/2-Z"},
{"P-31m", "P -3 1 m", "", 162, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"},
{"P-3c1", "P -3 c 1", "", 165, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,1/2-Z;-X,-X+Y,1/2-Z;+Y,+X,1/2-Z"},
{"P-3m1", "P -3 m 1", "", 164, 1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"},
{"P-4", "P -4", "", 81, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z"},
{"P-421c", "P -4 21 c", "", 114, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z;1/2-Y,1/2-X,1/2+Z;1/2+Y,1/2+X,1/2+Z"},
{"P-421m", "P -4 21 m", "", 113, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z;1/2-Y,1/2-X,+Z;1/2+Y,1/2+X,+Z"},
{"P-42c", "P -4 2 c", "", 112, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z;-Y,-X,1/2+Z;+Y,+X,1/2+Z"},
{"P-42m", "P -4 2 m", "", 111, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+X,-Y,-Z;-X,+Y,-Z;-Y,-X,+Z;+Y,+X,+Z"},
{"P-43m", "P -4 3 m", "", 215, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;-X,+Z,-Y;+X,-Y,-Z;-X,-Z,+Y;-Z,-Y,+X;-X,+Y,-Z;+Z,-Y,-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-Y,-X,+Z;+Y,+X,+Z;+X,-Z,-Y;+X,+Z,+Y;-Z,+Y,-X;+Z,+Y,+X"},
{"P-43n", "P -4 3 n", "", 218, -1, "1/2+Y,1/2-X,1/2-Z;-X,-Y,+Z;1/2-Y,1/2+X,1/2-Z;1/2-X,1/2+Z,1/2-Y;+X,-Y,-Z;1/2-X,1/2-Z,1/2+Y;1/2-Z,1/2-Y,1/2+X;-X,+Y,-Z;1/2+Z,1/2-Y,1/2-X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;1/2-Y,1/2-X,1/2+Z;1/2+Y,1/2+X,1/2+Z;1/2+X,1/2-Z,1/2-Y;1/2+X,1/2+Z,1/2+Y;1/2-Z,1/2+Y,1/2-X;1/2+Z,1/2+Y,1/2+X"},
{"P-4b2", "P -4 b 2", "", 117, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;1/2+Y,1/2+X,-Z;1/2-Y,1/2-X,-Z;1/2-X,1/2+Y,+Z;1/2+X,1/2-Y,+Z"},
{"P-4c2", "P -4 c 2", "", 116, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"P-4m2", "P -4 m 2", "", 115, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;+Y,+X,-Z;-Y,-X,-Z;-X,+Y,+Z;+X,-Y,+Z"},
{"P-4n2", "P -4 n 2", "", 118, -1, "+Y,-X,-Z;-X,-Y,+Z;-Y,+X,-Z;1/2+Y,1/2+X,1/2-Z;1/2-Y,1/2-X,1/2-Z;1/2-X,1/2+Y,1/2+Z;1/2+X,1/2-Y,1/2+Z"},
{"P-6", "P -6", "", 174, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z"},
{"P-62c", "P -6 2 c", "", 190, -1, "+Y-X,-X,1/2-Z;-Y,+X-Y,+Z;+X,+Y,1/2-Z;+Y-X,-X,+Z;-Y,+X-Y,1/2-Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;+Y,+X,1/2+Z;-Y+X,-Y,1/2+Z;-X,-X+Y,1/2+Z"},
{"P-62m", "P -6 2 m", "", 189, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"},
{"P-6c2", "P -6 c 2", "", 188, -1, "+Y-X,-X,1/2-Z;-Y,+X-Y,+Z;+X,+Y,1/2-Z;+Y-X,-X,+Z;-Y,+X-Y,1/2-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z;+Y-X,+Y,1/2+Z;+X,+X-Y,1/2+Z;-Y,-X,1/2+Z"},
{"P-6m2", "P -6 m 2", "", 187, -1, "+Y-X,-X,-Z;-Y,+X-Y,+Z;+X,+Y,-Z;+Y-X,-X,+Z;-Y,+X-Y,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"},
{"P1", "P 1", "", 1, -1, ""},
{"P112", "P 1 1 2", "c", 3, -1, "-X,-Y,+Z"},
{"P112/a", "P 1 1 2/a", "c1", 13, 1, "1/2-X,-Y,+Z"},
{"P112/b", "P 1 1 2/b", "c3", 13, 1, "-X,1/2-Y,+Z"},
{"P112/m", "P 1 1 2/m", "c", 10, 1, "-X,-Y,+Z"},
{"P112/n", "P 1 1 2/n", "c2", 13, 1, "1/2-X,1/2-Y,+Z"},
{"P1121", "P 1 1 21", "c", 4, -1, "-X,-Y,1/2+Z"},
{"P1121/a", "P 1 1 21/a", "c1", 14, 1, "1/2-X,-Y,1/2+Z"},
{"P1121/b", "P 1 1 21/b", "c3", 14, 1, "-X,1/2-Y,1/2+Z"},
{"P1121/m", "P 1 1 21/m", "c", 11, 1, "-X,-Y,1/2+Z"},
{"P1121/n", "P 1 1 21/n", "c2", 14, 1, "1/2-X,1/2-Y,1/2+Z"},
{"P11a", "P 1 1 a", "c1", 7, -1, "1/2+X,+Y,-Z"},
{"P11b", "P 1 1 b", "c3", 7, -1, "+X,1/2+Y,-Z"},
{"P11m", "P 1 1 m", "c", 6, -1, "+X,+Y,-Z"},
{"P11n", "P 1 1 n", "c2", 7, -1, "1/2+X,1/2+Y,-Z"},
{"P2", "P 1 2 1", "b", 3, -1, "-X,+Y,-Z"},
{"P2/a", "P 1 2/a 1", "b3", 13, 1, "1/2-X,+Y,-Z"},
{"P2/b11", "P 2/b 1 1", "a1", 13, 1, "+X,1/2-Y,-Z"},
{"P2/c", "P 1 2/c 1", "b1", 13, 1, "-X,+Y,1/2-Z"},
{"P2/c11", "P 2/c 1 1", "a3", 13, 1, "+X,-Y,1/2-Z"},
{"P2/m", "P 1 2/m 1", "b", 10, 1, "-X,+Y,-Z"},
{"P2/m11", "P 2/m 1 1", "a", 10, 1, "+X,-Y,-Z"},
{"P2/n", "P 1 2/n 1", "b2", 13, 1, "1/2-X,+Y,1/2-Z"},
{"P2/n11", "P 2/n 1 1", "a2", 13, 1, "+X,1/2-Y,1/2-Z"},
{"P21", "P 1 21 1", "b", 4, -1, "-X,1/2+Y,-Z"},
{"P21/a", "P 1 21/a 1", "b3", 14, 1, "1/2-X,1/2+Y,-Z"},
{"P21/b11", "P 21/b 1 1", "a1", 14, 1, "1/2+X,1/2-Y,-Z"},
{"P21/c", "P 1 21/c 1", "b1", 14, 1, "-X,1/2+Y,1/2-Z"},
{"P21/c11", "P 21/c 1 1", "a3", 14, 1, "1/2+X,-Y,1/2-Z"},
{"P21/m", "P 1 21/m 1", "b", 11, 1, "-X,1/2+Y,-Z"},
{"P21/m11", "P 21/m 1 1", "a", 11, 1, "1/2+X,-Y,-Z"},
{"P21/n", "P 1 21/n 1", "b2", 14, 1, "1/2-X,1/2+Y,1/2-Z"},
{"P21/n11", "P 21/n 1 1", "a2", 14, 1, "1/2+X,1/2-Y,1/2-Z"},
{"P211", "P 2 1 1", "a", 3, -1, "+X,-Y,-Z"},
{"P2111", "P 21 1 1", "a", 4, -1, "1/2+X,-Y,-Z"},
{"P21212", "P 21 21 2", "", 18, -1, "-X,-Y,+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z"},
{"P212121", "P 21 21 21", "", 19, -1, "1/2-X,-Y,1/2+Z;1/2+X,1/2-Y,-Z;-X,1/2+Y,1/2-Z"},
{"P2122", "P 21 2 2", "cab", 17, -1, "1/2-X,-Y,+Z;1/2+X,-Y,-Z;-X,+Y,-Z"},
{"P21221", "P 21 2 21", "bca", 18, -1, "1/2-X,-Y,1/2+Z;1/2+X,-Y,1/2-Z;-X,+Y,-Z"},
{"P213", "P 21 3", "", 198, -1, "+Z,+X,+Y;+Y,+Z,+X;1/2-Y,-Z,1/2+X;1/2+Z,1/2-X,-Y;-Y,1/2+Z,1/2-X;1/2-Z,-X,1/2+Y;-Z,1/2+X,1/2-Y;1/2+Y,1/2-Z,-X;1/2-X,-Y,1/2+Z;1/2+X,1/2-Y,-Z;-X,1/2+Y,1/2-Z"},
{"P21ab", "P 21 a b", "cab", 29, -1, "1/2+X,-Y,-Z;+X,1/2+Y,-Z;1/2+X,1/2-Y,+Z"},
{"P21am", "P 21 a m", "-cba", 26, -1, "1/2+X,-Y,-Z;+X,+Y,-Z;1/2+X,-Y,+Z"},
{"P21ca", "P 21 c a", "-cba", 29, -1, "1/2+X,-Y,-Z;1/2+X,+Y,1/2-Z;+X,-Y,1/2+Z"},
{"P21cn", "P 21 c n", "-cba", 33, -1, "1/2+X,-Y,-Z;1/2+X,1/2+Y,1/2-Z;+X,1/2-Y,1/2+Z"},
{"P21ma", "P 21 m a", "cab", 26, -1, "1/2+X,-Y,-Z;1/2+X,+Y,-Z;+X,-Y,+Z"},
{"P21mn", "P 21 m n", "cab", 31, -1, "1/2+X,1/2-Y,-Z;1/2+X,1/2+Y,-Z;+X,-Y,+Z"},
{"P21nb", "P 21 n b", "cab", 33, -1, "1/2+X,-Y,-Z;+X,1/2+Y,1/2-Z;1/2+X,1/2-Y,1/2+Z"},
{"P21nm", "P 21 n m", "-cba", 31, -1, "1/2+X,-Y,1/2-Z;+X,+Y,-Z;1/2+X,-Y,1/2+Z"},
{"P2212", "P 2 21 2", "bca", 17, -1, "-X,-Y,+Z;+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"P22121", "P 2 21 21", "cab", 18, -1, "-X,1/2-Y,1/2+Z;+X,-Y,-Z;-X,1/2+Y,1/2-Z"},
{"P222", "P 2 2 2", "", 16, -1, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"P2221", "P 2 2 21", "", 17, -1, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"P23", "P 2 3", "", 195, -1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"P2aa", "P 2 a a", "cab", 27, -1, "+X,-Y,-Z;1/2+X,+Y,-Z;1/2+X,-Y,+Z"},
{"P2an", "P 2 a n", "-cba", 30, -1, "+X,-Y,-Z;1/2+X,1/2+Y,-Z;1/2+X,1/2-Y,+Z"},
{"P2cb", "P 2 c b", "cab", 32, -1, "+X,-Y,-Z;+X,1/2+Y,1/2-Z;+X,1/2-Y,1/2+Z"},
{"P2cm", "P 2 c m", "-cba", 28, -1, "+X,-Y,-Z;+X,+Y,1/2-Z;+X,-Y,1/2+Z"},
{"P2mb", "P 2 m b", "cab", 28, -1, "+X,-Y,-Z;+X,1/2+Y,-Z;+X,1/2-Y,+Z"},
{"P2mm", "P 2 m m", "cab", 25, -1, "+X,-Y,-Z;+X,+Y,-Z;+X,-Y,+Z"},
{"P2na", "P 2 n a", "cab", 30, -1, "+X,-Y,-Z;1/2+X,+Y,1/2-Z;1/2+X,-Y,1/2+Z"},
{"P2nn", "P 2 n n", "cab", 34, -1, "+X,-Y,-Z;1/2+X,1/2+Y,1/2-Z;1/2+X,1/2-Y,1/2+Z"},
{"P3", "P 3", "", 143, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z"},
{"P31", "P 31", "", 144, -1, "-Y,+X-Y,1/3+Z;+Y-X,-X,2/3+Z"},
{"P3112", "P 31 1 2", "", 151, -1, "-Y,+X-Y,1/3+Z;+Y-X,-X,2/3+Z;-Y,-X,2/3-Z;+Y-X,+Y,1/3-Z;+X,+X-Y,-Z"},
{"P312", "P 3 1 2", "", 149, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"},
{"P3121", "P 31 2 1", "", 152, -1, "-Y,+X-Y,1/3+Z;+Y-X,-X,2/3+Z;-Y+X,-Y,2/3-Z;-X,-X+Y,1/3-Z;+Y,+X,-Z"},
{"P31c", "P 3 1 c", "", 159, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y,+X,1/2+Z;-Y+X,-Y,1/2+Z;-X,-X+Y,1/2+Z"},
{"P31m", "P 3 1 m", "", 157, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"},
{"P32", "P 32", "", 145, -1, "-Y,+X-Y,2/3+Z;+Y-X,-X,1/3+Z"},
{"P321", "P 3 2 1", "", 150, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"},
{"P3212", "P 32 1 2", "", 153, -1, "-Y,+X-Y,2/3+Z;+Y-X,-X,1/3+Z;-Y,-X,1/3-Z;+Y-X,+Y,2/3-Z;+X,+X-Y,-Z"},
{"P3221", "P 32 2 1", "", 154, -1, "-Y,+X-Y,2/3+Z;+Y-X,-X,1/3+Z;-Y+X,-Y,1/3-Z;-X,-X+Y,2/3-Z;+Y,+X,-Z"},
{"P3c1", "P 3 c 1", "", 158, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,1/2+Z;+X,+X-Y,1/2+Z;-Y,-X,1/2+Z"},
{"P3m1", "P 3 m 1", "", 156, -1, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"},
{"P4", "P 4", "", 75, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"},
{"P4/m", "P 4/m", "", 83, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z"},
{"P4/mbm", "P 4/m b m", "", 127, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z;1/2+Y,1/2+X,-Z;1/2-Y,1/2-X,-Z"},
{"P4/mcc", "P 4/m c c", "", 124, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z"},
{"P4/mmm", "P 4/m m m", "", 123, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P4/mnc", "P 4/m n c", "", 128, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z;1/2+Y,1/2+X,1/2-Z;1/2-Y,1/2-X,1/2-Z"},
{"P4/n", "P 4/n", "", 85, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z"},
{"P4/nbm", "P 4/n b m", "", 125, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z;+X,1/2-Y,-Z;1/2-X,+Y,-Z;+Y,+X,-Z;1/2-Y,1/2-X,-Z"},
{"P4/ncc", "P 4/n c c", "", 130, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z;1/2+X,-Y,1/2-Z;-X,1/2+Y,1/2-Z;1/2+Y,1/2+X,1/2-Z;-Y,-X,1/2-Z"},
{"P4/nmm", "P 4/n m m", "", 129, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z;1/2+X,-Y,-Z;-X,1/2+Y,-Z;1/2+Y,1/2+X,-Z;-Y,-X,-Z"},
{"P4/nnc", "P 4/n n c", "", 126, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z;+X,1/2-Y,1/2-Z;1/2-X,+Y,1/2-Z;+Y,+X,1/2-Z;1/2-Y,1/2-X,1/2-Z"},
{"P41", "P 41", "", 76, -1, "-Y,+X,1/4+Z;-X,-Y,1/2+Z;+Y,-X,3/4+Z"},
{"P41212", "P 41 21 2", "", 92, -1, "1/2-Y,1/2+X,1/4+Z;-X,-Y,1/2+Z;1/2+Y,1/2-X,3/4+Z;1/2+X,1/2-Y,3/4-Z;1/2-X,1/2+Y,1/4-Z;+Y,+X,-Z;-Y,-X,1/2-Z"},
{"P4122", "P 41 2 2", "", 91, -1, "-Y,+X,1/4+Z;-X,-Y,1/2+Z;+Y,-X,3/4+Z;+X,-Y,1/2-Z;-X,+Y,-Z;+Y,+X,3/4-Z;-Y,-X,1/4-Z"},
{"P4132", "P 41 3 2", "", 213, -1, "1/4-Y,3/4+X,1/4+Z;1/2-X,-Y,1/2+Z;1/4+Y,1/4-X,3/4+Z;1/4+X,1/4-Z,3/4+Y;1/2+X,1/2-Y,-Z;3/4+X,1/4+Z,1/4-Y;3/4+Z,1/4+Y,1/4-X;-X,1/2+Y,1/2-Z;1/4-Z,3/4+Y,1/4+X;+Z,+X,+Y;+Y,+Z,+X;1/2-Y,-Z,1/2+X;1/2+Z,1/2-X,-Y;-Y,1/2+Z,1/2-X;1/2-Z,-X,1/2+Y;-Z,1/2+X,1/2-Y;1/2+Y,1/2-Z,-X;3/4+Y,1/4+X,1/4-Z;3/4-Y,3/4-X,3/4-Z;1/4-X,3/4+Z,1/4+Y;3/4-X,3/4-Z,3/4-Y;1/4+Z,1/4-Y,3/4+X;3/4-Z,3/4-Y,3/4-X"},
{"P42", "P 42", "", 77, -1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z"},
{"P42/m", "P 42/m", "", 84, 1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z"},
{"P42/mbc", "P 42/m b c", "", 135, 1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z;1/2+Y,1/2+X,1/2-Z;1/2-Y,1/2-X,1/2-Z"},
{"P42/mcm", "P 42/m c m", "", 132, 1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P42/mmc", "P 42/m m c", "", 131, 1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z"},
{"P42/mnm", "P 42/m n m", "", 136, 1, "1/2-Y,1/2+X,1/2+Z;-X,-Y,+Z;1/2+Y,1/2-X,1/2+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P42/n", "P 42/n", "", 86, 1, "-Y,1/2+X,1/2+Z;1/2-X,1/2-Y,+Z;1/2+Y,-X,1/2+Z"},
{"P42/nbc", "P 42/n b c", "", 133, 1, "1/2-Y,+X,1/2+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,1/2+Z;+X,1/2-Y,-Z;1/2-X,+Y,-Z;+Y,+X,1/2-Z;1/2-Y,1/2-X,1/2-Z"},
{"P42/ncm", "P 42/n c m", "", 138, 1, "1/2-Y,+X,1/2+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,1/2+Z;1/2+X,-Y,1/2-Z;-X,1/2+Y,1/2-Z;1/2+Y,1/2+X,-Z;-Y,-X,-Z"},
{"P42/nmc", "P 42/n m c", "", 137, 1, "1/2-Y,+X,1/2+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,1/2+Z;1/2+X,-Y,-Z;-X,1/2+Y,-Z;1/2+Y,1/2+X,1/2-Z;-Y,-X,1/2-Z"},
{"P42/nnm", "P 42/n n n", "", 134, 1, "1/2-Y,+X,1/2+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,1/2+Z;+X,1/2-Y,1/2-Z;1/2-X,+Y,1/2-Z;+Y,+X,-Z;1/2-Y,1/2-X,-Z"},
{"P4212", "P 4 21 2", "", 90, -1, "1/2-Y,1/2+X,+Z;-X,-Y,+Z;1/2+Y,1/2-X,+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P422", "P 4 2 2", "", 89, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P42212", "P 42 21 2", "", 94, -1, "1/2-Y,1/2+X,1/2+Z;-X,-Y,+Z;1/2+Y,1/2-X,1/2+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z;+Y,+X,-Z;-Y,-X,-Z"},
{"P4222", "P 42 2 2", "", 93, -1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;+X,-Y,-Z;-X,+Y,-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z"},
{"P4232", "P 42 3 2", "", 208, -1, "1/2-Y,1/2+X,1/2+Z;-X,-Y,+Z;1/2+Y,1/2-X,1/2+Z;1/2+X,1/2-Z,1/2+Y;+X,-Y,-Z;1/2+X,1/2+Z,1/2-Y;1/2+Z,1/2+Y,1/2-X;-X,+Y,-Z;1/2-Z,1/2+Y,1/2+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;1/2+Y,1/2+X,1/2-Z;1/2-Y,1/2-X,1/2-Z;1/2-X,1/2+Z,1/2+Y;1/2-X,1/2-Z,1/2-Y;1/2+Z,1/2-Y,1/2+X;1/2-Z,1/2-Y,1/2-X"},
{"P42bc", "P 42 b c", "", 106, -1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;1/2-X,1/2+Y,+Z;1/2+X,1/2-Y,+Z;1/2-Y,1/2-X,1/2+Z;1/2+Y,1/2+X,1/2+Z"},
{"P42cm", "P 42 c m", "", 101, -1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z;-Y,-X,+Z;+Y,+X,+Z"},
{"P42mc", "P 42 m c", "", 105, -1, "-Y,+X,1/2+Z;-X,-Y,+Z;+Y,-X,1/2+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,1/2+Z;+Y,+X,1/2+Z"},
{"P42nm", "P 42 n m", "", 102, -1, "1/2-Y,1/2+X,1/2+Z;-X,-Y,+Z;1/2+Y,1/2-X,1/2+Z;1/2-X,1/2+Y,1/2+Z;1/2+X,1/2-Y,1/2+Z;-Y,-X,+Z;+Y,+X,+Z"},
{"P43", "P 43", "", 78, -1, "-Y,+X,3/4+Z;-X,-Y,1/2+Z;+Y,-X,1/4+Z"},
{"P432", "P 4 3 2", "", 207, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"P43212", "P 43 21 2", "", 96, -1, "1/2-Y,1/2+X,3/4+Z;-X,-Y,1/2+Z;1/2+Y,1/2-X,1/4+Z;1/2+X,1/2-Y,1/4-Z;1/2-X,1/2+Y,3/4-Z;+Y,+X,-Z;-Y,-X,1/2-Z"},
{"P4322", "P 43 2 2", "", 95, -1, "-Y,+X,3/4+Z;-X,-Y,1/2+Z;+Y,-X,1/4+Z;+X,-Y,1/2-Z;-X,+Y,-Z;+Y,+X,1/4-Z;-Y,-X,3/4-Z"},
{"P4332", "P 43 3 2", "", 212, -1, "3/4-Y,1/4+X,3/4+Z;1/2-X,-Y,1/2+Z;3/4+Y,3/4-X,1/4+Z;3/4+X,3/4-Z,1/4+Y;1/2+X,1/2-Y,-Z;1/4+X,3/4+Z,3/4-Y;1/4+Z,3/4+Y,3/4-X;-X,1/2+Y,1/2-Z;3/4-Z,1/4+Y,3/4+X;+Z,+X,+Y;+Y,+Z,+X;1/2-Y,-Z,1/2+X;1/2+Z,1/2-X,-Y;-Y,1/2+Z,1/2-X;1/2-Z,-X,1/2+Y;-Z,1/2+X,1/2-Y;1/2+Y,1/2-Z,-X;1/4+Y,3/4+X,3/4-Z;1/4-Y,1/4-X,1/4-Z;3/4-X,1/4+Z,3/4+Y;1/4-X,1/4-Z,1/4-Y;3/4+Z,3/4-Y,1/4+X;1/4-Z,1/4-Y,1/4-X"},
{"P4bm", "P 4 b m", "", 100, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;1/2-X,1/2+Y,+Z;1/2+X,1/2-Y,+Z;1/2-Y,1/2-X,+Z;1/2+Y,1/2+X,+Z"},
{"P4cc", "P 4 c c", "", 103, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z;-Y,-X,1/2+Z;+Y,+X,1/2+Z"},
{"P4mm", "P 4 m m", "", 99, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;-X,+Y,+Z;+X,-Y,+Z;-Y,-X,+Z;+Y,+X,+Z"},
{"P4nc", "P 4 n c", "", 104, -1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;1/2-X,1/2+Y,1/2+Z;1/2+X,1/2-Y,1/2+Z;1/2-Y,1/2-X,1/2+Z;1/2+Y,1/2+X,1/2+Z"},
{"P6", "P 6", "", 168, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z"},
{"P6/m", "P 6/m", "", 175, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z"},
{"P6/mcc", "P 6/m c c", "", 192, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,1/2-Z;-X,-X+Y,1/2-Z;+Y,+X,1/2-Z;-Y,-X,1/2-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,1/2-Z"},
{"P6/mmm", "P 6/m m m", "", 191, 1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"},
{"P61", "P 61", "", 169, -1, "-Y+X,+X,1/6+Z;-Y,+X-Y,1/3+Z;-X,-Y,1/2+Z;+Y-X,-X,2/3+Z;+Y,-X+Y,5/6+Z"},
{"P6122", "P 61 2 2", "", 178, -1, "-Y+X,+X,1/6+Z;-Y,+X-Y,1/3+Z;-X,-Y,1/2+Z;+Y-X,-X,2/3+Z;+Y,-X+Y,5/6+Z;-Y+X,-Y,-Z;-X,-X+Y,2/3-Z;+Y,+X,1/3-Z;-Y,-X,5/6-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,1/6-Z"},
{"P62", "P 62", "", 171, -1, "-Y+X,+X,1/3+Z;-Y,+X-Y,2/3+Z;-X,-Y,+Z;+Y-X,-X,1/3+Z;+Y,-X+Y,2/3+Z"},
{"P622", "P 6 2 2", "", 177, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"},
{"P6222", "P 62 2 2", "", 180, -1, "-Y+X,+X,1/3+Z;-Y,+X-Y,2/3+Z;-X,-Y,+Z;+Y-X,-X,1/3+Z;+Y,-X+Y,2/3+Z;-Y+X,-Y,-Z;-X,-X+Y,1/3-Z;+Y,+X,2/3-Z;-Y,-X,2/3-Z;+Y-X,+Y,-Z;+X,+X-Y,1/3-Z"},
{"P63", "P 63", "", 173, -1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z"},
{"P63/m", "P 63/m", "", 176, 1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z"},
{"P63/mcm", "P 63/m c m", "", 193, 1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z;-Y+X,-Y,1/2-Z;-X,-X+Y,1/2-Z;+Y,+X,1/2-Z;-Y,-X,-Z;+Y-X,+Y,-Z;+X,+X-Y,-Z"},
{"P63/mmc", "P 63/m m c", "", 194, 1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,1/2-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,1/2-Z"},
{"P6322", "P 63 2 2", "", 182, -1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z;-Y,-X,1/2-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,1/2-Z"},
{"P63cm", "P 63 c m", "", 185, -1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z;+Y-X,+Y,1/2+Z;+X,+X-Y,1/2+Z;-Y,-X,1/2+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"},
{"P63mc", "P 63 m c", "", 186, -1, "-Y+X,+X,1/2+Z;-Y,+X-Y,+Z;-X,-Y,1/2+Z;+Y-X,-X,+Z;+Y,-X+Y,1/2+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z;+Y,+X,1/2+Z;-Y+X,-Y,1/2+Z;-X,-X+Y,1/2+Z"},
{"P64", "P 64", "", 172, -1, "-Y+X,+X,2/3+Z;-Y,+X-Y,1/3+Z;-X,-Y,+Z;+Y-X,-X,2/3+Z;+Y,-X+Y,1/3+Z"},
{"P6422", "P 64 2 2", "", 181, -1, "-Y+X,+X,2/3+Z;-Y,+X-Y,1/3+Z;-X,-Y,+Z;+Y-X,-X,2/3+Z;+Y,-X+Y,1/3+Z;-Y+X,-Y,-Z;-X,-X+Y,2/3-Z;+Y,+X,1/3-Z;-Y,-X,1/3-Z;+Y-X,+Y,-Z;+X,+X-Y,2/3-Z"},
{"P65", "P 65", "", 170, -1, "-Y+X,+X,5/6+Z;-Y,+X-Y,2/3+Z;-X,-Y,1/2+Z;+Y-X,-X,1/3+Z;+Y,-X+Y,1/6+Z"},
{"P6522", "P 65 2 2", "", 179, -1, "-Y+X,+X,5/6+Z;-Y,+X-Y,2/3+Z;-X,-Y,1/2+Z;+Y-X,-X,1/3+Z;+Y,-X+Y,1/6+Z;-Y+X,-Y,-Z;-X,-X+Y,1/3-Z;+Y,+X,2/3-Z;-Y,-X,1/6-Z;+Y-X,+Y,1/2-Z;+X,+X-Y,5/6-Z"},
{"P6cc", "P 6 c c", "", 184, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;+Y-X,+Y,1/2+Z;+X,+X-Y,1/2+Z;-Y,-X,1/2+Z;+Y,+X,1/2+Z;-Y+X,-Y,1/2+Z;-X,-X+Y,1/2+Z"},
{"P6mm", "P 6 m m", "", 183, -1, "-Y+X,+X,+Z;-Y,+X-Y,+Z;-X,-Y,+Z;+Y-X,-X,+Z;+Y,-X+Y,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z;+Y,+X,+Z;-Y+X,-Y,+Z;-X,-X+Y,+Z"},
{"Pa", "P 1 a 1", "b3", 7, -1, "1/2+X,-Y,+Z"},
{"Pa-3", "P a -3", "", 205, 1, "+Z,+X,+Y;+Y,+Z,+X;1/2-Y,-Z,1/2+X;1/2+Z,1/2-X,-Y;-Y,1/2+Z,1/2-X;1/2-Z,-X,1/2+Y;-Z,1/2+X,1/2-Y;1/2+Y,1/2-Z,-X;1/2-X,-Y,1/2+Z;1/2+X,1/2-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Pb11", "P b 1 1", "a1", 7, -1, "-X,1/2+Y,+Z"},
{"Pb21a", "P b 21 a", "a-cb", 29, -1, "-X,1/2+Y,-Z;1/2+X,+Y,-Z;1/2-X,1/2+Y,+Z"},
{"Pb21m", "P b 21 m", "bca", 26, -1, "-X,1/2+Y,-Z;+X,+Y,-Z;-X,1/2+Y,+Z"},
{"Pb2b", "P b 2 b", "bca", 27, -1, "-X,+Y,-Z;+X,1/2+Y,-Z;-X,1/2+Y,+Z"},
{"Pb2n", "P b 2 n", "bca", 30, -1, "-X,+Y,-Z;1/2+X,1/2+Y,-Z;1/2-X,1/2+Y,+Z"},
{"Pba2", "P b a 2", "", 32, -1, "-X,-Y,+Z;1/2-X,1/2+Y,+Z;1/2+X,1/2-Y,+Z"},
{"Pbaa", "P b a a", "cab", 54, 1, "1/2-X,-Y,+Z;+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z"},
{"Pbab", "P b a b", "a-cb", 54, 1, "-X,1/2-Y,+Z;1/2+X,1/2-Y,-Z;1/2-X,+Y,-Z"},
{"Pbam", "P b a m", "", 55, 1, "-X,-Y,+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,-Z"},
{"Pban", "P b a n", "", 50, 1, "1/2-X,1/2-Y,+Z;+X,1/2-Y,-Z;1/2-X,+Y,-Z"},
{"Pbc21", "P b c 21", "ba-c", 29, -1, "-X,-Y,1/2+Z;-X,1/2+Y,+Z;+X,1/2-Y,1/2+Z"},
{"Pbca", "P b c a", "", 61, 1, "1/2-X,-Y,1/2+Z;1/2+X,1/2-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Pbcb", "P b c b", "bca", 54, 1, "-X,1/2-Y,1/2+Z;+X,1/2-Y,-Z;-X,+Y,1/2-Z"},
{"Pbcm", "P b c m", "", 57, 1, "-X,-Y,1/2+Z;+X,1/2-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Pbcn", "P b c n", "", 60, 1, "1/2-X,1/2-Y,1/2+Z;1/2+X,1/2-Y,-Z;-X,+Y,1/2-Z"},
{"Pbm2", "P b m 2", "ba-c", 28, -1, "-X,-Y,+Z;-X,1/2+Y,+Z;+X,1/2-Y,+Z"},
{"Pbma", "P b m a", "bca", 57, 1, "1/2-X,-Y,+Z;1/2+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"Pbmb", "P b m b", "bca", 49, 1, "-X,1/2-Y,+Z;+X,1/2-Y,-Z;-X,+Y,-Z"},
{"Pbmm", "P b m m", "cab", 51, 1, "-X,-Y,+Z;+X,1/2-Y,-Z;-X,1/2+Y,-Z"},
{"Pbmn", "P b m n", "cab", 53, 1, "1/2-X,1/2-Y,+Z;1/2+X,1/2-Y,-Z;-X,+Y,-Z"},
{"Pbn21", "P b n 21", "ba-c", 33, -1, "-X,-Y,1/2+Z;1/2-X,1/2+Y,+Z;1/2+X,1/2-Y,1/2+Z"},
{"Pbna", "P b n a", "bca", 60, 1, "1/2-X,-Y,1/2+Z;+X,1/2-Y,-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pbnb", "P b n b", "bca", 56, 1, "-X,1/2-Y,1/2+Z;1/2+X,1/2-Y,-Z;1/2-X,+Y,1/2-Z"},
{"Pbnm", "P b n m", "cab", 62, 1, "-X,-Y,1/2+Z;1/2+X,1/2-Y,-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pbnn", "P b n n", "cab", 52, 1, "1/2-X,1/2-Y,1/2+Z;+X,1/2-Y,-Z;1/2-X,+Y,1/2-Z"},
{"Pc", "P 1 c 1", "b1", 7, -1, "+X,-Y,1/2+Z"},
{"Pc11", "P c 1 1", "a3", 7, -1, "-X,+Y,1/2+Z"},
{"Pc21b", "P c 21 b", "bca", 29, -1, "-X,1/2+Y,-Z;+X,1/2+Y,1/2-Z;-X,+Y,1/2+Z"},
{"Pc21n", "P c 21 n", "bca", 33, -1, "-X,1/2+Y,-Z;1/2+X,1/2+Y,1/2-Z;1/2-X,+Y,1/2+Z"},
{"Pc2a", "P c 2 a", "bca", 32, -1, "-X,+Y,-Z;1/2+X,+Y,1/2-Z;1/2-X,+Y,1/2+Z"},
{"Pc2m", "P c 2 m", "bca", 28, -1, "-X,+Y,-Z;+X,+Y,1/2-Z;-X,+Y,1/2+Z"},
{"Pca21", "P c a 21", "", 29, -1, "-X,-Y,1/2+Z;1/2-X,+Y,1/2+Z;1/2+X,-Y,+Z"},
{"Pcaa", "P c a a", "-cba", 54, 1, "1/2-X,-Y,1/2+Z;+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Pcab", "P c a b", "ba-c", 61, 1, "-X,1/2-Y,1/2+Z;1/2+X,-Y,1/2-Z;1/2-X,1/2+Y,-Z"},
{"Pcam", "P c a m", "ba-c", 57, 1, "-X,-Y,1/2+Z;1/2+X,-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Pcan", "P c a n", "ba-c", 60, 1, "1/2-X,1/2-Y,1/2+Z;+X,-Y,1/2-Z;1/2-X,1/2+Y,-Z"},
{"Pcc2", "P c c 2", "", 27, -1, "-X,-Y,+Z;-X,+Y,1/2+Z;+X,-Y,1/2+Z"},
{"Pcca", "P c c a", "", 54, 1, "1/2-X,-Y,+Z;1/2+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Pccb", "P c c b", "ba-c", 54, 1, "-X,1/2-Y,+Z;+X,-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Pccm", "P c c m", "", 49, 1, "-X,-Y,+Z;+X,-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Pccn", "P c c n", "", 56, 1, "1/2-X,1/2-Y,+Z;1/2+X,-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Pcm21", "P c m 21", "ba-c", 26, -1, "-X,-Y,1/2+Z;-X,+Y,1/2+Z;+X,-Y,+Z"},
{"Pcma", "P c m a", "bca", 55, 1, "1/2-X,-Y,1/2+Z;1/2+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Pcmb", "P c m b", "a-cb", 57, 1, "-X,1/2-Y,1/2+Z;+X,-Y,1/2-Z;-X,1/2+Y,-Z"},
{"Pcmm", "P c m m", "-cba", 51, 1, "-X,-Y,1/2+Z;+X,-Y,1/2-Z;-X,+Y,-Z"},
{"Pcmn", "P c m n", "-cba", 62, 1, "1/2-X,1/2-Y,1/2+Z;1/2+X,-Y,1/2-Z;-X,1/2+Y,-Z"},
{"Pcn2", "P c n 2", "ba-c", 30, -1, "-X,-Y,+Z;1/2-X,+Y,1/2+Z;1/2+X,-Y,1/2+Z"},
{"Pcna", "P c n a", "bca", 50, 1, "1/2-X,-Y,+Z;+X,-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Pcnb", "P c n b", "a-cb", 60, 1, "-X,1/2-Y,+Z;1/2+X,-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pcnm", "P c n m", "-cba", 53, 1, "-X,-Y,+Z;1/2+X,-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Pcnn", "P c n n", "-cba", 52, 1, "1/2-X,1/2-Y,+Z;+X,-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pm", "P 1 m 1", "b", 6, -1, "+X,-Y,+Z"},
{"Pm-3", "P m -3", "", 200, 1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Pm-3m", "P m -3 m", "", 221, 1, "-Y,+X,+Z;-X,-Y,+Z;+Y,-X,+Z;+X,-Z,+Y;+X,-Y,-Z;+X,+Z,-Y;+Z,+Y,-X;-X,+Y,-Z;-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;+Y,+X,-Z;-Y,-X,-Z;-X,+Z,+Y;-X,-Z,-Y;+Z,-Y,+X;-Z,-Y,-X"},
{"Pm-3n", "P m -3 n", "", 223, 1, "1/2-Y,1/2+X,1/2+Z;-X,-Y,+Z;1/2+Y,1/2-X,1/2+Z;1/2+X,1/2-Z,1/2+Y;+X,-Y,-Z;1/2+X,1/2+Z,1/2-Y;1/2+Z,1/2+Y,1/2-X;-X,+Y,-Z;1/2-Z,1/2+Y,1/2+X;+Z,+X,+Y;+Y,+Z,+X;-Y,-Z,+X;+Z,-X,-Y;-Y,+Z,-X;-Z,-X,+Y;-Z,+X,-Y;+Y,-Z,-X;1/2+Y,1/2+X,1/2-Z;1/2-Y,1/2-X,1/2-Z;1/2-X,1/2+Z,1/2+Y;1/2-X,1/2-Z,1/2-Y;1/2+Z,1/2-Y,1/2+X;1/2-Z,1/2-Y,1/2-X"},
{"Pm11", "P m 1 1", "a", 6, -1, "-X,+Y,+Z"},
{"Pm21b", "P m 21 b", "a-cb", 26, -1, "-X,1/2+Y,-Z;+X,1/2+Y,-Z;-X,+Y,+Z"},
{"Pm21n", "P m 21 n", "a-cb", 31, -1, "1/2-X,1/2+Y,-Z;1/2+X,1/2+Y,-Z;-X,+Y,+Z"},
{"Pm2a", "P m 2 a", "a-cb", 28, -1, "-X,+Y,-Z;1/2+X,+Y,-Z;1/2-X,+Y,+Z"},
{"Pm2m", "P m 2 m", "bca", 25, -1, "-X,+Y,-Z;+X,+Y,-Z;-X,+Y,+Z"},
{"Pma2", "P m a 2", "", 28, -1, "-X,-Y,+Z;1/2-X,+Y,+Z;1/2+X,-Y,+Z"},
{"Pmaa", "P m a a", "cab", 49, 1, "1/2-X,-Y,+Z;+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Pmab", "P m a b", "-cba", 57, 1, "-X,1/2-Y,+Z;1/2+X,-Y,-Z;1/2-X,1/2+Y,-Z"},
{"Pmam", "P m a m", "a-cb", 51, 1, "-X,-Y,+Z;1/2+X,-Y,-Z;1/2-X,+Y,-Z"},
{"Pman", "P m a n", "a-cb", 53, 1, "1/2-X,1/2-Y,+Z;+X,-Y,-Z;1/2-X,1/2+Y,-Z"},
{"Pmc21", "P m c 21", "", 26, -1, "-X,-Y,1/2+Z;-X,+Y,+Z;+X,-Y,1/2+Z"},
{"Pmca", "P m c a", "cab", 57, 1, "1/2-X,-Y,1/2+Z;1/2+X,-Y,-Z;-X,+Y,1/2-Z"},
{"Pmcb", "P m c b", "cab", 55, 1, "-X,1/2-Y,1/2+Z;+X,-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Pmcm", "P m c m", "bca", 51, 1, "-X,-Y,1/2+Z;+X,-Y,-Z;-X,+Y,1/2-Z"},
{"Pmcn", "P m c n", "bca", 62, 1, "1/2-X,1/2-Y,1/2+Z;1/2+X,-Y,-Z;-X,1/2+Y,1/2-Z"},
{"Pmm2", "P m m 2", "", 25, -1, "-X,-Y,+Z;-X,+Y,+Z;+X,-Y,+Z"},
{"Pmma", "P m m a", "", 51, 1, "1/2-X,-Y,+Z;1/2+X,-Y,-Z;-X,+Y,-Z"},
{"Pmmb", "P m m b", "ba-c", 51, 1, "-X,1/2-Y,+Z;+X,-Y,-Z;-X,1/2+Y,-Z"},
{"Pmmm", "P m m m", "", 47, 1, "-X,-Y,+Z;+X,-Y,-Z;-X,+Y,-Z"},
{"Pmmn", "P m m n", "", 59, 1, "1/2-X,1/2-Y,+Z;1/2+X,-Y,-Z;-X,1/2+Y,-Z"},
{"Pmn21", "P m n 21", "", 31, -1, "1/2-X,-Y,1/2+Z;-X,+Y,+Z;1/2+X,-Y,1/2+Z"},
{"Pmna", "P m n a", "", 53, 1, "1/2-X,-Y,1/2+Z;+X,-Y,-Z;1/2-X,+Y,1/2-Z"},
{"Pmnb", "P m n b", "ba-c", 62, 1, "-X,1/2-Y,1/2+Z;1/2+X,-Y,-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pmnm", "P m n m", "bca", 59, 1, "-X,-Y,1/2+Z;1/2+X,-Y,-Z;1/2-X,+Y,1/2-Z"},
{"Pmnn", "P m n n", "cab", 58, 1, "1/2-X,1/2-Y,1/2+Z;+X,-Y,-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pn", "P 1 n 1", "b2", 7, -1, "1/2+X,-Y,1/2+Z"},
{"Pn-3", "P n -3", "", 201, 1, "+Z,+X,+Y;+Y,+Z,+X;1/2-Y,1/2-Z,+X;+Z,1/2-X,1/2-Y;1/2-Y,+Z,1/2-X;1/2-Z,1/2-X,+Y;1/2-Z,+X,1/2-Y;+Y,1/2-Z,1/2-X;1/2-X,1/2-Y,+Z;+X,1/2-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Pn-3m", "P n -3 m", "", 224, 1, "-Y,1/2+X,1/2+Z;1/2-X,1/2-Y,+Z;1/2+Y,-X,1/2+Z;1/2+X,-Z,1/2+Y;+X,1/2-Y,1/2-Z;1/2+X,1/2+Z,-Y;1/2+Z,1/2+Y,-X;1/2-X,+Y,1/2-Z;-Z,1/2+Y,1/2+X;+Z,+X,+Y;+Y,+Z,+X;1/2-Y,1/2-Z,+X;+Z,1/2-X,1/2-Y;1/2-Y,+Z,1/2-X;1/2-Z,1/2-X,+Y;1/2-Z,+X,1/2-Y;+Y,1/2-Z,1/2-X;1/2+Y,1/2+X,-Z;-Y,-X,-Z;-X,1/2+Z,1/2+Y;-X,-Z,-Y;1/2+Z,-Y,1/2+X;-Z,-Y,-X"},
{"Pn-3n", "P n -3 n", "", 222, 1, "1/2-Y,+X,+Z;1/2-X,1/2-Y,+Z;+Y,1/2-X,+Z;+X,1/2-Z,+Y;+X,1/2-Y,1/2-Z;+X,+Z,1/2-Y;+Z,+Y,1/2-X;1/2-X,+Y,1/2-Z;1/2-Z,+Y,+X;+Z,+X,+Y;+Y,+Z,+X;1/2-Y,1/2-Z,+X;+Z,1/2-X,1/2-Y;1/2-Y,+Z,1/2-X;1/2-Z,1/2-X,+Y;1/2-Z,+X,1/2-Y;+Y,1/2-Z,1/2-X;+Y,+X,1/2-Z;1/2-Y,1/2-X,1/2-Z;1/2-X,+Z,+Y;1/2-X,1/2-Z,1/2-Y;+Z,1/2-Y,+X;1/2-Z,1/2-Y,1/2-X"},
{"Pn11", "P n 1 1", "a2", 7, -1, "-X,1/2+Y,1/2+Z"},
{"Pn21a", "P n 21 a", "a-cb", 33, -1, "-X,1/2+Y,-Z;1/2+X,+Y,1/2-Z;1/2-X,1/2+Y,1/2+Z"},
{"Pn21m", "P n 21 m", "bca", 31, -1, "-X,1/2+Y,1/2-Z;+X,+Y,-Z;-X,1/2+Y,1/2+Z"},
{"Pn2b", "P n 2 b", "a-cb", 30, -1, "-X,+Y,-Z;+X,1/2+Y,1/2-Z;-X,1/2+Y,1/2+Z"},
{"Pn2n", "P n 2 n", "bca", 34, -1, "-X,+Y,-Z;1/2+X,1/2+Y,1/2-Z;1/2-X,1/2+Y,1/2+Z"},
{"Pna21", "P n a 21", "", 33, -1, "-X,-Y,1/2+Z;1/2-X,1/2+Y,1/2+Z;1/2+X,1/2-Y,+Z"},
{"Pnaa", "P n a a", "cab", 56, 1, "1/2-X,-Y,1/2+Z;+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,-Z"},
{"Pnab", "P n a b", "-cba", 60, 1, "-X,1/2-Y,1/2+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Pnam", "P n a m", "a-cb", 62, 1, "-X,-Y,1/2+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,-Z"},
{"Pnan", "P n a n", "a-cb", 52, 1, "1/2-X,1/2-Y,1/2+Z;+X,1/2-Y,1/2-Z;1/2-X,+Y,-Z"},
{"Pnc2", "P n c 2", "", 30, -1, "-X,-Y,+Z;-X,1/2+Y,1/2+Z;+X,1/2-Y,1/2+Z"},
{"Pnca", "P n c a", "cab", 60, 1, "1/2-X,-Y,+Z;1/2+X,1/2-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Pncb", "P n c b", "cab", 50, 1, "-X,1/2-Y,+Z;+X,1/2-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Pncm", "P n c m", "bca", 53, 1, "-X,-Y,+Z;+X,1/2-Y,1/2-Z;-X,1/2+Y,1/2-Z"},
{"Pncn", "P n c n", "bca", 52, 1, "1/2-X,1/2-Y,+Z;1/2+X,1/2-Y,1/2-Z;-X,+Y,1/2-Z"},
{"Pnm21", "P n m 21", "ba-c", 31, -1, "-X,1/2-Y,1/2+Z;-X,1/2+Y,1/2+Z;+X,-Y,+Z"},
{"Pnma", "P n m a", "", 62, 1, "1/2-X,-Y,1/2+Z;1/2+X,1/2-Y,1/2-Z;-X,1/2+Y,-Z"},
{"Pnmb", "P n m b", "ba-c", 53, 1, "-X,1/2-Y,1/2+Z;+X,1/2-Y,1/2-Z;-X,+Y,-Z"},
{"Pnmm", "P n m m", "cab", 59, 1, "-X,-Y,1/2+Z;+X,1/2-Y,1/2-Z;-X,1/2+Y,-Z"},
{"Pnmn", "P n m n", "bca", 58, 1, "1/2-X,1/2-Y,1/2+Z;1/2+X,1/2-Y,1/2-Z;-X,+Y,-Z"},
{"Pnn2", "P n n 2", "", 34, -1, "-X,-Y,+Z;1/2-X,1/2+Y,1/2+Z;1/2+X,1/2-Y,1/2+Z"},
{"Pnna", "P n n a", "", 52, 1, "1/2-X,-Y,+Z;+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pnnb", "P n n b", "ba-c", 52, 1, "-X,1/2-Y,+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"Pnnm", "P n n m", "", 58, 1, "-X,-Y,+Z;1/2+X,1/2-Y,1/2-Z;1/2-X,1/2+Y,1/2-Z"},
{"Pnnn", "P n n n", "", 48, 1, "1/2-X,1/2-Y,+Z;+X,1/2-Y,1/2-Z;1/2-X,+Y,1/2-Z"},
{"R-3", "R -3", "H", 148, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z"},
{"R-3:r", "R -3:r", "R", 148, 1, "+Z,+X,+Y;+Y,+Z,+X"},
{"R-3c", "R -3 c", "H", 167, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,1/2-Z;-X,-X+Y,1/2-Z;+Y,+X,1/2-Z"},
{"R-3c:r", "R -3 c:r", "R", 167, 1, "+Z,+X,+Y;+Y,+Z,+X;1/2-Y,1/2-X,1/2-Z;1/2-X,1/2-Z,1/2-Y;1/2-Z,1/2-Y,1/2-X"},
{"R-3m", "R -3 m", "H", 166, 3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"},
{"R-3m:r", "R -3 m:r", "R", 166, 1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-X,-Z;-X,-Z,-Y;-Z,-Y,-X"},
{"R3", "R 3", "H", 146, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z"},
{"R32", "R 3 2", "H", 155, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;-Y+X,-Y,-Z;-X,-X+Y,-Z;+Y,+X,-Z"},
{"R32:r", "R 3 2:r", "R", 155, -1, "+Z,+X,+Y;+Y,+Z,+X;-Y,-X,-Z;-X,-Z,-Y;-Z,-Y,-X"},
{"R3:r", "R 3:r", "R", 146, -1, "+Z,+X,+Y;+Y,+Z,+X"},
{"R3c", "R 3 c", "H", 161, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,1/2+Z;+X,+X-Y,1/2+Z;-Y,-X,1/2+Z"},
{"R3c:r", "R 3 c:r", "R", 161, -1, "+Z,+X,+Y;+Y,+Z,+X;1/2+Y,1/2+X,1/2+Z;1/2+X,1/2+Z,1/2+Y;1/2+Z,1/2+Y,1/2+X"},
{"R3m", "R 3 m", "H", 160, -3, "-Y,+X-Y,+Z;+Y-X,-X,+Z;+Y-X,+Y,+Z;+X,+X-Y,+Z;-Y,-X,+Z"},
{"R3m:r", "R 3 m:r", "R", 160, -1, "+Z,+X,+Y;+Y,+Z,+X;+Y,+X,+Z;+X,+Z,+Y;+Z,+Y,+X"}
};
///////////////////////////////////////////////////////////////////////////////////////////////////

TCLattice::TCLattice(int latt)  {
  this->Latt = latt;
  switch( abs(Latt) )  {
   case 1:
    Name = "Primitive";
    Symbol = 'P';
    break;
   case 2:      // Body Centered (I)
    Name = "Body Centered";
    Symbol = 'I';
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0.5);
    break;
   case 3:      // R Centered
    Name = "R Centered";
    Symbol = 'R';
    Vectors.AddNew<double,double,double>(2./3., 1./3., 1./3.);
    Vectors.AddNew<double,double,double>(1./3., 2./3., 2./3.);
    break;
   case 8:      // S Centered
    Name = "S Centered";
    Symbol = 'S';
    Vectors.AddNew<double,double,double>(1./3., 1./3., 2./3.);
    Vectors.AddNew<double,double,double>(2./3., 2./3., 1./3.);
    break;
   case 9:      // T Centered
    Name = "T Centered";
    Symbol = 'T';
    Vectors.AddNew<double,double,double>(1./3., 2./3., 1./3.);
    Vectors.AddNew<double,double,double>(2./3., 1./3., 2./3.);
    break;
   case 10:      // D Centered
    Name = "D Centered";
    Symbol = 'D';
    Vectors.AddNew<double,double,double>(1./3., 1./3., 1./3.);
    Vectors.AddNew<double,double,double>(2./3., 2./3., 2./3.);
    break;
   case 11:      // H Centered
    Name = "H Centered";
    Symbol = 'H';
    Vectors.AddNew<double,double,double>(2./3., 1./3., 0);
    Vectors.AddNew<double,double,double>(1./3., 2./3., 0);
    break;
   case 4:      // Face Centered (F)
    Name = "Face Centered";
    Symbol = 'F';
    Vectors.AddNew<double,double,double>(0, 0.5, 0.5);
    Vectors.AddNew<double,double,double>(0.5, 0, 0.5);
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0);
    break;
   case 5:      // A Centered (A)
    Name = "A Centered";
    Symbol = 'A';
    Vectors.AddNew<double,double,double>(0, 0.5, 0.5);
    break;
   case 6:      // B Centered (B)
    Name = "B Centered";
    Symbol = 'B';
    Vectors.AddNew<double,double,double>(0.5, 0, 0.5);
    break;
   case 7:      // C Centered (C);
    Name = "C Centered";
    Symbol = 'C';
    Vectors.AddNew<double,double,double>(0.5, 0.5, 0);
    break;
   default:
    throw new TIncorrectLattExc(__OlxSourceInfo, Latt);
  }
}
//..............................................................................
mat3d TCLattice::FromPrimitive(int latt)  {
  switch( latt )  {
  case 1:  return mat3d().I();
  case 2:  return mat3d(0, 1, 1, 0, 1, 0);
  case 5:  return mat3d(-1, 0, 0, -1, 1, 1);
  case 6:  return mat3d(-1, 0, 1, -1, 0, 1);
  case 7:  return mat3d(1, 1, 0, -1, 1, 0, 0, 0, 1).Transpose();
  //case 8:  return 'S';
  case 9:  return mat3d(-1, 1, 0, 0, -1, -1, -1, -1, 1).Transpose();
  case 10: return mat3d(1, 0, 1, 0, 1, 1, -1, -1, 1).Transpose();
  case 11:  return mat3d(1, -1, 0, 1, 2, 0, 0, 0, 1).Transpose();
  case 3:  return mat3d(1, -1, 0, 0, 1, -1, 1, 1, 1).Transpose();
  case 4:  return mat3d(-1, 1, 1, -1, 1, -1);
  default:
    throw TIncorrectLattExc(__OlxSourceInfo, latt);
  }
}
//..............................................................................
//..............................................................................
TSpaceGroup::TSpaceGroup(const smatd_list &matrices,
  const olxstr& Name, const olxstr& FullName,
  const olxstr& Axis, int Number, TCLattice& Latt, bool CentroSymmetric,
  const olxstr hall_symbol)
  : Matrices(matrices),
    Name(Name),
    FullName(FullName),
    Axis(Axis),
    Number(Number),
    Latt(Latt),
    CentroSymmetric(CentroSymmetric),
    Translations(false),
    BravaisLattice(NULL),
    LaueClass(NULL),
    PointGroup(NULL)
{
  if (hall_symbol.IsEmpty()) {
    HallSymbol = HallSymbol::Evaluate(
      GetLattice().GetLatt()*(CentroSymmetric ? 1 : -1), Matrices);
  }
  else
    HallSymbol = hall_symbol;
}
//..............................................................................
bool TSpaceGroup::_checkTDS(const vec3d& t1, const vec3d& t2)  {
  for( size_t i=0; i < 3; i++ )  {
    if( t1[i] == 0 )  // check only for necessary translations
      continue;
    const double diff = t1[i] - t2[i];
    const double summ = t1[i] + t2[i];
    if( olx_abs(diff-olx_round_t<int>(diff)) > 0.01 &&
      olx_abs(summ-olx_round_t<int>(summ)) > 0.01 )
    {
      return false;
    }
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::_checkTD(const vec3d& t1, const vec3d& t2)  {
  for( size_t i=0; i < 3; i++ )  {
    if( t1[i] == 0 )  // check only for necessary translations
      continue;
    const double diff = t1[i] - t2[i];
    if( olx_abs(diff-olx_round_t<int>(diff)) > 0.01 )
      return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::ContainsElement(TSymmElement* symme)  {
  if( MatrixCount() != symme->MatrixCount() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( !equal )  continue;
      m1.SetRawId(1);
      found = true;
      break;
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::ContainsGroup(TSpaceGroup* symme)  {
  if( MatrixCount() != symme->MatrixCount() )  return false;
  if( IsCentrosymmetric() != symme->IsCentrosymmetric() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    const smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      if( m1.r == m.r )  {
        m1.SetRawId(1);
        found = true;
        break;
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::ContainsElement(const smatd_list& matrices, TSymmElement* symme) {
  if( matrices.Count() < symme->MatrixCount() )  return false;
  for( size_t i=0; i  < matrices.Count(); i++ )
    matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    const smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < matrices.Count(); j++ )  {
      smatd& m1 = matrices[j];
      if( m1.GetId() != 0 )  continue;
      if( m.r == m1.r && _checkTDS(m.t, m1.t) )  {
        found = true;
        m1.SetRawId(1);
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::IsSubElement(TSpaceGroup* symme) const {
  if( MatrixCount() < symme->MatrixCount() )  return false;
  for( size_t i=0; i  < MatrixCount(); i++ )
    Matrices[i].SetRawId(0);
  for( size_t i=0; i  < symme->MatrixCount(); i++ )  {
    bool found = false;
    const smatd& m = symme->GetMatrix(i);
    for( size_t j=0; j  < MatrixCount(); j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      size_t matrixElements = 0;
      size_t signChanges = 0;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m1.r[k][l] != 0 )  matrixElements++;
          if( m.r[k][l] != m1.r[k][l] )  {
            if( olx_abs(m.r[k][l]) != olx_abs(m1.r[k][l]) )  {
              equal = false;
              break;
            }
            else  signChanges++;
          }
        }
        if( !equal )  break;
      }
      // have to consider sign change only for centrisymmetric groups
      if( IsCentrosymmetric() )  {
        if( !equal || ( (signChanges != matrixElements) && (signChanges != 0)) )
          continue;
      }
      else  {
        if( !equal || (signChanges != 0) )
          continue;
      }
      if( _checkTD(m.t, m1.t) )  {
        found = true;
        m1.SetRawId(1);
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
void TSpaceGroup::SplitIntoElements(TPtrList<TSymmElement>& ref,
  TPtrList<TSymmElement>& sgElm)
{
  smatd_list mat;
  GetMatrices(mat, mattAll^mattIdentity);
  SplitIntoElements(mat, ref, sgElm);
}
void TSpaceGroup::SplitIntoElements(smatd_list& mat,
  TPtrList<TSymmElement>& ref, TPtrList<TSymmElement>& sgElm)
{
  for( size_t i=0; i < mat.Count(); i++ )
    mat[i].SetRawId(0);
  for( size_t i=0; i < ref.Count(); i++ )  {
    ref[i]->SetTag(0);
    if( mat.Count() < ref[i]->MatrixCount() )  continue;
    bool elm_found = true;
    for( size_t j=0; j < ref[i]->MatrixCount(); j++ )  {
      bool found = false;
      const smatd& m = ref[i]->GetMatrix(j);
      for( size_t k=0; k < mat.Count(); k++ )  {
        const smatd& m1 = mat[k];
        if( m.r == m1.r && _checkTDS(m.t, m1.t) )  {
          found = true;
          break;
        }
      }
      if( !found )  {
        elm_found = false;
        break;
      }
    }
    if( elm_found )  {
      sgElm.Add( ref[i] );
      ref[i]->SetTag(1);
    }
  }
  // analyse the result
  for( size_t i=0; i < sgElm.Count(); i++ )  {
    if( sgElm[i]->GetSuperElement() != NULL &&
        sgElm[i]->GetSuperElement()->GetTag() == 1 )
    {
      sgElm[i] = NULL;
    }
  }
  sgElm.Pack();
}
//..............................................................................
bool TSpaceGroup::EqualsWithoutTranslation (const TSpaceGroup& sg) const {
  if( MatrixCount() != sg.MatrixCount() )  return false;
  const size_t mc = MatrixCount();
  for( size_t i=0; i  < mc; i++ )
    Matrices[i].SetRawId(0);

  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    smatd& m = sg.GetMatrix(i);
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = Matrices[j];
      if( m1.GetId() != 0 )  continue;
      bool equal = true;
      size_t signChanges = 0;
      size_t matrixElements = 0;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m1.r[k][l] != 0 )  matrixElements++;
          if( m.r[k][l] != m1.r[k][l] )  {
            if( olx_abs(m.r[k][l]) != olx_abs(m1.r[k][l]) )  {
              equal = false;
              break;
            }
            else  signChanges++;
          }
        }
        if( !equal )  break;
      }

      // have to consider sign change only for centrisymmetric groups
      if( !equal || ( (signChanges != matrixElements) && (signChanges != 0)) )
        continue;
      found = true;
      m1.SetRawId(1);
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
bool TSpaceGroup::Compare(const smatd_list& matrices, double& st) const {
  size_t mc = (MatrixCount()+1+Latt.GetVectors().Count());
  if( IsCentrosymmetric() )  mc *= 2;
  if( mc != matrices.Count() )  return false;
  smatd_list tm;
  tm.SetCapacity(mc);
  this->GetMatrices(tm, mattAll);
  vec3d translation;
  for( size_t i=0; i  < mc; i++ )  // mark matrices as unused
    tm[i].SetRawId(0);
  for( size_t i=0; i  < mc; i++ )  {
    bool found = false;
    const smatd& m = matrices[i];
    for( size_t j=0; j  < mc; j++ )  {
      smatd& m1 = tm[j];
      if( m1.GetId() == 1 )  continue;
      bool equal = true;
      for( size_t k=0; k < 3; k++ )  {
        for( size_t l=0; l < 3; l++ )  {
          if( m.r[k][l] != m1.r[k][l] )  {
            equal = false;
            break;
          }
        }
        if( !equal )  break;
      }
      if( equal )  {
        found = true;
        m1.SetRawId(1);
        for( size_t k=0; k < 3; k++ )  {
          translation[k] = m.t[k] - m1.t[k];
          int iv = (int)translation[k];  translation[k] -= iv;
          if( olx_abs(translation[k]) < 0.01 ||
              olx_abs(translation[k]) >= 0.99 )
          {
            translation[k] = 0;
          }
        }
        st += translation.QLength();
        break;
      }
    }
    if( !found )  return false;
  }
  return true;
}
//..............................................................................
SymmSpace::Info TSpaceGroup::GetInfo() const {
  SymmSpace::Info info;
  info.centrosymmetric = this->CentroSymmetric;
  info.matrices = this->Matrices;
  info.matrices.AddNew().I();
  if (this->CentroSymmetric)
    info.inv_trans = this->InversionCenter;
  info.latt = GetLattice().GetLatt();
  info.normalise(GetLattice().GetVectors());
  return info;
}
//..............................................................................
size_t TSpaceGroup::GetUniqMatrices(smatd_list& matrices, short Flags) const  {
  smatd_list allm;
  size_t c = 0;
  GetMatrices(allm, Flags);
  for( size_t i=0; i < allm.Count(); i++ )  {
    if( matrices.IndexOf(allm[i]) == InvalidIndex )  {
      matrices.AddCopy(allm[i]);
      c++;
    }
  }
  return c;
}
//..............................................................................
void TSpaceGroup::GetMatrices(smatd_list& matrices, short Flags) const {
  // add identity, if not requested - delete in the end
  matrices.AddNew().r.I();
  for( size_t i=0; i < MatrixCount(); i++ )  {
    smatd* m = NULL;
    const smatd& mt = Matrices[i];
    if( (Flags & mattTranslation) == 0 )  {
      if( mt.t.IsNull() )
        m = new smatd(mt);
    }
    else
      m = new smatd(mt);
    if( m == NULL )  continue;
    matrices.Add(*m);
  }
  if( (Flags & mattCentering) == mattCentering )  {
    for( size_t i=0; i <= MatrixCount(); i++ )  {
      const smatd& mt = (i==0 ? matrices[0] : Matrices[i-1]);
      for( size_t j=0; j < Latt.GetVectors().Count(); j++ )  {
        const vec3d& v = Latt.GetVectors()[j];
        bool add = true;
        if( (Flags & mattTranslation) == 0 && i != InvalidIndex )  {
          for( int k=0; k < 3; k++ )  {
            double dv = mt.t[k] - v[k];
            int iv = (int)dv;  dv -= iv;
            if( olx_abs(dv) < 0.01 || olx_abs(dv) > 0.99 )  dv = 0;
            if( dv != 0 )  {
              add = false;
              break;
            }
          }
        }
        if( add )
          matrices.AddCopy(mt).t += v;
      }
    }
  }
  if( CentroSymmetric && ((Flags & mattInversion) == mattInversion) )  {
    const size_t mc = matrices.Count();
    smatd im;
    im.r.I() *= -1;
    im.t = -InversionCenter*2;
    for( size_t i=0; i < mc; i++ ) {
      matrices.Add(new smatd(matrices[i])) *= im;
    }
    if( (Flags & mattIdentity) == 0 ) {
      matrices.Insert(0, new smatd).I() *= im;
    }
  }
  for( size_t i=0; i < matrices.Count(); i++ )
    matrices[i].t -= matrices[i].t.Floor<int>();
  if( (Flags & mattIdentity) == 0 )
    matrices.Delete(0);
}
//..............................................................................
//..............................................................................
//..............................................................................
size_t TBravaisLattice::FindSpaceGroups(TPtrList<TSpaceGroup>& SpaceGroups) const  {
  size_t rc = 0;
  const TSymmLib& sl = TSymmLib::GetInstance();
  for( size_t i=0; i < sl.SGCount(); i++ )  {
    if( &sl.GetGroup(i).GetBravaisLattice() == this )  {
      rc++;
      SpaceGroups.Add(sl.GetGroup(i));
    }
  }
  return rc;
}
//..............................................................................
//..............................................................................
//..............................................................................
TSymmElement::TSymmElement(const olxstr& name, TSpaceGroup* sg)  {
  sg->GetMatrices(Matrices, mattAll^mattIdentity);
  Name = name;
  SuperElement = NULL;
}
//..............................................................................
//..............................................................................
//..............................................................................
TSymmLib::TSymmLib(const olxstr& FN) : extra_added(0)  {
  if( Instance != NULL )
    throw TFunctionFailedException(__OlxSourceInfo, "An instance of the library is already created");

  for( int i=1; i < 8; i++ )  {
    TCLattice* CL = new TCLattice(i);
    Lattices.Add(CL->GetSymbol(), CL);
  }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
  size_t sgc = sizeof(olx_SGLib)/sizeof(olx_SGLib[0]);
  for( size_t i=0; i < sgc; i++ )  {
    TStrList toks(olx_SGLib[i].matrices, ';');
    smatd_list ml(toks.Count());
    for( size_t j=0; j < toks.Count(); j++ )  {
      ml[j] = TSymmParser::SymmToMatrix(toks[j]);
    }
    TSpaceGroup* SG = new TSpaceGroup(
      ml,
      olx_SGLib[i].name,
      olx_SGLib[i].full_name,
      olx_SGLib[i].axis, olx_SGLib[i].number,
      GetLatticeByNumber(olx_SGLib[i].latt), (olx_SGLib[i].latt > 0));
    hall_symbols.Add(SG->GetHallSymbol(), SG);
    SpaceGroups.Add(olx_SGLib[i].name, SG);
    if( SG->GetName() == "Fdd2" )
      SG->InversionCenter = vec3d(1./8, 1./8, 1./2);
    else if( SG->GetName() == "I41" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I4122" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./8);
    else if( SG->GetName() == "I4132" )
      SG->InversionCenter = vec3d(1./8, 1./8, 1./8);
    else if( SG->GetName() == "I41md" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I41cd" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./2);
    else if( SG->GetName() == "I-42d" )
      SG->InversionCenter = vec3d(1./2, 1./4, 1./8);
  }
///////////////////////////////////////////////////////////////////////////////
  TBravaisLattice* BL = new TBravaisLattice("Triclinic");
  BL->AddSymmetry( this->FindGroupByName("P-1") );
  BL->AddLattice( FindLattice("P") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Monoclinic");
  BL->AddSymmetry( this->FindGroupByName("P2/m") );
  BL->AddSymmetry( this->FindGroupByName("P112/m") );
  BL->AddSymmetry( this->FindGroupByName("P2/m11") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("A") );
  BL->AddLattice( FindLattice("B") );
  BL->AddLattice( FindLattice("C") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Orthorhombic");
  BL->AddSymmetry( this->FindGroupByName("Pmmm") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("A") );
  BL->AddLattice( FindLattice("B") );
  BL->AddLattice( FindLattice("C") );
  BL->AddLattice( FindLattice("I") );
  BL->AddLattice( FindLattice("F") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Tetragonal");
  BL->AddSymmetry( this->FindGroupByName("P4/m") );
  BL->AddSymmetry( this->FindGroupByName("P4/mmm") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("I") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Trigonal");
  BL->AddSymmetry( this->FindGroupByName("P-3") );
  BL->AddSymmetry( this->FindGroupByName("P-3m1") );
  BL->AddSymmetry( this->FindGroupByName("P-31m") );
  BL->AddSymmetry( this->FindGroupByName("R3:r") );
  BL->AddSymmetry( this->FindGroupByName("R32:r") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("R") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Hexagonal");
  BL->AddSymmetry( this->FindGroupByName("P6/m") );
  BL->AddSymmetry( this->FindGroupByName("P6/mmm") );
  BL->AddLattice( FindLattice("P") );
  BravaisLattices.Add( BL->GetName(), BL );

  BL = new TBravaisLattice("Cubic");
  BL->AddSymmetry( this->FindGroupByName("Pm-3") );
  BL->AddSymmetry( this->FindGroupByName("Pm-3m") );
  BL->AddLattice( FindLattice("P") );
  BL->AddLattice( FindLattice("I") );
  BL->AddLattice( FindLattice("F") );
  BravaisLattices.Add( BL->GetName(), BL );

//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("2--", FindGroupByName("P211") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-2-", FindGroupByName("P2") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--2", FindGroupByName("P112") );
  // 0.5+X,-Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "21--", FindGroupByName("P2111") );
  // -X,0.5+Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "-21-", FindGroupByName("P21") );
  // -X,-Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "--21", FindGroupByName("P1121") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("3", FindGroupByName("P3") );
  //-Y,+X-Y,0.333+Z;+Y-X,-X,0.667+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("31", FindGroupByName("P31") );
  // -Y,+X-Y,0.667+Z;+Y-X,-X,0.333+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("32", FindGroupByName("P32") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("4", FindGroupByName("P4") );
  //-Y,+X,0.25+Z;-X,-Y,0.5+Z;+Y,-X,0.75+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "41", FindGroupByName("P41") );
  //-Y,+X,0.5+Z;-X,-Y,+Z;+Y,-X,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("42", FindGroupByName("P42") );
  // -Y,+X,0.75+Z;-X,-Y,0.5+Z;+Y,-X,0.25+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("43", FindGroupByName("P43") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("6", FindGroupByName("P6") );
  //-Y+X,+X,0.167+Z;-Y,+X-Y,0.333+Z;-X,-Y,0.5+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.833+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("61", FindGroupByName("P61") );
  //-Y+X,+X,0.333+Z;-Y,+X-Y,0.667+Z;-X,-Y,+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.667+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("62", FindGroupByName("P62") );
  //-Y+X,+X,0.5+Z;-Y,+X-Y,+Z;-X,-Y,0.5+Z;+Y-X,-X,+Z;+Y,-X+Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("63", FindGroupByName("P63") );
  //-Y+X,+X,0.667+Z;-Y,+X-Y,0.333+Z;-X,-Y,+Z;+Y-X,-X,0.667+Z;+Y,-X+Y,0.333+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("64", FindGroupByName("P64") );
  //-Y+X,+X,0.833+Z;-Y,+X-Y,0.667+Z;-X,-Y,0.5+Z;+Y-X,-X,0.333+Z;+Y,-X+Y,0.167+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("65", FindGroupByName("P65") );

  // -X,0.5+Y,0.5+Z
  TSymmElement* se_n11 = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "n--", FindGroupByName("Pn11") );
  //0.5+X,-Y,0.5+Z
  TSymmElement* se_n = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "-n-", FindGroupByName("Pn") );
  //0.5+X,0.5+Y,-Z
  TSymmElement* se_11n = &SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "--n", FindGroupByName("P11n") );

  // 0.5+X,-Y,+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "-a-", FindGroupByName("Pa") ).SuperElement = se_n;
  //0.5+X,+Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "--a", FindGroupByName("P11a") ).SuperElement = se_11n;

  //-X,0.5+Y,+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "b--", FindGroupByName("Pb11") ).SuperElement = se_n11;
  //+X,0.5+Y,-Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "--b", FindGroupByName("P11b") ).SuperElement = se_11n;

  //-X,+Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "c--", FindGroupByName("Pc11") ).SuperElement = se_n11;
  //+X,-Y,0.5+Z
  SymmetryElements.AddNew<olxstr, TSpaceGroup*>(
    "-c-", FindGroupByName("Pc") ).SuperElement = se_n;

//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("m--", FindGroupByName("Pm11") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("-m-", FindGroupByName("Pm") );
//  SymmetryElements.AddNew<olxstr, TSpaceGroup*>("--m", FindGroupByName("P11m") );

  // xonstructing glide d planes
  smatd dMatt;
  TSymmElement& d1 = SymmetryElements.AddNew<olxstr>("d--");
  dMatt.r[0][0] = -1;  dMatt.r[1][1] = 1;  dMatt.r[2][2] = 1;
  dMatt.t[0] = 0;      dMatt.t[1] = dMatt.t[2] = 1./4.;
  d1.AddMatrix(dMatt);
  TSymmElement& d2 = SymmetryElements.AddNew<olxstr>("-d-");
  dMatt.r[0][0] = 1;  dMatt.r[1][1] = -1;  dMatt.r[2][2] = 1;
  dMatt.t[1] = 0;     dMatt.t[0] = dMatt.t[2] = 1./4.;
  d2.AddMatrix(dMatt);
  TSymmElement& d3 = SymmetryElements.AddNew<olxstr>("--d");
  dMatt.r[0][0] = 1;  dMatt.r[1][1] = 1;  dMatt.r[2][2] = -1;
  dMatt.t[2] = 0;     dMatt.t[0] = dMatt.t[1] = 1./4.;
  d3.AddMatrix(dMatt);

  PointGroups <<
    FindGroupByName("P1")  <<    //1
    FindGroupByName("P-1") <<    //2
    FindGroupByName("P2")  <<    //3
    FindGroupByName("Pm")  <<    //4
    FindGroupByName("P2/m") <<   //5
    FindGroupByName("P222") <<   //6
    FindGroupByName("Pmm2") <<   //7
    FindGroupByName("Pmmm") <<   //8
    FindGroupByName("P4") <<     //9
    FindGroupByName("P-4") <<    //10
    FindGroupByName("P4/m") <<   //11
    FindGroupByName("P422") <<   //12
    FindGroupByName("P4mm") <<   //13
    FindGroupByName("P-42m") <<  //14
    FindGroupByName("P4/mmm") << //15

    FindGroupByName("P3") <<     //16
    FindGroupByName("P-3") <<    //17
    FindGroupByName("P321") <<   //18
    FindGroupByName("P3m1") <<   //19
    FindGroupByName("P-3m1") <<  //20

    FindGroupByName("P6") <<     //21
    FindGroupByName("P-6") <<    //22
    FindGroupByName("P6/m") <<   //23
    FindGroupByName("P622") <<   //24
    FindGroupByName("P6mm") <<   //25
    FindGroupByName("P-62m") <<  //26
    FindGroupByName("P6/mmm") << //27

    FindGroupByName("P23") <<    //28
    FindGroupByName("Pm-3") <<   //29
    FindGroupByName("P432") <<   //30
    FindGroupByName("P-43m") <<  //31
    FindGroupByName("Pm-3m");    //32

  _PointGroups.SetCount(PointGroups.Count());
  for (size_t i=0; i < PointGroups.Count(); i++)
    _PointGroups[i] << PointGroups[i];
  _PointGroups[2] << FindGroupByName("P211") << FindGroupByName("P112");
  _PointGroups[3] << FindGroupByName("Pm11") << FindGroupByName("P11m");
  _PointGroups[4] << FindGroupByName("P112/m") << FindGroupByName("P2/m11");
  _PointGroups[6] << FindGroupByName("P2mm") << FindGroupByName("Pm2m");
  _PointGroups[13] << FindGroupByName("P-4m2");
  _PointGroups[15] << FindGroupByName("R3:r");
  _PointGroups[16] << FindGroupByName("R-3:r");
  _PointGroups[17] << FindGroupByName("P312") <<  FindGroupByName("R32:r");
  _PointGroups[18] << FindGroupByName("P31m") << FindGroupByName("R3m:r");
  _PointGroups[19] << FindGroupByName("P-31m") << FindGroupByName("R-3m:r");
  _PointGroups[25] << FindGroupByName("P-6m2");

  InitRelations();

  Instance = this;
}
//..............................................................................
TSymmLib::~TSymmLib()  {
  for( size_t i=0; i < SGCount(); i++ )
    delete &(GetGroup(i));
  for( size_t i=0; i < LatticeCount(); i++ )
    delete &(GetLatticeByIndex(i));
  for( size_t i=0; i < BravaisLatticeCount(); i++ )
    delete &(GetBravaisLattice(i));
  Instance = NULL;
}
//..............................................................................
void TSymmLib::GetGroupByNumber(int N, TPtrList<TSpaceGroup>& res) const  {
  for( size_t i=0; i < SGCount(); i++ )
    if( GetGroup(i).GetNumber() == N )  res.Add( &GetGroup(i) );
}
//..............................................................................
TSpaceGroup &TSymmLib::CreateNewFromCompact(int latt, const smatd_list& ml,
  const olxstr &_hs)
{
  const olxstr hs = _hs.IsEmpty() ? HallSymbol::Evaluate(latt, ml) : _hs;
  TBasicApp::NewLogEntry(logInfo) << "Adding new SG " << hs;
  TSpaceGroup *SG = new TSpaceGroup(ml, hs, hs,
    EmptyString(), -(++extra_added), GetLatticeByNumber(latt), (latt > 0), hs);
  SpaceGroups.Add(hs, &InitSpaceGroup(*SG));
  return *hall_symbols.Add(hs, SG);
}
//..............................................................................
TSpaceGroup &TSymmLib::InitSpaceGroup(TSpaceGroup &sg) {
  for( size_t i=0; i < BravaisLatticeCount(); i++ )  {
    TBravaisLattice& bl = GetBravaisLattice(i);
    bool found = false;
    for( size_t j=0; j < bl.SymmetryCount(); j++ )  {
      if( bl.GetSymmetry(j).EqualsWithoutTranslation(sg) )  {
        sg.SetBravaisLattice(bl);
        sg.SetLaueClass(bl.GetSymmetry(j));
        found = true;
        break;
      }
    }
    if( found )  break;
  }
  if (&sg.GetBravaisLattice() == NULL) {
    throw TFunctionFailedException(__OlxSourceInfo,
      "Failed to locate space group Laue class/Bravias lattice");
  }
  for (size_t i=0; i < _PointGroups.Count(); i++) {
    for (size_t j=0; j < _PointGroups[i].Count(); j++) {
      if( sg.ContainsGroup(_PointGroups[i][j]) )  {
        sg.SetPointGroup(*PointGroups[i]);
        break;
      }
    }
    if (&sg.GetPointGroup() != NULL)
      break;
  }
  if (&sg.GetPointGroup() == NULL) {
    throw TFunctionFailedException(__OlxSourceInfo,
      "Failed to locate space group point group");
  }
  return sg;
}
//..............................................................................
TSpaceGroup& TSymmLib::CreateNew(const SymmSpace::Info& si,
  const olxstr &hs)
{
  smatd_list ml;
  for( size_t i=0; i < si.matrices.Count(); i++ ) {
    if (!si.matrices[i].IsI())
      ml.AddCopy(si.matrices[i]);
  }
  if (si.inv_trans.IsNull(1e-3))
    return CreateNewFromCompact(si.centrosymmetric ? si.latt : -si.latt, ml, hs);
  else {
    TSpaceGroup* SG = new TSpaceGroup(ml, hs, hs,
      EmptyString(), -(++extra_added), GetLatticeByNumber(si.latt), true, hs);
    SG->InversionCenter = si.inv_trans/2;
    TBasicApp::NewLogEntry(logInfo) << "Adding new SG " << hs;
    SpaceGroups.Add(hs, &InitSpaceGroup(*SG));
    return *hall_symbols.Add(hs, SG);
  }
}
//..............................................................................
TSpaceGroup &TSymmLib::CreateNew(const SymmSpace::Info &si) {
  olxstr hs = HallSymbol::Evaluate(si);
  TSpaceGroup *sg = hall_symbols.Find(hs, NULL);
  return sg == NULL ? CreateNew(si, hs) : *sg;
}
//..............................................................................
TSpaceGroup &TSymmLib::CreateNew(const olxstr &hs_) {
  olxstr hs = olxstr(hs_).TrimWhiteChars();
  SymmSpace::Info si = HallSymbol::Expand(hs);
  TSpaceGroup *sg = hall_symbols.Find(hs, NULL);
  return sg == NULL ? CreateNew(si, hs) : *sg;
}
//..............................................................................
TSpaceGroup& TSymmLib::FindSG(const TAsymmUnit& AU)  {
  smatd_list ml;
  TSymmLib::GetInstance().ExpandLatt(ml, AU.GetMatices(), AU.GetLatt());
  SymmSpace::Info si = SymmSpace::GetInfo(ml);
  olxstr hs = HallSymbol::Evaluate(si);
  TSpaceGroup *sg = hall_symbols.Find(hs, NULL);
  return sg == NULL ? CreateNew(si, hs) : *sg;
}
//..............................................................................
size_t TSymmLib::FindBravaisLattices(TAsymmUnit& AU,
  TTypeList<TBravaisLatticeRef>& res) const
{
  const double
    Alpha = AU.GetAngles()[0],
    Beta = AU.GetAngles()[1],
    Gamma = AU.GetAngles()[2];
  double A = AU.GetAxes()[0], B = AU.GetAxes()[1], C = AU.GetAxes()[2];
  // alpha = beta = gamma
  if( Alpha == Beta && Alpha == Gamma )  {
    if( Alpha == 90 )  {
      if( A == B && A == C )  {
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Cubic"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Tetragonal"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Orthorhombic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
      }
      else if( A == B )  {
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Tetragonal"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Orthorhombic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
      }
      else  {
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Orthorhombic"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
      }
    }
    else  {
      res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Trigonal"), 0);
      res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
    }
  }
  else if( Alpha == Beta )  {
    if( Alpha == 90 )  {
      if( Gamma == 120 )  {
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Trigonal"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Hexagonal"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), -1);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
      }
      else  {
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), 0);
        res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
      }
    }
  }
  else if( Alpha == Gamma && Alpha == 90 )  {
    res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Monoclinic"), 0);
    res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), -1);
  }
  else
    res.AddNew<TBravaisLattice*,int>(FindBravaisLattice("Triclinic"), 0);
  return 0;
}
//..............................................................................
size_t TSymmLib::FindLaueClassGroups(const TSpaceGroup& LaueClass,
  TPtrList<TSpaceGroup>& res) const
{
  size_t rc = res.Count();
  for( size_t i=0; i < SGCount(); i++ )  {
    if( &GetGroup(i).GetLaueClass() == &LaueClass )  {
      res.Add(GetGroup(i));
    }
  }
  return res.Count()-rc;
}
//..............................................................................
size_t TSymmLib::FindPointGroupGroups(const TSpaceGroup& PointGroup,
  TPtrList<TSpaceGroup>& res) const
{
  size_t rc = res.Count();
  for( size_t i=0; i < SGCount(); i++ )  {
    if( &GetGroup(i).GetPointGroup() == &PointGroup )
      res.Add(GetGroup(i));
  }
  return res.Count()-rc;
}
//..............................................................................
void TSymmLib::InitRelations()  {
  for( size_t i=0; i < BravaisLatticeCount(); i++ )  {
    TBravaisLattice& bl = GetBravaisLattice(i);
    for( size_t j=0; j < bl.LatticeCount(); j++ )
      bl.GetLattice(j).AddBravaiseLattice(&bl);
    for( size_t j=0; j < SGCount(); j++ )  {
      TSpaceGroup& sg = GetGroup(j);
      if( &(sg.GetBravaisLattice()) != NULL )  continue;
      bool found = false;
      for( size_t k=0; k < bl.SymmetryCount(); k++ )  {
        if( bl.GetSymmetry(k).EqualsWithoutTranslation(sg) )  {
          sg.SetBravaisLattice(bl);
          sg.SetLaueClass(bl.GetSymmetry(k));
          found = true;
          break;
        }
        if( found )  break;
      }
    }
  }
//  TStrList o;
  for( size_t i=0; i < SGCount(); i++ )  {
    TSpaceGroup& sg = GetGroup(i);
//    olxstr &l = o.Add("{\"") << sg.GetName() << "\", \"" <<
//      sg.GetFullName() << "\", \"" << sg.GetAxis() << "\", " <<
//      sg.GetNumber() << ", " <<
//      sg.GetLattice().GetLatt()*(sg.IsCentrosymmetric() ? 1 : -1) <<
//      ", \"";
//    TEBitArray arr(sg_mat_id::size*sg.MatrixCount());
//    for (size_t j=0; j < sg.MatrixCount(); j++) {
//      for (int k=0; k < 3; k++)
//        if (sg.GetMatrix(j).t[k] > 1)
//          TBasicApp::NewLogEntry() << "Oups";
//      int id = sg_mat_id::get(sg.GetMatrix(j));
//      for (size_t k=0; k < sg_mat_id::size; k++) {
//        if ((id&(1<<k)) != 0)
//          arr.SetTrue(sg_mat_id::size*j+k);
//      }
//    }
//    l << arr.ToBase64String() << "\"},";
    if( &sg.GetPointGroup() != NULL )  continue;
    TSpaceGroup* pg = NULL;
    for( size_t j=0; j < _PointGroups.Count(); j++ )  {
      for (size_t k=0; k < _PointGroups[j].Count(); k++) {
        if( GetGroup(i).ContainsGroup(_PointGroups[j][k]) )  {
          pg = PointGroups[j];
          break;
        }
      }
      if (pg != NULL) break;
    }
//    TCStrList(o).SaveToFile("e:/2.txt");
    if( pg != NULL )
      sg.SetPointGroup(*pg);
  }
  // test
#ifdef _DEBUG
  for( size_t i=0; i < SGCount(); i++ )  {
    TSpaceGroup& sg = GetGroup(i);
    if( &sg.GetPointGroup() == NULL )
      throw TFunctionFailedException(__OlxSourceInfo, "assert point group");
    if( &sg.GetLaueClass() == NULL )
      throw TFunctionFailedException(__OlxSourceInfo, "assert laue class");
  }
#endif
}

//..............................................................................
TSymmElement*  TSymmLib::FindSymmElement(const olxstr& name) const {
  for( size_t i=0; i < SymmetryElements.Count(); i++ )
    if( SymmetryElements[i].GetName() == name )  return &SymmetryElements[i];
  return NULL;
}
