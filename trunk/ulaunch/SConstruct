import sys
import os
import string
import platform
import time

if sys.platform[:3] == 'win':
  def_tool = 'vc9'
else:
  def_tool = 'gnu'
variables = Variables()
variables.AddVariables(
    EnumVariable('TOOL', 'The tool to use', def_tool, allowed_values=('vc8', 'vc9', 'gnu', 'intel'))
    )
if sys.platform[:3] == 'win':
  env = Environment(ENV = os.environ, variables = variables, TARGET_ARCH="x86", MSVS_VERSION='9.0')
else:
  env = Environment(ENV = os.environ, variables = variables, TARGET_ARCH="x86")
Help(variables.GenerateHelpText(env))

if env['TOOL'] == 'vc8':
  env["MSVS"] = {'VERSION': '8.0'}
  env['MSVS_VERSION'] = '8.0'
  Tool('msvc')(env)
elif env['TOOL'] == 'vc9':
  env['MSVS'] = {'VERSION': "9.0"} 
  env['MSVS_VERSION'] = '9.0'
  Tool('msvc')(env)
elif env['TOOL'] == 'gnu':
  Tool('g++')(env)
elif env['TOOL'] == 'intel':
  Tool('intelc')(env)
env.Append(CCFLAGS = ['-D_NO_PYTHON'])
env.Append(CPPPATH = ['../sdl', '../repository'])
out_dir = 'build/scons/' 
if sys.platform[:3] == 'win':
  out_dir += 'msvc-' + env['MSVS_VERSION'] + '/'
else:
  out_dir += env['TOOL'] + '/'
print 'Building location: ' + out_dir
#get file lists
sdl = Glob('../sdl/*.cpp')
sdl_exp = Glob('../sdl/exparse/*.cpp')
sdl_smart = Glob('../sdl/smart/*.cpp')
ulaunch = Glob('./*.cpp')
np_repository = Split("""../repository/shellutil.cpp ../repository/patchapi.cpp
                         """)

#function to process file name list
def processFileNameList(file_list, envi, dest, suffix=''):
  obj_list = []
  for file in file_list:
    fn = os.path.splitext( os.path.split(file)[1])[0]
    obj_list.append( envi.Object(dest+'/'+fn+suffix, file) )
  return obj_list

def fileListToStringList(src_dir, file_list):
  str_list = []
  for file in file_list:
    str_list.append(src_dir + '/' + file.name)
  return str_list
    
unirun_env = None
if sys.platform[:3] == 'win':
  #http://www.scons.org/wiki/EmbedManifestIntoTarget
  #embedd manifest...
  env['LINKCOM'] = [env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1']
  env['SHLINKCOM'] = [env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']
  cc_flags = ['/EHsc', '/O2', '/Oi', '/MT', '/GF', '/FD']
  env.Append(CCFLAGS = cc_flags) 
  env.Append(LIBS = Split(""" mapi32 glu32 user32 opengl32 gdi32 ole32 
                             advapi32 comdlg32 comctl32 shell32 rpcrt4 oleaut32
                             kernel32 wsock32 Iphlpapi.lib"""))
else:
  if env['TOOL'] != 'intel':
    env.Append(CCFLAGS = ['-exceptions']) 
    env.Append(CCFLAGS = ['-O3']) 
  if sys.platform[:6] == 'darwin':
    env.Append(CCFLAGS = '-D__MAC__')
  env.Append(LIBS = Split("""pthread"""))
    
#sdl
sdl_files = fileListToStringList('../sdl', sdl) + fileListToStringList('../sdl/smart', sdl_smart) +\
  fileListToStringList('../sdl/exparse', sdl_exp)
sdl_files = processFileNameList(sdl_files, env, out_dir + 'sdl')
env.StaticLibrary(out_dir + 'lib/sdl', sdl_files)

ulaunch_env = env.Clone()
ulaunch_env.Append(LIBPATH=[out_dir+'lib'])
ulaunch_env.Append(LIBS=['sdl'])

ulaunch_files = fileListToStringList('.', ulaunch) + np_repository
ulaunch_files = processFileNameList(ulaunch_files, ulaunch_env, out_dir+'ulaunch')

if sys.platform[:3] == 'win':
  ulaunch_env.Append(LINKFLAGS=['/PDB:' + out_dir + 'exe/ulaunch.pdb', '/NOLOGO', '/OPT:REF', '/OPT:ICF', '/LTCG'])
ulaunch_env.Program(out_dir+'exe/ulaunch', ulaunch_files)
