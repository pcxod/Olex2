import sys
import os
import string
import platform
import time

AddOption('--olx_debug',
          dest='olx_debug',
          type='string',
          nargs=1,
          action='store',
          metavar='OLX_DEBUG',
          default='false',
          help='Builds debug version')
debug = (GetOption('olx_debug').lower() == 'true')

architecture = platform.architecture()[0]
env_arch = 'x86'
if not architecture:
  architecture = 'unknown'
elif architecture == '64bit':
  env_arch = 'x86_64'
print 'Build architecture: ' + architecture

AddOption('--olx_profile',
          dest='olx_profile',
          type='string',
          nargs=1,
          action='store',
          metavar='OLX_PROFILE',
          default='false',
          help='Build for profiling')
profiling = (GetOption('olx_profile').lower() == 'true')

if sys.platform[:3] == 'win':
  def_tool = 'vc9'
else:
  def_tool = 'gnu'
variables = Variables()
variables.AddVariables(
    EnumVariable('TOOL', 'The tool to use', def_tool, allowed_values=('vc8', 'vc9', 'gnu', 'intel'))
    )
env = Environment(ENV = os.environ, variables = variables, TARGET_ARCH=env_arch)
Help(variables.GenerateHelpText(env))

if env['TOOL'] == 'vc8':
  env["MSVS"] = {'VERSION': '8.0'}
  env['MSVS_VERSION'] = '8.0'
  Tool('msvc')(env)
elif env['TOOL'] == 'vc9':
  env['MSVS'] = {'VERSION': "9.0"} 
  env['MSVS_VERSION'] = '9.0'
  Tool('msvc')(env)
elif env['TOOL'] == 'gnu':
  Tool('g++')(env)
elif env['TOOL'] == 'intel':
  Tool('intelc')(env)
env.Append(CCFLAGS = ['-D_UNICODE', '-DUNICODE', '-D_NO_PYTHON'])
env.Append(CPPPATH = ['../../sdl', '../../repository', '../../xlib'])
out_dir = 'build/scons/' 
if sys.platform[:3] == 'win':
  out_dir += 'msvc-' + env['MSVS_VERSION'] + '/'
else:
  out_dir += env['TOOL'] + '/'
if profiling:
  out_dir += 'profiling'
  
if debug:
  out_dir += 'debug'
else:
  out_dir += 'release'
out_dir += '-' + architecture
out_dir += '/'
print 'Building location: ' + out_dir
################################################################################################
#if possible create a revision version file...
try:
  import pysvn
  client = pysvn.Client()
  stat = client.status('.')
  has_modified = False
  revision = 0
  for f in stat:
    if f.text_status == pysvn.wc_status_kind.modified:
      print 'Modified: ' + f.path
      has_modified = True
    elif f.text_status == pysvn.wc_status_kind.deleted:
      print 'Deleted: ' + f.path
      has_modified = True
    elif f.text_status == pysvn.wc_status_kind.added:
      print 'Added: ' + f.path
      has_modified = True
    if revision == 0 and f.entry and f.entry.revision:
      revision = f.entry.revision.number
  if has_modified:
    print '!Warning the svn has local modifications, the revisision number mignt be not valid'
  if revision != 0:
    env.Append(CCFLAGS = ['-D_SVN_REVISION_AVAILABLE'])
    srvf = file('svn_revision.h', 'wb')
    print >> srvf, 'const int svn_revision_number = ' + str(revision) + ';'
    #print >> srvf, 'const char* compile_timestamp="' + time.asctime() + '";'
    # a date is enough - otherwise files including this will be always recompiled...
    print >> srvf, 'const char* compile_timestamp="' + time.strftime("%Y.%m.%d", time.gmtime()) + '";'
    srvf.close()
    print 'Current repository revision: ' + str(revision)
except:
  print 'Unfortunately could not update the revision information'
################################################################################################
#get file lists
sdl = Glob('../../sdl/*.cpp')
sdl_exp = Glob('../../sdl/exparse/*.cpp')
sdl_smart = Glob('../../sdl/smart/*.cpp')
xlib = Glob('../../xlib/*.cpp')
xlib_henke = Glob('../../xlib/henke/*.cpp')
xlib_absorpc = Glob('../../xlib/absorpc/*.cpp')
xlib_macro = Glob('../../xlib/macro/*.cpp')
chn = Glob('./*.cpp')
np_repository = Split("""../../repository/shellutil.cpp   ../../repository/url.cpp
                         ../../repository/fsext.cpp       ../../repository/eprocess.cpp
                         ../../repository/olxvar.cpp
                         """)

#function to process file name list
def processFileNameList(file_list, envi, dest, suffix=''):
  obj_list = []
  for file in file_list:
    fn = os.path.splitext( os.path.split(file)[1])[0]
    obj_list.append( envi.Object(dest+'/'+fn+suffix, file) )
  return obj_list

def fileListToStringList(src_dir, file_list):
  str_list = []
  for file in file_list:
    str_list.append(src_dir + '/' + file.name)
  return str_list
    
unirun_env = None
if sys.platform[:3] == 'win':
  #http://www.scons.org/wiki/EmbedManifestIntoTarget
  #embedd manifest...
  env['LINKCOM'] = [env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1']
  env['SHLINKCOM'] = [env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']
  if not debug:
    cc_flags = ['/EHsc', '/O2', '/Ob2', '/Oi', '/MD', '/bigobj', '/fp:fast', '/GF']
    env.Append(CCFLAGS = cc_flags) 
  else:
    cc_flags = ['/EHsc', '/RTC1', '-D_DUBUG', '/Od', '/MDd', '/bigobj', '/fp:fast']
    if architecture == '64bit':  cc_flags.append('/Zi')
    else:  cc_flags.append('/ZI')
    env.Append(CCFLAGS = cc_flags) 
    env.Append(LINKFLAGS=['/DEBUG', '/ASSEMBLYDEBUG', '/NODEFAULTLIB:msvcrt'])
  if architecture == '64bit':
    #env.Append(LINKFLAGS=['/MACHINE:X64', '/DEBUG']) #this emits debug info...
    env.Append(LINKFLAGS=['/MACHINE:X64'])
    env['TARGET_ARCH'] = 'x86_64'
  else:
    env.Append(LINKFLAGS=['/MACHINE:X86'])
    env['TARGET_ARCH'] = 'x86'
  # generic libs
  env.Append(LIBS = Split(""" mapi32 glu32 user32 opengl32 gdi32 ole32 
                             advapi32 comdlg32 comctl32 shell32 rpcrt4 oleaut32
                             kernel32 wsock32 Iphlpapi.lib"""))
else:
  if env['TOOL'] != 'intel':
    env.Append(CCFLAGS = ['-exceptions']) 
  if debug:
    env.Append(CCFLAGS = ['-g']) 
  else:
    env.Append(CCFLAGS = ['-O3']) 
  if profiling:
    env.Append(CCFLAGS = ['-pg']) 
    env.Append(LINKFLAGS=['-pg'])
  try: 
    if sys.platform[:6] == 'darwin':
      env.Append(CCFLAGS = '-D__MAC__')
  except:
    print 'Please make sure that wxWidgets and Python config scripts are available'
    Exit(1)
    
#sdl
sdl_files = fileListToStringList('../../sdl', sdl) +\
  fileListToStringList('../../sdl/smart', sdl_smart) +\
  fileListToStringList('../../sdl/exparse', sdl_exp)
sdl_files = processFileNameList(sdl_files, env, out_dir + 'sdl')
env.StaticLibrary(out_dir + 'lib/sdl', sdl_files)

env.Append(LIBPATH=[out_dir+'lib'])
env.Append(LIBS = ['sdl'])

generic_files = fileListToStringList('../../xlib', xlib) + \
                fileListToStringList('../../xlib/macro', xlib_macro) + \
                fileListToStringList('../../xlib/absorpc', xlib_absorpc) + \
                fileListToStringList('../../xlib/henke', xlib_henke)
generic_files = processFileNameList(generic_files, env, out_dir+'generic')

chn_env = env.Clone()
chn_env.Append(LIBPATH=[out_dir+'lib'])
chn_env.Append(LIBS=['sdl'])

chn_files = fileListToStringList('.', chn) + np_repository
chn_files = processFileNameList(chn_files, chn_env, out_dir+'chn')

chn_env.Append(CCFLAGS = ['-D_NO_PYTHON'])
if sys.platform[:3] == 'win':
  chn_env.Append(LINKFLAGS=['/PDB:' + out_dir + 'exe/unirun.pdb'])
chn_env.Program(out_dir+'exe/cchn+', chn_files + generic_files)
