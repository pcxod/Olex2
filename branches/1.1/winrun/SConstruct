import sys
import os
import string
import platform

architecture = platform.architecture()[0]
env_arch = 'x86'
if not architecture:
  architecture = 'unknown'
if architecture == '64bit':
  sse = None
  env_arch = 'x86_64'
print 'Build architecture: ' + architecture

if sys.platform[:3] == 'win':
  def_tool = 'vc9'
else:
  def_tool = 'gnu'
variables = Variables()
variables.AddVariables(
    EnumVariable('TOOL', 'The tool to use', def_tool, allowed_values=('vc8', 'vc9', 'vc10', 'gnu', 'intel'))
    )

env = Environment(ENV=os.environ, variables=variables, TARGET_ARCH=env_arch)
Help(variables.GenerateHelpText(env))

if env['TOOL'] == 'vc8':
  env = Environment(ENV=os.environ, variables=variables, TARGET_ARCH=env_arch, MSVS_VERSION='8.0')
elif env['TOOL'] == 'vc9':
  env = Environment(ENV=os.environ, variables=variables, TARGET_ARCH=env_arch, MSVS_VERSION='9.0')
elif env['TOOL'] == 'vc10':
  env = Environment(ENV=os.environ, variables=variables, TARGET_ARCH=env_arch, MSVS_VERSION='10.0')
elif env['TOOL'] == 'gnu':
  Tool('g++')(env)
elif env['TOOL'] == 'intel':
  Tool('intelc')(env)
env.Append(CPPPATH = ['../sdl', '../repository'])
out_dir = 'build/scons/' 
if sys.platform[:3] == 'win':
  out_dir += 'msvc-' + env['MSVS_VERSION'] + '/'
else:
  out_dir += env['TOOL'] + '/'
out_dir += 'release-' + architecture + '/py' + sys.version[:3]
out_dir += '/'
print 'Building location: ' + out_dir
 
#get file lists
sdl = Glob('../sdl/*.cpp')
sdl_exp = Glob('../sdl/exparse/*.cpp')
sdl_smart = Glob('../sdl/smart/*.cpp')
launch = Glob('./launch/*.cpp')
installer = Glob('./installer/*.cpp')

#function to process file name list
def processFileNameList(file_list, envi, dest, suffix=''):
  obj_list = []
  for file in file_list:
    fn = os.path.splitext( os.path.split(file)[1])[0]
    obj_list.append( envi.Object(dest+'/'+fn+suffix, file) )
  return obj_list

def fileListToStringList(src_dir, file_list):
  str_list = []
  for file in file_list:
    str_list.append(src_dir + '/' + file.name)
  return str_list
    

env['LINKCOM'] = [env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1']
env['SHLINKCOM'] = [env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']
env.Append(LIBS = Split("""mapi32 glu32 user32 opengl32 gdi32 ole32 
                           advapi32 comdlg32 comctl32 shell32 rpcrt4 oleaut32
                           kernel32 wsock32 Iphlpapi.lib DelayImp version"""))
cc_flags = ['/EHsc', '/O2', '/Oi', '/MT', '/fp:fast', '/GF', '/FD', '/D_UNICODE', '/DUNICODE']
env.Append(CCFLAGS = cc_flags) 
env.Append(LINKFLAGS=['/ENTRY:wWinMainCRTStartup', 
                      #'/NODEFAULTLIB:uafxcw', 
                      '/NXCOMPAT', 
                      '/DELAYLOAD:OleAcc.dll',
                      '/MANIFESTUAC:"level=\'highestAvailable\'"',
                      '/OPT:REF',
                      '/OPT:ICF'])
if architecture == '64bit':
  env.Append(LINKFLAGS=['/MACHINE:X64'])
else:
  env.Append(LINKFLAGS=['/MACHINE:X86'])

#sdl
sdl_files = fileListToStringList('../sdl', sdl) + fileListToStringList('../sdl/smart', sdl_smart) +\
  fileListToStringList('../sdl/exparse', sdl_exp)
sdl_files = processFileNameList(sdl_files, env, out_dir + 'sdlus')
env.StaticLibrary(out_dir + 'lib/sdlus', sdl_files)

env.Append(LIBPATH=[out_dir+'lib'])
env.Append(LIBS = ['sdlus'])


env.Append(RCFLAGS=['/l 0x809'])
installer_env = env.Clone()
installer_files = fileListToStringList('installer', installer)
installer_files.append('../repository/patchapi.cpp')
installer_files.append('../repository/updateapi.cpp')
installer_files.append('../repository/url.cpp')
installer_files.append('../repository/unzip.cpp')
installer_files.append('../repository/winzipfs.cpp')
installer_files.append('../repository/filesystem.cpp')
installer_files.append('../repository/shellutil.cpp')
installer_files.append('../repository/httpfs.cpp')
installer_files.append('../repository/cdsfs.cpp')
installer_files = processFileNameList(installer_files, installer_env, out_dir+'installer')
installer_files = installer_files + installer_env.RES(out_dir + 'installer/installer.res', 'installer/installer.rc')
installer_env.Append(LINKFLAGS=['/PDB:' + out_dir + 'exe/installer.pdb'])
installer_env.Program(out_dir+'exe/installer', installer_files)

launch_env = env.Clone()
launch_files = fileListToStringList('launch', launch)
launch_files.append('../repository/patchapi.cpp')
launch_files.append('../repository/shellutil.cpp')
launch_files = processFileNameList(launch_files, launch_env, out_dir+'launch')
launch_files = launch_files + launch_env.RES(out_dir + 'launch/installer.res', 'launch/launch.rc')
launch_env.Append(LINKFLAGS=['/PDB:' + out_dir + 'exe/launch.pdb'])
launch_env.Program(out_dir+'exe/launch', launch_files)
